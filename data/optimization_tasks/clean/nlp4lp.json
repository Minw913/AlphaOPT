[
{
  "task_id": "A000",
  "description": "Mrs. Watson wants to invest in the real-estate market and has a total budget of at most $760000. She has two choices which include condos and detached houses. Each dollar invested in condos yields a $0.50 profit and each dollar invested in detached houses yields a $1 profit. A minimum of 20% of all money invested must be in condos, and at least $20000 must be in detached houses. Formulate an LP that can be used to maximize total profit earned from Mrs. Watson's investment.",
  "ground_truth": 684000.0,
  "formulation": null,
  "correct_program": "def optimize_investment(budget=760000, min_detached=20000, condo_profit_rate=0.5, detached_profit_rate=1.0):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"MrsWatsonInvestment\")\n\n    # Decision variables\n    x_c = model.addVar(name=\"CondoInvestment\", lb=0)\n    x_d = model.addVar(name=\"DetachedInvestment\", lb=min_detached)\n\n    # Set objective: maximize profit\n    model.setObjective(condo_profit_rate * x_c + detached_profit_rate * x_d, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Total budget constraint\n    model.addConstr(x_c + x_d <= budget, name=\"TotalBudget\")\n    # Minimum condo investment (20% of total)\n    # Rearranged as: 0.80 * x_c - 0.20 * x_d >= 0\n    model.addConstr(0.80 * x_c - 0.20 * x_d >= 0, name=\"MinCondoPercent\")\n    # Minimum investment in detached houses\n    model.addConstr(x_d >= min_detached, name=\"MinDetached\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_investment()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A001",
  "description": "A breakfast joint makes two different sandwiches: a regular and a special. Both need eggs and bacon. Each regular sandwich requires 2 eggs and 3 slices of bacon. Each special sandwich requires 3 eggs and 5 slices of bacon. The joint has a total of 40 eggs and 70 slices of bacon. It makes a profit of $3 per regular sandwich and a profit of $4 per special sandwich. How many of each sandwich should be made to maximize profit?",
  "ground_truth": 60.0,
  "formulation": null,
  "correct_program": "def optimize_sandwich_production(eggs_available=40, bacon_available=70, profit_regular=3, profit_special=4):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    model = Model(\"Sandwich_Optimization\")\n    \n    # Decision variables: number of regular and special sandwiches\n    # Both are integers and non-negative\n    x = model.addVar(name=\"Regular\", vtype=GRB.INTEGER, lb=0)\n    y = model.addVar(name=\"Special\", vtype=GRB.INTEGER, lb=0)\n    \n    # Set the objective: maximize profit\n    model.setObjective(profit_regular * x + profit_special * y, GRB.MAXIMIZE)\n    \n    # Add constraints\n    model.addConstr(2 * x + 3 * y <= eggs_available, \"EggsConstraint\")\n    model.addConstr(3 * x + 5 * y <= bacon_available, \"BaconConstraint\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_sandwich_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A002",
  "description": "There is 1000 mg of gold available that is needed to make long and short cables. Long cables require 10 mg of gold while short cables require 7 mg of gold. Because of their compact size, at least 5 times the number of short cables are needed than the long cables. In addition, there needs to be at least 10 long cables made. If each long cable sold results in a $12 profit and each short cable sold results in a $5 profit, how many of each type of cable should be made to maximize profit?",
  "ground_truth": 819.0,
  "formulation": null,
  "correct_program": "def optimize_cable_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"CableProduction\")\n\n    # Decision variables\n    # Number of long cables\n    L = m.addVar(name=\"LongCables\", vtype=GRB.INTEGER, lb=10)\n    # Number of short cables\n    S = m.addVar(name=\"ShortCables\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: maximize profit\n    profit = 12 * L + 5 * S\n    m.setObjective(profit, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Gold constraint\n    m.addConstr(10 * L + 7 * S <= 1000, name=\"GoldLimit\")\n    # Ratio constraint\n    m.addConstr(S >= 5 * L, name=\"RatioConstraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage \nif __name__ == \"__main__\":\n    max_profit = optimize_cable_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A003",
  "description": "A store employs senior citizens who earn $500 per week and young adults who earn $750 per week. The store must keep the weekly wage bill below $30000. On any day, the store requires at least 50 workers, of whom at least 10 must be young adults. To ensure the store runs smoothly, the number of young adults should be at least a third the number of senior citizens. Formulate a LP to minimize the wage bill.",
  "ground_truth": 28250.0,
  "formulation": null,
  "correct_program": "def optimize_staffing(wage_budget=30000, min_total_workers=50, min_young=10):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Store Staffing Optimization\")\n    \n    # Decision variables: number of senior citizens and young adults\n    S = m.addVar(name=\"SeniorCitizens\", lb=0, vtype=GRB.INTEGER)\n    Y = m.addVar(name=\"YoungAdults\", lb=0, vtype=GRB.INTEGER)\n    \n    # Set the objective: minimize total wages\n    m.setObjective(500 * S + 750 * Y, GRB.MINIMIZE)\n    \n    # Add constraints\n    # Wage budget constraint\n    m.addConstr(500 * S + 750 * Y <= wage_budget, \"WageBudget\")\n    # Total workers per week\n    m.addConstr(S + Y >= min_total_workers, \"MinTotalWorkers\")\n    # Minimum young adults\n    m.addConstr(Y >= min_young, \"MinYoungAdults\")\n    # Young adults at least a third of senior citizens\n    m.addConstr(3 * Y >= S, \"YoungAtLeastOneThirdSenior\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    total_wages = optimize_staffing()\n    if total_wages is not None:\n        print(f\"Minimum Total Wages: {total_wages}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A004",
  "description": "A company is deciding where to promote their product. Some options include z-tube, soorchle engine, and wassa advertisements. The cost for each option and the number of viewers they each attract is given. On z-tube, each ad costs $1000 and attracts 400,000 viewers. On soorchle, each ad costs $200 and attracts 5,000 viewers. On wassa, each ad costs $100 and attracts 3,000 viewers. Soorchle limits the number of advertisements from a single company to fifteen. Moreover, in order to balance the advertising among the three types of media, at most a third of the total number of advertisements should occur on wassa. And at least 5% should occur on z-tube. The weekly advertising budget is $10000. How many advertisements should be run in each of the three types of media to maximize the total audience?",
  "ground_truth": 4000000.0,
  "formulation": null,
  "correct_program": "def optimize_ad_campaign(\n    budget=10000,\n    max_soorchle=15,\n    min_z_ratio=0.05,\n    max_wassa_ratio=1/3\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Advertising_Optimization\")\n\n    # Decision variables: number of ads for each media type\n    x_z = model.addVar(vtype=GRB.INTEGER, name=\"z_tube\")\n    x_s = model.addVar(vtype=GRB.INTEGER, name=\"soorchle\")\n    x_w = model.addVar(vtype=GRB.INTEGER, name=\"wassa\")\n\n    # Set objective: maximize total viewers\n    model.setObjective(\n        400000 * x_z + 5000 * x_s + 3000 * x_w,\n        GRB.MAXIMIZE\n    )\n\n    # Add constraints\n    # Budget constraint\n    model.addConstr(1000 * x_z + 200 * x_s + 100 * x_w <= budget, \"Budget\")\n    # Soorchle limit\n    model.addConstr(x_s <= max_soorchle, \"SoorchleLimit\")\n    # Wassa at most a third of total ads\n    model.addConstr(2 * x_w <= x_z + x_s, \"WassaRatio\")\n    # Z-tube at least 5% of total ads\n    # 19 * x_z >= x_s + x_w\n    model.addConstr(19 * x_z >= x_s + x_w, \"ZMinRatio\")\n    # Non-negativity is implicit in variable definition\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        total_viewers = model.objVal\n        return total_viewers\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_viewers = optimize_ad_campaign()\n    if max_viewers is not None:\n        print(f\"Maximum Total Viewers: {max_viewers}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A005",
  "description": "A chair produced by Elm Furniture yields a profit of $43, while every dresser yields a $52 profit. Each week, 17 gallons of stain and 11 lengths of oak wood are available. Each chair requires 1.4 gallons of stain and 2 lengths of oak wood, while each dresser requires 1.1 gallons of stain and 3 lengths of oak wood. Determine the maximum profit.",
  "ground_truth": 224.0,
  "formulation": null,
  "correct_program": "def optimize_furniture_production(\n    profit_chair=43,\n    profit_dresser=52,\n    stain_available=17,\n    oak_available=11,\n    stain_per_chair=1.4,\n    stain_per_dresser=1.1,\n    oak_per_chair=2,\n    oak_per_dresser=3\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Furniture_Production_MaxProfit\")\n\n    # Decision variables: number of chairs and dressers\n    x = model.addVar(name=\"chairs\", lb=0, vtype=GRB.INTEGER)\n    y = model.addVar(name=\"dressers\", lb=0, vtype=GRB.INTEGER)\n\n    # Set the objective: maximize profit\n    model.setObjective(profit_chair * x + profit_dresser * y, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    model.addConstr(stain_per_chair * x + stain_per_dresser * y <= stain_available, \"stain_constraint\")\n    model.addConstr(oak_per_chair * x + oak_per_dresser * y <= oak_available, \"oak_constraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n\nprint(optimize_furniture_production())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A006",
  "description": "A farmer wants to mix his animal feeds, Feed A and Feed B, in such a way that the mixture will contain a minimum of 30 units of protein and 50 units of fat. Feed A costs $100 per kilogram and contains 10 units of protein and 8 units of fat. Feed B costs $80 per kilogram and contains 7 units of protein and 15 units of fat. Determine the minimum cost of the mixture.",
  "ground_truth": 327.6595744680851,
  "formulation": null,
  "correct_program": "def optimize_feed_mixture():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Feed_Mixture_Min_Cost\")\n\n    # Decision variables: amount of Feed A and Feed B\n    x = m.addVar(name=\"Feed_A\", lb=0)\n    y = m.addVar(name=\"Feed_B\", lb=0)\n\n    # Set the objective: minimize total cost\n    m.setObjective(100 * x + 80 * y, GRB.MINIMIZE)\n\n    # Add protein constraint\n    m.addConstr(10 * x + 7 * y >= 30, name=\"ProteinConstraint\")\n\n    # Add fat constraint\n    m.addConstr(8 * x + 15 * y >= 50, name=\"FatConstraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal cost\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_feed_mixture()\n    if min_cost is not None:\n        print(f\"Minimum Cost of Feed Mixture: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A007",
  "description": "An artisan makes two types of terracotta jars: a thin jar and a stubby jar. Each thin jar requires 50 minutes of shaping time and 90 minutes of baking time. Each stubby jar requires 30 minutes of shaping time and 150 minutes of baking time. Per week, there are 3000 minutes available for shaping and 4000 minutes available for baking. The profit per thin jar is $5 and the profit per stubby jar is $9. How many jars of each type should the artisan make to maximize profit?",
  "ground_truth": 239.0,
  "formulation": null,
  "correct_program": "def optimize_jar_production(shaping_time=3000, baking_time=4000,\n                            profit_thin=5, profit_stubby=9,\n                            shaping_time_thin=50, baking_time_thin=90,\n                            shaping_time_stubby=30, baking_time_stubby=150):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Terracotta_Jars_Optimization\")\n    \n    # Decision variables: number of thin and stubby jars\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Thin_Jars\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Stubby_Jars\")\n    \n    # Set objective: maximize profit\n    m.setObjective(profit_thin * x + profit_stubby * y, GRB.MAXIMIZE)\n    \n    # Add constraints\n    m.addConstr(shaping_time_thin * x + shaping_time_stubby * y <= shaping_time, \"Shaping_Time\")\n    m.addConstr(baking_time_thin * x + baking_time_stubby * y <= baking_time, \"Baking_Time\")\n    m.addConstr(x >= 0, \"NonNeg_x\")\n    m.addConstr(y >= 0, \"NonNeg_y\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_jar_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A008",
  "description": "A grocery store wants to liquidate its stock of 10 apples, 20 bananas, and 80 grapes. Given past experience, the store knows that they can propose a banana-haters package with 6 apples and 30 grapes and that this package will bring a profit of six euros. Similarly, they can prepare a combo package with 5 apples, 6 bananas, and 20 grapes, yielding a profit of seven euros. They know they can sell any quantity of these two packages within the availability of its stock. What quantity of each package, banana-haters packages and combo packages, should the store prepare to maximize net profit?",
  "ground_truth": 14.0,
  "formulation": null,
  "correct_program": "def optimize_package_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Grocery_Packages\")\n\n    # Decision variables: number of packages (integer, ≥ 0)\n    x = m.addVar(vtype=GRB.INTEGER, name=\"banana_haters\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"combo\")\n\n    # Set objective: maximize total profit\n    m.setObjective(6 * x + 7 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Apples constraint\n    m.addConstr(6 * x + 5 * y <= 10, \"apple_limit\")\n    # Grapes constraint\n    m.addConstr(30 * x + 20 * y <= 80, \"grape_limit\")\n    # Bananas constraint\n    m.addConstr(6 * y <= 20, \"banana_limit\")\n    # Non-negativity is implicit in variable definition\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_package_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A009",
  "description": "A bakery uses a stand-mixer and a slow bake oven to make bread and cookies. Each machine can run for at most 3000 hours per year. To bake a loaf of bread takes 1 hour in the stand mixer and 3 hours in the oven. A batch of cookies requires 0.5 hours in the mixer and 1 hour in the oven. The profit per loaf of bread is $5 and the profit per batch of cookies is $3. How should the bakery operate to maximize total profit?",
  "ground_truth": 9000.0,
  "formulation": null,
  "correct_program": "def optimize_bakery_production(\n    max_machine_hours=3000,\n    profit_bread=5,\n    profit_cookies=3,\n    bread_mixer_time=1,\n    cookies_mixer_time=0.5,\n    bread_oven_time=3,\n    cookies_oven_time=1\n):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"BakeryOptimization\")\n\n    # Decision variables: number of loaves of bread and batches of cookies\n    x = m.addVar(name=\"Bread\", lb=0)\n    y = m.addVar(name=\"Cookies\", lb=0)\n\n    # Set the objective: maximize profit\n    m.setObjective(profit_bread * x + profit_cookies * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Stand-mixer constraint\n    m.addConstr(bread_mixer_time * x + cookies_mixer_time * y <= max_machine_hours, \"MixerTime\")\n    # Oven constraint\n    m.addConstr(bread_oven_time * x + cookies_oven_time * y <= max_machine_hours, \"OvenTime\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal profit\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_bakery_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A010",
  "description": "A glass factory makes two types of glass panes: a regular glass pane and a tempered glass pane. Both require time on a heating and cooling machine. Both machines are available for a maximum of 300 minutes per day. It takes 3 minutes in the heating machine and 5 minutes in the cooling machine to make one regular glass pane. It takes 5 minutes in the heating machine and 8 minutes in the cooling machine to make one tempered glass pane. The profit per pane of regular glass is $8 and the profit per pane of tempered glass is $10. How many panes of each glass type should the factory make to maximize profit? What is the maximum profit?",
  "ground_truth": 480.0,
  "formulation": null,
  "correct_program": "def optimize_glass_production(\n    max_time=300,\n    profit_regular=8,\n    profit_tempered=10,\n    heating_time_regular=3,\n    cooling_time_regular=5,\n    heating_time_tempered=5,\n    cooling_time_tempered=8\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"GlassProductionMaxProfit\")\n\n    # Decision variables: number of regular and tempered panes\n    x = model.addVar(vtype=GRB.INTEGER, name=\"Regular\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"Tempered\")\n\n    # Set objective: maximize profit\n    model.setObjective(profit_regular * x + profit_tempered * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Heating machine constraint\n    model.addConstr(heating_time_regular * x + heating_time_tempered * y <= max_time, \"HeatingTime\")\n    # Cooling machine constraint\n    model.addConstr(cooling_time_regular * x + cooling_time_tempered * y <= max_time, \"CoolingTime\")\n    # Non-negativity constraints are implicit with variable types\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_glass_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A011",
  "description": "A souvenir shop makes wooden elephants and tigers with plastic ornaments. Each elephant requires 50 grams of wood and 20 grams of plastic. Each tiger requires 40 grams of wood and 30 grams of plastic. In a week, 5000 grams of wood and 4000 grams of plastic are available. The profit per elephant sold is $5 and the profit per tiger sold is $4. How many of each should be made in order to maximize profit?",
  "ground_truth": 500.0,
  "formulation": null,
  "correct_program": "def optimize_souvenirs():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Souvenir_Production\")\n\n    # Decision variables: number of elephants and tigers\n    # Both are integers and non-negative\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Elephants\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Tigers\", lb=0)\n\n    # Set the objective: maximize profit\n    m.setObjective(5 * x + 4 * y, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    m.addConstr(50 * x + 40 * y <= 5000, \"WoodConstraint\")\n    m.addConstr(20 * x + 30 * y <= 4000, \"PlasticConstraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_souvenirs()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A012",
  "description": "An art store makes large and small art pieces. The store has available 100 units of paint, 50 units of glitter, and 70 units of glue. To make a large art piece requires 4 units of paint, 3 units of glitter, and 5 units of glue. To make a small art piece requires 2 units of paint, 1 unit of glitter, and 2 units of glue. The store must make at least 5 units of each large and small art pieces. If the profit per large art piece is $30 and the profit per small art piece is $15, how many of each should be made to maximize profit?",
  "ground_truth": 480.0,
  "formulation": null,
  "correct_program": "def optimize_art_production(\n    paint_available=100,\n    glitter_available=50,\n    glue_available=70,\n    min_large=5,\n    min_small=5,\n    profit_large=30,\n    profit_small=15\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Art_Production_Maximize_Profit\")\n\n    # Decision variables: number of large and small art pieces\n    x = model.addVar(vtype=GRB.INTEGER, name=\"Large_Art\", lb=min_large)\n    y = model.addVar(vtype=GRB.INTEGER, name=\"Small_Art\", lb=min_small)\n\n    # Set the objective: maximize profit\n    model.setObjective(profit_large * x + profit_small * y, GRB.MAXIMIZE)\n\n    # Add material constraints\n    model.addConstr(4 * x + 2 * y <= paint_available, \"Paint_Constraint\")\n    model.addConstr(3 * x + y <= glitter_available, \"Glitter_Constraint\")\n    model.addConstr(5 * x + 2 * y <= glue_available, \"Glue_Constraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_art_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A013",
  "description": "My family has decided to invest in real state for the first time. Currently, they have $600,000 to invest, some in apartments and the rest in townhouses. The money invested in apartments must not be greater than $200,000. They have decided that the money invested in apartments must be at least a half as much as that in townhouses.  If the apartments earn 10%, and the townhouses earn 15%, how much money should they invest in each to maximize profit?",
  "ground_truth": 80000.0,
  "formulation": null,
  "correct_program": "def optimize_investment(total_budget=600000, max_apartment_investment=200000, apartment_return=0.10, townhouse_return=0.15):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"RealEstateInvestment\")\n\n    # Decision variables\n    x = model.addVar(name=\"Apartments\", lb=0)  # Investment in apartments\n    y = model.addVar(name=\"Townhouses\", lb=0)  # Investment in townhouses\n\n    # Set objective: maximize profit\n    profit = apartment_return * x + townhouse_return * y\n    model.setObjective(profit, GRB.MAXIMIZE)\n\n    # Add constraints\n    model.addConstr(x + y <= total_budget, name=\"TotalBudget\")\n    model.addConstr(x <= max_apartment_investment, name=\"ApartmentLimit\")\n    model.addConstr(x >= 0.5 * y, name=\"InvestmentRatio\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit value\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_investment()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A014",
  "description": "My grandma is required to take two medicines Z1 and D3 everyday. She needs to take at least 5 grams of Z1 and 10 grams of D3 everyday. These medicines are available in two pills named Zodiac and Sunny. One pill of Zodiac contains 1.3 grams of Z1 while one pill of Sunny contains 1.2 grams of Z1. On the other hand, one pill of Zodiac contains 1.5 grams of D3 and one pill of Sunny contains 5 grams of D3. The cost per pill of Zodiac is $1 and the cost per pill of Sunny is $3. Formulate a LP such that the medicine requirement can be fulfilled at the lowest cost.",
  "ground_truth": 7.0,
  "formulation": null,
  "correct_program": "def optimize_medicine_purchase():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MedicineOptimization\")\n\n    # Decision variables: number of pills to buy\n    x_z = m.addVar(name=\"Zodiac\", lb=0, vtype=GRB.INTEGER)\n    x_s = m.addVar(name=\"Sunny\", lb=0, vtype=GRB.INTEGER)\n\n    # Set objective: minimize total cost\n    m.setObjective(x_z + 3 * x_s, GRB.MINIMIZE)\n\n    # Add constraints\n    # Z1 requirement\n    m.addConstr(1.3 * x_z + 1.2 * x_s >= 5, name=\"Z1_requirement\")\n    # D3 requirement\n    m.addConstr(1.5 * x_z + 5 * x_s >= 10, name=\"D3_requirement\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n\nprint(optimize_medicine_purchase())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A015",
  "description": "A hobbyist makes model trains and planes using wood and paint. A model train requires 3 units of wood and 3 units of paint. A model plane requires 4 units of wood and 2 units of paint. The hobbyist has available 120 units of wood and 90 units of paint. If the profit per model train is $8 and the profit per model plane is $10, how many of each should be made to maximize his profit?",
  "ground_truth": 310.0,
  "formulation": null,
  "correct_program": "def optimize_model_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Model_Production\")\n\n    # Decision variables: number of trains and planes (integer, >= 0)\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Trains\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Planes\")\n\n    # Set the objective: maximize profit\n    m.setObjective(8 * x + 10 * y, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    m.addConstr(3 * x + 4 * y <= 120, name=\"Wood\")\n    m.addConstr(3 * x + 2 * y <= 90, name=\"Paint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_model_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A016",
  "description": "An electronics store wants to optimize how many phones and laptops are enough to keep in inventory. A phone will earn the store $120 in profits, and a laptop will earn $40. A phone requires 1 sq ft of floor space, whereas a laptop requires 4 sq ft. In total, 400 sq ft of floor space is available. The store stocks only phones and laptops. Corporate has required that at least 80% of all appliances in stock be laptops. Finally, a phone costs $400 for the store, and a laptop, $100. The store wants to spend at most $6000. Formulate an LP that can be used to maximize the store's profit.",
  "ground_truth": 2400.0,
  "formulation": null,
  "correct_program": "def optimize_inventory(\n    max_floor_space=400,\n    profit_phone=120,\n    profit_laptop=40,\n    space_phone=1,\n    space_laptop=4,\n    max_budget=6000,\n    cost_phone=400,\n    cost_laptop=100,\n    min_laptop_ratio=0.8\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"InventoryOptimization\")\n\n    # Decision variables: number of phones and laptops\n    x = model.addVar(name=\"phones\", vtype=GRB.INTEGER, lb=0)\n    y = model.addVar(name=\"laptops\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: maximize profit\n    model.setObjective(profit_phone * x + profit_laptop * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Floor space constraint\n    model.addConstr(space_phone * x + space_laptop * y <= max_floor_space, \"FloorSpace\")\n    # Stock composition constraint: y >= 4x (80% laptops)\n    model.addConstr(y >= min_laptop_ratio * (x + y), \"LaptopRatio\")\n    # Budget constraint\n    model.addConstr(cost_phone * x + cost_laptop * y <= max_budget, \"Budget\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_inventory()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A017",
  "description": "A candy store mixes regular candy and sour candy to prepare two products, regular mix and sour surprise mix. Each kilogram of the regular mix contains 0.8 kg of regular candy and 0.2 kg of sour candy. The profit per kilogram of the regular mix is $3. Each kilogram of the sour surprise mix contains 0.1 kg of regular candy and 0.9 kg of sour candy. The profit per kilogram of the sour surprise mix is $5. The candy store has 80 kg of regular candy and 60 kg of sour candy available. How many kilograms of each type of candy mix should be created to maximize profits?",
  "ground_truth": 511.4285714285714,
  "formulation": null,
  "correct_program": "def optimize_candy_mixes(\n    regular_candy_available=80,\n    sour_candy_available=60,\n    profit_regular_mix=3,\n    profit_sour_surprise=5\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Candy_Mix_Optimization\")\n\n    # Decision variables: amount of each mix to produce\n    x = model.addVar(name=\"Regular_Mix\", lb=0)\n    y = model.addVar(name=\"Sour_Surprise_Mix\", lb=0)\n\n    # Set objective: maximize profit\n    model.setObjective(profit_regular_mix * x + profit_sour_surprise * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Regular candy constraint\n    model.addConstr(0.8 * x + 0.1 * y <= regular_candy_available, name=\"Regular_Candy_Constraint\")\n    # Sour candy constraint\n    model.addConstr(0.2 * x + 0.9 * y <= sour_candy_available, name=\"Sour_Candy_Constraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal profit value\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_candy_mixes()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A018",
  "description": "A suspicious factory has 100 sq. feet of space. It makes bootleg phones and laptops. Phones require 2 hours of labor and cost $12 for each sq. foot of space allocated for phone production (cost of electricity and equipment). Laptops require 3 hours of labor and cost $15 for each sq. foot of space allocated for laptop production. Phones produce a net revenue of $50 per sq. foot while laptops produce a net revenue of $70 per sq. foot. The factory wants to spend at most $5000 and 2000 hours of labor. What is the optimal factory layout to maximize revenue?",
  "ground_truth": 7000.0,
  "formulation": null,
  "correct_program": "def optimize_factory_layout(space_limit=100, max_cost=5000, max_labor=2000):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Factory_Layout_Maximize_Revenue\")\n\n    # Decision variables: space allocated to phones and laptops\n    x = model.addVar(name=\"Phones_Space\", lb=0)\n    y = model.addVar(name=\"Laptops_Space\", lb=0)\n\n    # Set the objective: maximize total revenue\n    model.setObjective(50 * x + 70 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Space constraint\n    model.addConstr(x + y <= space_limit, name=\"SpaceLimit\")\n    # Cost constraint\n    model.addConstr(12 * x + 15 * y <= max_cost, name=\"CostLimit\")\n    # Labor constraint\n    model.addConstr(2 * x + 3 * y <= max_labor, name=\"LaborLimit\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal revenue\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_revenue = optimize_factory_layout()\n    if max_revenue is not None:\n        print(f\"Maximum Revenue: {max_revenue}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A019",
  "description": "A electronics store sells premium desktops with more power as well as regular desktops for everyday use. Each premium desktop costs the store $2000 to make and yields a profit of $500. Each regular desktop costs the store $1000 to make and yields a profit of $300. The store sells at most 200 desktops each month and wants to spend at most $300000 on making the desktops. How many of each should be made and sold to maximize profit?",
  "ground_truth": 80000.0,
  "formulation": null,
  "correct_program": "def optimize_desktops(sales_limit=200, budget_limit=300000, premium_cost=2000, regular_cost=1000,\n                      premium_profit=500, regular_profit=300):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Desktop_Production_Optimization\")\n\n    # Decision variables: number of premium and regular desktops\n    x = model.addVar(vtype=GRB.INTEGER, name=\"Premium_Desktops\", lb=0)\n    y = model.addVar(vtype=GRB.INTEGER, name=\"Regular_Desktops\", lb=0)\n\n    # Set objective: maximize profit\n    model.setObjective(premium_profit * x + regular_profit * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    model.addConstr(x + y <= sales_limit, \"Sales_Limit\")\n    model.addConstr(premium_cost * x + regular_cost * y <= budget_limit, \"Budget_Limit\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_desktops()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A020",
  "description": "A car manufacturer makes two versions of the same car, a regular model and a premium model. They make x1 regular models per day and x2 premium models per day. The profit per regular model is $5000 and the profit per premium model is $8500 (x1 and x2 are unknown values both greater than or equal to 0). The daily demand for these cars is limited to and most 8 regular models and 6 premium models. In addition, the manufacturer can make a maximum of 12 cars of either type per day. How many cars of each model should the manufacturer make in order to maximize profit?",
  "ground_truth": 81000.0,
  "formulation": null,
  "correct_program": "def optimize_car_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Car_Production_Maximize_Profit\")\n\n    # Decision variables: number of regular and premium cars\n    # Assuming production quantities are continuous; set vtype=GRB.CONTINUOUS\n    x1 = m.addVar(name=\"Regular\", vtype=GRB.CONTINUOUS, lb=0)\n    x2 = m.addVar(name=\"Premium\", vtype=GRB.CONTINUOUS, lb=0)\n\n    # Set the objective: maximize profit\n    profit_regular = 5000\n    profit_premium = 8500\n    m.setObjective(profit_regular * x1 + profit_premium * x2, GRB.MAXIMIZE)\n\n    # Add demand constraints\n    m.addConstr(x1 <= 8, name=\"Demand_Regular\")\n    m.addConstr(x2 <= 6, name=\"Demand_Premium\")\n\n    # Add production capacity constraint\n    m.addConstr(x1 + x2 <= 12, name=\"Total_Capacity\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum profit value\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_car_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A021",
  "description": "You are designing an office space with two types of desks: long desks and short desks. You can spend at most $2000. Long desks cost $300, take up 10 square feet of space, and seat 6 employees. Short desks cost $100, take up 4 square feet of space, and seat 2 employees. The office can have at most 200 square feet of desks. How many of each desk should you buy in order to maximize the seating availability?",
  "ground_truth": 40.0,
  "formulation": null,
  "correct_program": "def optimize_office_desks(budget=2000, space_limit=200, long_desk_cost=300, short_desk_cost=100,\n                          long_desk_space=10, short_desk_space=4, long_desk_seats=6, short_desk_seats=2):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Office_Desks_Optimization\")\n    \n    # Decision variables: number of long and short desks\n    x = m.addVar(vtype=GRB.INTEGER, name=\"LongDesks\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"ShortDesks\", lb=0)\n    \n    # Set the objective: maximize total seating\n    m.setObjective(long_desk_seats * x + short_desk_seats * y, GRB.MAXIMIZE)\n    \n    # Add budget constraint\n    m.addConstr(long_desk_cost * x + short_desk_cost * y <= budget, \"BudgetConstraint\")\n    \n    # Add space constraint\n    m.addConstr(long_desk_space * x + short_desk_space * y <= space_limit, \"SpaceConstraint\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum seating capacity\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_seating = optimize_office_desks()\n    if max_seating is not None:\n        print(f\"Maximum Seating Capacity: {max_seating}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A022",
  "description": "Ayse produces a plant growth compound by mixing two types of fertilizer: C and Y. This growth compound must contain at least 5 units of nitrous oxide and 8 units of vitamin mix. Fertilizer C and Y cost $2 and $3 per kg respectively. Fertilizer C contains 1.5 units of nitrous oxide per kg and 3 units of vitamin mix per kg. Fertilizer Y contains 5 units of nitrous oxide per kg and 1 unit of vitamin mix per kg. Determine the minimum cost of Ayse's compound.",
  "ground_truth": 5.851851851851852,
  "formulation": null,
  "correct_program": "def optimize_fertilizer_cost():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Fertilizer_Optimization\")\n\n    # Decision variables: amount of fertilizers C and Y\n    x = m.addVar(name=\"C\", lb=0)  # fertilizer C in kg\n    y = m.addVar(name=\"Y\", lb=0)  # fertilizer Y in kg\n\n    # Set the objective: minimize total cost\n    m.setObjective(2 * x + 3 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    m.addConstr(1.5 * x + 5 * y >= 5, name=\"NitrousOxide\")\n    m.addConstr(3 * x + y >= 8, name=\"VitaminMix\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_fertilizer_cost()\n    if min_cost is not None:\n        print(f\"Minimum Cost of Fertilizer Mixture: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A023",
  "description": "Sleep inducing medicine and anti-inflammatory medicine is found in two pills, pill A and pill B. One pill A contains 3 units of sleep inducing medicine and 5 units of anti-inflammatory medicine. One pill B contains 6 units of sleep-inducing medicine and 1 unit of anti-inflammatory medicine. The cost per pill for pill A is $4 and the cost per pill for pill B is $5. A patient must consume these two pills to get at least 40 units of sleep-inducing medicine and 50 units of anti-inflammatory medicine. Formulate a LP to minimize the cost for the patient.",
  "ground_truth": 50.0,
  "formulation": null,
  "correct_program": "def optimize_pills():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Pill_Optimization\")\n\n    # Decision variables: number of pills A and B\n    x_A = m.addVar(name=\"x_A\", lb=0, vtype=GRB.INTEGER)\n    x_B = m.addVar(name=\"x_B\", lb=0, vtype=GRB.INTEGER)\n\n    # Set the objective: minimize total cost\n    m.setObjective(4 * x_A + 5 * x_B, GRB.MINIMIZE)\n\n    # Add constraints\n    m.addConstr(3 * x_A + 6 * x_B >= 40, name=\"SleepRequirement\")\n    m.addConstr(5 * x_A + 1 * x_B >= 50, name=\"AntiInflammatoryRequirement\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal objective value\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_pills()\n    if min_cost is not None:\n        print(f\"Minimum Cost of Pills: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A024",
  "description": "A car manufacturer makes two types of car oils: Oil Max and Oil Max Pro. A container of Oil Max contains 46 grams of substance A, 43 grams of substance B and 56 grams of substance C. A container of Oil Max Pro contains 13 grams of substance A, 4 grams of substance B and 45 grams of substance C. The car manufacturer has 1345 grams of substance A, 346 grams of substance B, 1643 grams of substance C. In addition, the profit per container of Oil Max is $10 and the profit per container of Oil Max Pro is $15. How many containers of each of oil should the car manufacturer make to maximize profit?",
  "ground_truth": 540.0,
  "formulation": null,
  "correct_program": "def optimize_car_oil_production(\n    max_A=1345, max_B=346, max_C=1643,\n    profit_max=10, profit_pro=15,\n    content_A_max=(46, 13), content_B_max=(43, 4), content_C_max=(56, 45)\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"OilProductionMaximizeProfit\")\n\n    # Decision variables: number of containers for each oil type\n    x = model.addVar(vtype=GRB.INTEGER, name=\"OilMax\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"OilMaxPro\")\n\n    # Set objective: maximize profit\n    model.setObjective(profit_max * x + profit_pro * y, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    model.addConstr(content_A_max[0] * x + content_A_max[1] * y <= max_A, \"ResourceA\")\n    model.addConstr(content_B_max[0] * x + content_B_max[1] * y <= max_B, \"ResourceB\")\n    model.addConstr(content_C_max[0] * x + content_C_max[1] * y <= max_C, \"ResourceC\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_car_oil_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A025",
  "description": "A food truck owner can spend at most $20000 on mangos and guavas. A mango costs the food truck owner $5 and a guava costs him $3. Spices are added and each mango is sold for a profit of $3 while each guava is sold for a profit of $4. The owner estimates that at least 100 mangos but at the most 150 are sold each month. He also estimates that the number of guavas sold is at most a third of the mangos sold. How many mangos and guavas should be sold in order to maximize the profit?",
  "ground_truth": 650.0,
  "formulation": null,
  "correct_program": "def optimize_food_truck_profit(\n    max_budget=20000,\n    min_mangos=100,\n    max_mangos=150,\n    mango_cost=5,\n    guava_cost=3,\n    mango_profit=3,\n    guava_profit=4\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"FoodTruckOptimization\")\n\n    # Decision variables\n    x = model.addVar(vtype=GRB.INTEGER, lb=min_mangos, ub=max_mangos, name=\"mangos\")\n    y = model.addVar(vtype=GRB.INTEGER, lb=0, name=\"guavas\")\n\n    # Set objective: maximize profit\n    model.setObjective(mango_profit * x + guava_profit * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Budget constraint\n    model.addConstr(mango_cost * x + guava_cost * y <= max_budget, \"budget\")\n    # Guava sales relative to mangos\n    model.addConstr(y <= (1/3) * x, \"guava_mango_ratio\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_food_truck_profit()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A026",
  "description": "Mark has 50 acres of land available to grow potatoes and cucumbers that he sells at a farmers' market. He must grow at least 12 acres of potatoes and 15 acres of cucumbers to meet his contract. Mark prefers to grow more cucumbers than potatoes, but he only has enough resources to grow at most twice the amount of cucumbers as potatoes. If the profit per acre of potatoes is $500 and the profit per acre of cucumbers is $650, how many acres of each should he grow to maximize his profit? What is that profit?",
  "ground_truth": 30000.0,
  "formulation": null,
  "correct_program": "def optimize_crops():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Crop_Optimization\")\n\n    # Decision variables\n    # Acres of potatoes\n    x = m.addVar(name=\"Potatoes\", lb=0)\n    # Acres of cucumbers\n    y = m.addVar(name=\"Cucumbers\", lb=0)\n\n    # Set the objective: maximize profit\n    profit = 500 * x + 650 * y\n    m.setObjective(profit, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(x + y <= 50, name=\"Total_land\")\n    m.addConstr(x >= 12, name=\"Min_potatoes\")\n    m.addConstr(y >= 15, name=\"Min_cucumbers\")\n    m.addConstr(y <= 2 * x, name=\"Cucumber_limit\")\n    m.addConstr(y >= x, name=\"Preference_cucumbers_more_or_equal_potatoes\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage \nif __name__ == \"__main__\":\n    max_profit = optimize_crops()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A027",
  "description": "A flooring company produces engineered hardwood and vinyl planks. Their sales forecasts show an expected demand of at least 20,000 square foot of hardwood and 10,000 square feet of vinyl planks each week. To satisfy a shipping contract, a total of at least 60,000 square feet of flooring much be shipped each week. Due to a labor shortage issue, no more than 50,000 square feet of hardwood and 30,000  square feet of vinyl  can be produced weekly. If a square foot of hardwood flooring yields a profit of $2.5 and a square foot of vinyl planks produces a $3 profit, how many of each type of flooring should be made weekly to maximize the company's profit?",
  "ground_truth": 215000.0,
  "formulation": null,
  "correct_program": "def optimize_flooring_production(\n    demand_hardwood=20000,\n    demand_vinyl=10000,\n    total_shipment=60000,\n    max_hardwood=50000,\n    max_vinyl=30000,\n    profit_hardwood=2.5,\n    profit_vinyl=3\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Flooring_Production_Optimization\")\n\n    # Decision variables\n    x = model.addVar(name=\"Hardwood\", lb=0, ub=max_hardwood)\n    y = model.addVar(name=\"Vinyl\", lb=0, ub=max_vinyl)\n\n    # Set the objective\n    model.setObjective(profit_hardwood * x + profit_vinyl * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    model.addConstr(x >= demand_hardwood, \"HardwoodDemand\")\n    model.addConstr(y >= demand_vinyl, \"VinylDemand\")\n    model.addConstr(x + y >= total_shipment, \"TotalShipment\")\n    # The upper bounds are already enforced by variable bounds, but can be explicitly added\n    # for clarity:\n    model.addConstr(x <= max_hardwood, \"HardwoodCap\")\n    model.addConstr(y <= max_vinyl, \"VinylCap\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal profit\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_flooring_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A028",
  "description": "A berry farmer has two farms, an old and new farm, where he grows raspberries, blueberries, and strawberries. He has a contract to provide a local store with 10 kg of raspberries, 9 kg of blueberries, and 15 kg of strawberries. At his old farm, it cost $300 to operate per day and he can harvest and deliver 2 kg of raspberries, 2 kg of blueberries, and 4 kg of strawberries in a day. At his new farm, it costs $200 to operate per day and he can harvest and deliver 4 kg of raspberries, 1 kg of blueberries, and 2 kg of strawberries in a day. Formulate a LP to meet his contract while minimizing his cost.",
  "ground_truth": 1366.6666666666667,
  "formulation": null,
  "correct_program": "import gurobipy as gp\nfrom gurobipy import GRB\n\n\ndef optimize_farm_operation(cost_old=300,\n                            cost_new=200,\n                            harvest_old={\n                                'raspberries': 2,\n                                'blueberries': 2,\n                                'strawberries': 4\n                            },\n                            harvest_new={\n                                'raspberries': 4,\n                                'blueberries': 1,\n                                'strawberries': 2\n                            },\n                            demand={\n                                'raspberries': 10,\n                                'blueberries': 9,\n                                'strawberries': 15\n                            },\n                            max_time=300):\n    # Create a new model\n    m = gp.Model(\"FarmOptimization\")\n    m.setParam('TimeLimit', max_time)\n\n    # Decision variables: number of days to operate each farm\n    x_old = m.addVar(name=\"x_old\", lb=0)\n    x_new = m.addVar(name=\"x_new\", lb=0)\n\n    # Set objective: minimize total cost\n    m.setObjective(cost_old * x_old + cost_new * x_new, GRB.MINIMIZE)\n\n    # Add constraints for each fruit\n    m.addConstr(harvest_old['raspberries'] * x_old +\n                harvest_new['raspberries'] * x_new >= demand['raspberries'],\n                name=\"Raspberries\")\n    m.addConstr(harvest_old['blueberries'] * x_old +\n                harvest_new['blueberries'] * x_new >= demand['blueberries'],\n                name=\"Blueberries\")\n    m.addConstr(harvest_old['strawberries'] * x_old +\n                harvest_new['strawberries'] * x_new >= demand['strawberries'],\n                name=\"Strawberries\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Return the optimal total cost if found\n    if m.status == GRB.OPTIMAL or m.status == GRB.TIME_LIMIT:\n        return m.objVal\n    else:\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_farm_operation()\n    if min_cost is not None:\n        print(f\"Minimum Cost of Farm Operation: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A029",
  "description": "Jordan is a chef. He wants to design a diet consisting of Kebabs and Rice.  Assume that each serving of Rice costs $3 and contains 300 calories and 4.5 grams of protein. Assume that each serving of Kebab costs $2 and contains 200 calories and 4 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2200 calories and at least 30 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.",
  "ground_truth": 22.0,
  "formulation": null,
  "correct_program": "def optimize_diet():\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Jordan_Diet_Optimization\")\n\n    # Decision variables: servings of Rice and Kebab\n    x = model.addVar(name=\"Rice\", lb=0)\n    y = model.addVar(name=\"Kebab\", lb=0)\n\n    # Set objective: minimize total cost\n    model.setObjective(3 * x + 2 * y, GRB.MINIMIZE)\n\n    # Add calorie constraint\n    model.addConstr(300 * x + 200 * y >= 2200, name=\"CalorieRequirement\")\n\n    # Add protein constraint\n    model.addConstr(4.5 * x + 4 * y >= 30, name=\"ProteinRequirement\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal cost\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_diet()\n    if min_cost is not None:\n        print(f\"Minimum Cost of Diet: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A030",
  "description": "A company sells custom scooters and bikes for customers. The profit per scooter is $200 and the profit per bike is $300. Each product requires time with the design team and engineering team. Each scooter needs 2 hours with the design team and 3 hours with the engineering team. Each bike needs 4 hours with the design team and 5 hours with the engineering team. Per month, there are 5000 hours available on the design team and 6000 hours available on the engineering team. How many of each should the company make per month to maximize profit?",
  "ground_truth": 400000.0,
  "formulation": null,
  "correct_program": "import gurobipy as gp\nfrom gurobipy import GRB\n\ndef optimize_production():\n    # Create a new model\n    model = gp.Model(\"ProductionOptimization\")\n\n    # Add decision variables\n    # The original model does not specify integrality, so use continuous variables (default)\n    x = model.addVar(name=\"Scooters\", lb=0)\n    y = model.addVar(name=\"Bikes\", lb=0)\n\n    # Set the objective function\n    model.setObjective(200 * x + 300 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    model.addConstr(2 * x + 4 * y <= 5000, name=\"Constraint1\")\n    model.addConstr(3 * x + 5 * y <= 6000, name=\"Constraint2\")\n\n    # Optimize the model\n    model.optimize()\n    return model.objVal if model.status == GRB.OPTIMAL else None\n\nprint(optimize_production())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A031",
  "description": "John has a 300 acre berry farm on which to plant blueberries and raspberries. John has $10000 to spend on watering and 575 days worth of labor available. For each acre of blueberries, 6 days worth of labor and $22 in watering costs is required. For each acre of raspberries, 3 days worth of labor and $25 in watering costs is required. The profit per acre of blueberries is $56 and the profit per acre of raspberries is $75. Formulate an LP problem in order to maximize profit.",
  "ground_truth": 14375.0,
  "formulation": null,
  "correct_program": "def optimize_berry_farm(\n    total_acres=300,\n    budget=10000,\n    labor_days=575,\n    profit_blueberry=56,\n    profit_raspberry=75,\n    watering_cost_blueberry=22,\n    watering_cost_raspberry=25,\n    labor_blueberry=6,\n    labor_raspberry=3\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"BerryFarmOptimization\")\n\n    # Decision variables: acres of blueberries and raspberries\n    x = model.addVar(name=\"Blueberries\", lb=0)\n    y = model.addVar(name=\"Raspberries\", lb=0)\n\n    # Set the objective: maximize profit\n    model.setObjective(profit_blueberry * x + profit_raspberry * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Land constraint\n    model.addConstr(x + y <= total_acres, name=\"Land\")\n    # Watering cost constraint\n    model.addConstr(watering_cost_blueberry * x + watering_cost_raspberry * y <= budget, name=\"Watering\")\n    # Labor constraint\n    model.addConstr(labor_blueberry * x + labor_raspberry * y <= labor_days, name=\"Labor\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_berry_farm()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A032",
  "description": "A man  only eats vegetable and fruits. A serving of vegetables contains 2 units of vitamins and 3 units of minerals. A serving of fruit contains 4 units of vitamins and 1 unit of minerals. He wants to eat at least 20 units of vitamins and 30 units of minerals. If vegetables cost $3 per serving and fruits cost $5 per serving, how many servings of each should he eat to minimize his cost?",
  "ground_truth": 30.0,
  "formulation": null,
  "correct_program": "def optimize_food_servings():\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"FoodOptimization\")\n\n    # Decision variables: servings of vegetables and fruits\n    x = model.addVar(name=\"vegetables\", lb=0)\n    y = model.addVar(name=\"fruits\", lb=0)\n\n    # Set the objective: minimize total cost\n    model.setObjective(3 * x + 5 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Vitamins constraint\n    model.addConstr(2 * x + 4 * y >= 20, name=\"Vitamins\")\n    # Minerals constraint\n    model.addConstr(3 * x + y >= 30, name=\"Minerals\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal cost\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_food_servings()\n    if min_cost is not None:\n        print(f\"Minimum Cost of Food Servings: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A033",
  "description": "A bakery bakes bagels and croissants. A batch of bagels can be made using 2 hours of oven time and 0.25 hours of pastry chef time. A batch of croissants is more complicated, so while they take 1 hour of oven time, they take 2 hours of pastry chef time. In a day, the bakery has at most 70 hours available for the oven and 32 pastry chef hours available. Using all the available capacity, what is the maximum profit the bakery can generate assuming the profit per batch is $20 and $40 respectively for a batch of bagels and a batch of croissants.",
  "ground_truth": 1072.0,
  "formulation": null,
  "correct_program": "def optimize_bakery_profit(oven_hours=70, pastry_hours=32,\n                           profit_bagels=20, profit_croissants=40,\n                           max_bagels=None, max_croissants=None):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"BakeryOptimization\")\n    \n    # Decision variables: number of batches of bagels and croissants\n    x = model.addVar(name=\"Bagels\")\n    y = model.addVar(name=\"Croissants\")\n    \n    # Set the objective: maximize profit\n    model.setObjective(profit_bagels * x + profit_croissants * y, GRB.MAXIMIZE)\n    \n    # Add oven time constraint\n    model.addConstr(2 * x + y <= oven_hours, \"OvenTime\")\n    \n    # Add pastry chef time constraint\n    model.addConstr(0.25 * x + 2 * y <= pastry_hours, \"PastryTime\")\n    \n    # Optional: add upper bounds if specified\n    if max_bagels is not None:\n        model.addConstr(x <= max_bagels, \"MaxBagels\")\n    if max_croissants is not None:\n        model.addConstr(y <= max_croissants, \"MaxCroissants\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_bakery_profit()\n    if max_profit is not None:\n        print(f\"Maximum profit from bakery operations: ${max_profit:.2f}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A034",
  "description": "A teddy bear company produces three different colored bears: black, white, and brown. These bears are made in two different factories. Running factory 1 for 1 hour costs $300 and produces 5 black teddy bears, 6 white teddy bears, and 3 brown ones. Running factory 2 for 1 hour costs $600 and produces 10 black teddy bears and 10 white teddy bears. (but no brown ones). To meet children's demand, at least 20 black teddy bears, 5 white teddy bears, and 15 brown teddy bears must be made daily. Given this information, develop a linear programming problem assuming the teddy bear company wants to minimize the cost of production.",
  "ground_truth": 1500.0,
  "formulation": null,
  "correct_program": "def optimize_teddy_bears():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"TeddyBearProduction\")\n\n    # Decision variables: hours factory 1 and factory 2\n    x1 = m.addVar(name=\"Factory1_hours\", lb=0)\n    x2 = m.addVar(name=\"Factory2_hours\", lb=0)\n\n    # Set the objective: minimize total cost\n    m.setObjective(300 * x1 + 600 * x2, GRB.MINIMIZE)\n\n    # Add constraints based on demand\n    m.addConstr(5 * x1 + 10 * x2 >= 20, name=\"BlackDemand\")\n    m.addConstr(6 * x1 + 10 * x2 >= 5, name=\"WhiteDemand\")\n    m.addConstr(3 * x1 >= 15, name=\"BrownDemand\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_teddy_bears()\n    if min_cost is not None:\n        print(f\"Minimum Cost of Teddy Bear Production: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A035",
  "description": "A farmer has 500 acres of land to grow turnips and pumpkins. Turnips require 50 minutes of watering and $80 worth of pesticide per acre. Pumpkins require 90 minutes of watering and $50 worth of pesticide per acre. The farmer has 40000 minutes available for watering and $34000 available to spend on pesticide. If the revenue per acre of turnips is $300 and the revenue per acre of pumpkins is $450, how many acres of each should he grow to maximize his revenue.",
  "ground_truth": 206250.0,
  "formulation": null,
  "correct_program": "def optimize_crop_allocation(\n    total_land=500,\n    total_water_minutes=40000,\n    total_pesticide_budget=34000,\n    revenue_turnips=300,\n    revenue_pumpkins=450,\n    watering_time_turnips=50,\n    watering_time_pumpkins=90,\n    pesticide_cost_turnips=80,\n    pesticide_cost_pumpkins=50\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"FarmerCropOptimization\")\n\n    # Decision variables: acres of turnips and pumpkins\n    x_T = model.addVar(name=\"Turnips\", lb=0)\n    x_P = model.addVar(name=\"Pumpkins\", lb=0)\n\n    # Set the objective: maximize total revenue\n    model.setObjective(\n        revenue_turnips * x_T + revenue_pumpkins * x_P,\n        GRB.MAXIMIZE\n    )\n\n    # Add constraints\n    # Land constraint\n    model.addConstr(x_T + x_P <= total_land, name=\"LandLimit\")\n    # Watering time constraint\n    model.addConstr(\n        watering_time_turnips * x_T + watering_time_pumpkins * x_P <= total_water_minutes,\n        name=\"WateringTimeLimit\"\n    )\n    # Pesticide budget constraint\n    model.addConstr(\n        pesticide_cost_turnips * x_T + pesticide_cost_pumpkins * x_P <= total_pesticide_budget,\n        name=\"PesticideBudgetLimit\"\n    )\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal revenue\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_revenue = optimize_crop_allocation()\n    if max_revenue is not None:\n        print(f\"Maximum Revenue: {max_revenue}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A036",
  "description": "A gem factory has two drills, a high intensity one and a low intensity one. Each day, the high intensity drill can process 50 gems and requires 50 units of water to dissipate heat. Each day, the low intensity drill can process 30 gems and requires 20 units of water to dissipate heat. Each day the factory must process 800 gems and they have available 700 units of water. Since the high intensity drill produces a lot of noise pollution, at most 40% of the drills can be high intensity ones. Further, at least 10 should be low intensity drills. How many of each drill should be used to minimize the total number of drills needed?",
  "ground_truth": 22.0,
  "formulation": null,
  "correct_program": "def optimize_drills():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"GemFactoryDrills\")\n\n    # Decision variables: number of high and low intensity drills\n    x = m.addVar(vtype=GRB.INTEGER, name=\"HighIntensityDrills\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"LowIntensityDrills\", lb=0)\n\n    # Set the objective: minimize total number of drills\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Gem processing capacity\n    m.addConstr(50 * x + 30 * y >= 800, \"GemProcessing\")\n    # Water availability\n    m.addConstr(50 * x + 20 * y <= 700, \"WaterLimit\")\n    # High intensity drill proportion limit\n    m.addConstr(3 * x - 2 * y <= 0, \"HighIntensityLimit\")\n    # Minimum low intensity drills\n    m.addConstr(y >= 10, \"MinLowDrills\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of drills\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_drills = optimize_drills()\n    if min_drills is not None:\n        print(f\"Minimum Total Number of Drills: {min_drills}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A037",
  "description": "A sandwich company can open two types of stores, a dine-in place and a food-truck. A dine-in place can make 100 sandwiches per day and requires 8 employees to operate. A food-truck can make 50 sandwiches per day and requires 3 employees to operate. The company must make at least 500 sandwiches per day but they only have available 35 employees. How many of each type of store should the company open to minimize the total number of stores?",
  "ground_truth": 8.0,
  "formulation": null,
  "correct_program": "def optimize_stores():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Minimize_Stores\")\n\n    # Decision variables: number of dine-in stores and food-trucks\n    x = m.addVar(vtype=GRB.INTEGER, name=\"dine_in\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"food_truck\")\n\n    # Set the objective: minimize total number of stores\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Sandwich production constraint\n    m.addConstr(100 * x + 50 * y >= 500, \"sandwich_requirement\")\n    # Employee constraint\n    m.addConstr(8 * x + 3 * y <= 35, \"employee_limit\")\n    # Non-negativity constraints are implicit in variable definitions\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of stores\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_stores = optimize_stores()\n    if min_stores is not None:\n        print(f\"Minimum Number of Stores: {min_stores}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A038",
  "description": "There are two processes, process A and process B, to plate a coin with gold. Process A requires 3 units of gold, 2 wires, and can plate 5 coins. Process B requires 5 units of gold, 3 wires, and can plate 7 coins. There are 500 units of gold and 300 wires available. How many processes of each type should be run to maximize the total number of coins that can be plated?",
  "ground_truth": 750.0,
  "formulation": null,
  "correct_program": "def optimize_coins(gold_available=500, wires_available=300):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Coin_Plation_Optimization\")\n\n    # Decision variables: number of processes A and B\n    x_A = model.addVar(vtype=GRB.INTEGER, name=\"Process_A\")\n    x_B = model.addVar(vtype=GRB.INTEGER, name=\"Process_B\")\n\n    # Set the objective: maximize total coins\n    model.setObjective(5 * x_A + 7 * x_B, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    model.addConstr(3 * x_A + 5 * x_B <= gold_available, \"GoldConstraint\")\n    model.addConstr(2 * x_A + 3 * x_B <= wires_available, \"WiresConstraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum total number of coins\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_coins = optimize_coins()\n    if max_coins is not None:\n        print(f\"Maximum Total Coins: {max_coins}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A039",
  "description": "A woodshop can purchase two types of saws, a miter saw and a circular saw. A miter saw can cut 50 planks of wood and produces 60 units of sawdust per day. A circular saw can cut 70 planks of wood and produces 100 units of sawdust per day. The woodshop must cut at least 1500 planks of wood per day. However, to avoid too much pollution in the woodshop they can produce at most 2000 units of sawdust per day. How many of each type of saw should be purchased to minimize the total number of saws needed?",
  "ground_truth": 26.0,
  "formulation": null,
  "correct_program": "def optimize_saws():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"woodshop_saws\")\n\n    # Decision variables: number of each saw type\n    x = m.addVar(vtype=GRB.INTEGER, name=\"miter_saws\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"circular_saws\", lb=0)\n\n    # Set the objective: minimize total number of saws\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Wood cutting constraint\n    m.addConstr(50 * x + 70 * y >= 1500, name=\"wood_cutting\")\n    # Sawdust production constraint\n    m.addConstr(60 * x + 100 * y <= 2000, name=\"sawdust_limit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of saws\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_saws = optimize_saws()\n    if min_saws is not None:\n        print(f\"Minimum Total Number of Saws: {min_saws}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A040",
  "description": "A farmer has 200 acres of land on which he must process hay using either a windrower or hay harvester. For each acre of land, the windrower can process 10 kg of hay while the hay harvester can process 8 kg of hay. Per acre, the windrower produces 5 kg of methane gas and requires 2 kg of fuel. On the other hand, the hay harvester produces 3 kg of methane gas per acre and requires 1 kg of fuel. There are 300 kg of fuel available and the farmer can produce at most 800 kg of methane gas. For how many acres should each machine be used to maximize the amount of hay processed?",
  "ground_truth": 1800.0,
  "formulation": null,
  "correct_program": "def optimize_hay_processing():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"HayProcessing\")\n\n    # Decision variables: acres assigned to windrower (x) and harvester (y)\n    x = m.addVar(name=\"windrower_acres\", lb=0)\n    y = m.addVar(name=\"harvester_acres\", lb=0)\n\n    # Set the objective: maximize total hay processed\n    m.setObjective(10 * x + 8 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(x + y <= 200, name=\"land_constraint\")\n    m.addConstr(2 * x + y <= 300, name=\"fuel_constraint\")\n    m.addConstr(5 * x + 3 * y <= 800, name=\"methane_constraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum hay processed\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_hay_processed = optimize_hay_processing()\n    if max_hay_processed is not None:\n        print(f\"Maximum Hay Processed: {max_hay_processed}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A041",
  "description": "A new fast food place makes wraps and platters. Each wrap requires 5 units of meat and 3 units of rice. Each platter requires 7 units of meant and 5 units of rice. While each wrap takes 10 minutes to make, each platter takes 8 minutes to make. The fast food place must use at least 3000 units of meat and 2500 units of rice. Since wraps are easier to eat on the go, at least 3 times as many wraps need to be made as platter. How many of each should the fast food place make to minimize the total production time?",
  "ground_truth": 6794.0,
  "formulation": null,
  "correct_program": "def optimize_wraps_and_platters():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"FastFoodProduction\")\n\n    # Decision variables: number of wraps (x) and platters (y)\n    x = m.addVar(vtype=GRB.INTEGER, name=\"wraps\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"platters\", lb=0)\n\n    # Set objective: minimize total production time\n    m.setObjective(10 * x + 8 * y, GRB.MINIMIZE)\n\n    # Add resource constraints\n    m.addConstr(5 * x + 7 * y >= 3000, name=\"meat_constraint\")\n    m.addConstr(3 * x + 5 * y >= 2500, name=\"rice_constraint\")\n\n    # Add production ratio constraint\n    m.addConstr(x - 3 * y >= 0, name=\"wraps_vs_platters\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total production time\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_wraps_and_platters()\n    if min_time is not None:\n        print(f\"Minimum Total Production Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A042",
  "description": "An amusement park is installing ticket machines, both cash-based and card-only machines. A cash-based machine can process 20 people per hour while a card-only machine can process 30 people per hour. The cash-based machine needs 4 rolls of paper per hour while the card-only machine requires 5 rolls of paper per hour. The amusement park needs to be able to process at least 500 people per hour but can use at most 90 rolls of paper per hour. Since most people prefer to pay by cash, the number of card-only machines must not exceed the number of cash-based machines. How many of each machine should be bought to minimize the total number of machines in the park?",
  "ground_truth": 20.0,
  "formulation": null,
  "correct_program": "def optimize_amusement_park_machines():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"AmusementParkMachines\")\n\n    # Decision variables: number of each machine type\n    x = m.addVar(vtype=GRB.INTEGER, name=\"cash_machines\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"card_machines\", lb=0)\n\n    # Set the objective: minimize total number of machines\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Processing capacity constraint\n    m.addConstr(20 * x + 30 * y >= 500, name=\"capacity\")\n    # Paper roll usage constraint\n    m.addConstr(4 * x + 5 * y <= 90, name=\"paper\")\n    # Preference constraint\n    m.addConstr(y <= x, name=\"preference\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal total number of machines\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_machines = optimize_amusement_park_machines()\n    if min_machines is not None:\n        print(f\"Minimum Total Number of Machines: {min_machines}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A043",
  "description": "A honey farmer sells his honey in glass and plastic jars. A glass jar can hold 250 ml of honey while a plastic jar can hold 300 ml of honey. Since glass jars are more expensive, at least twice as many plastic jars must be filled as glass jars. However, at least 20 glass jars should be filled. If the farmer has 20000 ml of honey, how many jars of each should be filled to maximize the total number of bottles filled?",
  "ground_truth": 70.0,
  "formulation": null,
  "correct_program": "def optimize_honey_jars():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"HoneyJarsMaximize\")\n\n    # Decision variables\n    G = m.addVar(name=\"GlassJars\", vtype=GRB.INTEGER, lb=20)  # at least 20 glass jars\n    P = m.addVar(name=\"PlasticJars\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: maximize total number of jars\n    m.setObjective(G + P, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Honey volume constraint\n    m.addConstr(250 * G + 300 * P <= 20000, name=\"HoneyVolume\")\n    # Relationship constraint\n    m.addConstr(P >= 2 * G, name=\"PlasticAtLeastTwiceGlass\")\n    # Non-negativity is enforced by lb=0 for P and lb=20 for G\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum total number of jars filled\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_jars = optimize_honey_jars()\n    if max_jars is not None:\n        print(f\"Maximum Total Jars Filled: {max_jars}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A044",
  "description": "A bubble tea shop sells mango and lychee bubble tea. Each mango bubble tea requires 4 units of mango juice and 8 units of tea. Each lychee bubble tea requires 6 units of lychee juice and 6 units of tea. The shop has available 2000 units of mango juice and 3000 units of lychee juice. At least 40% of the bubble teas made must be lychee flavored. However, mango bubble tea sells better and thus the number of mango bubble teas made must be large than the number of lychee bubble teas made. How many of each bubble tea flavor should be made to minimize the total amount of tea needed?",
  "ground_truth": 36.0,
  "formulation": null,
  "correct_program": "def optimize_bubble_tea(minimize_tea=True):\n    from gurobipy import Model, GRB, quicksum\n\n    # Create a new model\n    model = Model(\"BubbleTeaOptimization\")\n    model.setParam('OutputFlag', 0)  # Suppress Gurobi output\n\n    # Decision variables: number of mango and lychee bubble teas\n    x_m = model.addVar(vtype=GRB.INTEGER, name='x_m', lb=0)\n    x_l = model.addVar(vtype=GRB.INTEGER, name='x_l', lb=0)\n\n    # Add constraints\n    # Juice constraints\n    model.addConstr(4 * x_m <= 2000, name='mango_juice')\n    model.addConstr(6 * x_l <= 3000, name='lychee_juice')\n    # Total tea constraint\n    model.addConstr(8 * x_m + 6 * x_l <= 3000, name='total_tea')\n    # Lychee proportion constraint\n    model.addConstr(3 * x_l >= 2 * x_m, name='lychee_ratio')\n    # Mango more than lychee\n    model.addConstr(x_m >= x_l + 1, name='mango_more_than_lychee')\n\n    # Objective: minimize total tea\n    model.setObjective(8 * x_m + 6 * x_l, GRB.MINIMIZE)\n\n    # Optimize\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        total_tea = model.objVal\n        return total_tea\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_tea = optimize_bubble_tea()\n    if min_tea is not None:\n        print(f\"Minimum Total Tea: {min_tea}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A045",
  "description": "A city employs seasonal and permanent snow removers. A seasonal snow remover works 6 hours per shift and gets paid $120. A permanent snow remover works 10 hours per shift and gets paid $250. Currently the city needs 300 hours of snow remover labor after a heavy snowfall. If the city has a budget of $6500, how many of each type of worker should be hired to minimize the total number of snow removers?",
  "ground_truth": 44.0,
  "formulation": null,
  "correct_program": "def optimize_snow_removers():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"SnowRemovers\")\n\n    # Decision variables: number of seasonal and permanent workers\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Seasonal\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Permanent\")\n\n    # Set the objective: minimize total number of workers\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Labor hours constraint\n    m.addConstr(6 * x + 10 * y >= 300, name=\"LaborHours\")\n    # Budget constraint\n    m.addConstr(120 * x + 250 * y <= 6500, name=\"Budget\")\n    # Non-negativity constraints are implicit for integer variables in Gurobi\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of workers\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_workers = optimize_snow_removers()\n    if min_workers is not None:\n        print(f\"Minimum Total Number of Workers: {min_workers}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A046",
  "description": "A cell phone company is building rural and urban factories. A rural factory can make 100 phones per day and requires 8 managers. An urban factory can make 200 phones per day and requires 20 managers. The company has available 260 managers and must make at least 3000 phones per day. How many of each factory type should be built to minimize the total number of factories?",
  "ground_truth": 25.0,
  "formulation": null,
  "correct_program": "def optimize_factory_selection(\n    min_phones=3000,\n    max_managers=260,\n    rural_phones=100,\n    urban_phones=200,\n    rural_managers=8,\n    urban_managers=20\n):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Factory_Optimization\")\n    m.setParam('OutputFlag', 0)  # Suppress Gurobi output\n\n    # Decision variables: number of rural and urban factories\n    R = m.addVar(vtype=GRB.INTEGER, name=\"Rural_Factories\", lb=0)\n    U = m.addVar(vtype=GRB.INTEGER, name=\"Urban_Factories\", lb=0)\n\n    # Set the objective: minimize total number of factories\n    m.setObjective(R + U, GRB.MINIMIZE)\n\n    # Add production constraint\n    m.addConstr(rural_phones * R + urban_phones * U >= min_phones, \"Production_Constraint\")\n\n    # Add manager constraint\n    m.addConstr(rural_managers * R + urban_managers * U <= max_managers, \"Manager_Constraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_factories = optimize_factory_selection()\n    if min_factories is not None:\n        print(f\"Minimum Total Number of Factories: {min_factories}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A047",
  "description": "An ice cream store can buy two machines, a counter-top sized one and a fridge sized one, to make ice cream. The counter-top sized one can produce 80 cones worth of ice cream every day while the fridge sizes one can produce 150 cones worth of ice cream every day. The counter-top sized machine outputs 50 units of heat while the fridge sized one outputs 70 units of heat. The ice cream store can output at most 500 units of heat per day and must produce at least 1000 cones worth of ice cream. How many of each machine should they buy to minimize the total number of machines needed?",
  "ground_truth": 7.0,
  "formulation": null,
  "correct_program": "def optimize_machines():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"IceCreamMachineOptimization\")\n\n    # Decision variables: number of each machine type\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Countertop\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Fridge\", lb=0)\n\n    # Set the objective: minimize total number of machines\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add production constraint\n    m.addConstr(80 * x + 150 * y >= 1000, name=\"ProductionRequirement\")\n\n    # Add heat constraint\n    m.addConstr(50 * x + 70 * y <= 500, name=\"HeatLimit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of machines\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_machines = optimize_machines()\n    if min_machines is not None:\n        print(f\"Minimum Total Number of Machines: {min_machines}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A048",
  "description": "There are two specialized containers, a small and large one, that are used to make a pharmaceutical paste. The small container requires 10 units of water and 15 units of the powdered pill to make 20 units of the paste. The large container requires 20 units of water and 20 units of the powdered pill to make 30 units of the paste. The pharmacy has available 500 units of water and 700 units of the powdered pill. How many of each container should be used to maximize the amount of paste that can be made?",
  "ground_truth": 950.0,
  "formulation": null,
  "correct_program": "def optimize_paste(max_water=500, max_powder=700):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"pharmaceutical_paste\")\n\n    # Decision variables: number of small and large containers\n    x = model.addVar(vtype=GRB.INTEGER, name=\"small_container\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"large_container\")\n\n    # Set the objective: maximize total paste\n    model.setObjective(20 * x + 30 * y, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    model.addConstr(10 * x + 20 * y <= max_water, \"water_constraint\")\n    model.addConstr(15 * x + 20 * y <= max_powder, \"powder_constraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum total paste produced\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_paste = optimize_paste()\n    if max_paste is not None:\n        print(f\"Maximum Total Paste Produced: {max_paste}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A049",
  "description": "An oil and gas company operates on 300 acres of land where they use oil wells of small and large size. Per acre of land, a small oil well can produce 2 barrels of oil. Per acre of land, a large oil well can produce 5 barrels of oil. However, a small oil well produces 10 units of pollution and requires 5 drill bits per acre and a large oil well produces 20 units of pollution and requires 10 drill bits per acre. The company has available 2500 drill bits and due to strict environmental laws can produce at most 4500 units of pollution. For how many acres should each oil well be used to maximize the total production of oil?",
  "ground_truth": 1125.0,
  "formulation": null,
  "correct_program": "def optimize_oil_production(\n    total_land=300,\n    max_drill_bits=2500,\n    max_pollution=4500\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Oil_Well_Allocation\")\n\n    # Decision variables: acres for small and large wells\n    x = model.addVar(name=\"small_wells_acres\", lb=0)\n    y = model.addVar(name=\"large_wells_acres\", lb=0)\n\n    # Set objective: maximize total oil production\n    model.setObjective(2 * x + 5 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Land constraint\n    model.addConstr(x + y <= total_land, name=\"land_constraint\")\n    # Drill bits constraint\n    model.addConstr(5 * x + 10 * y <= max_drill_bits, name=\"drill_bits_constraint\")\n    # Pollution constraint\n    model.addConstr(10 * x + 20 * y <= max_pollution, name=\"pollution_constraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal total oil production\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    max_oil_production = optimize_oil_production()\n    if max_oil_production is not None:\n        print(f\"Maximum Total Oil Production: {max_oil_production}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A050",
  "description": "A bakery makes almond and pistachio croissants. An almond croissant requires 5 units of butter and 8 units of flour. A pistachio croissant requires 3 units of butter and 6 units of flour. The bakery has available 600 units of butter and 800 units of flour. Since the almond croissant is more popular, at least 3 times as many almond croissants should be made as pistachio croissants. If making an almond croissant takes 12 minutes and making a pistachio croissant takes 10 minutes, how many of each should be made to minimize the total production time?",
  "ground_truth": 0.0,
  "formulation": null,
  "correct_program": "def optimize_croissants(butter_available=600, flour_available=800,\n                        time_almond=12, time_pistachio=10,\n                        butter_almond=5, flour_almond=8,\n                        butter_pistachio=3, flour_pistachio=6):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Croissant_Production_MinTime\")\n\n    # Decision variables: number of croissants\n    x = model.addVar(vtype=GRB.INTEGER, name=\"AlmondCroissants\", lb=0)\n    y = model.addVar(vtype=GRB.INTEGER, name=\"PistachioCroissants\", lb=0)\n\n    # Set objective: minimize total production time\n    model.setObjective(time_almond * x + time_pistachio * y, GRB.MINIMIZE)\n\n    # Add resource constraints\n    model.addConstr(butter_almond * x + butter_pistachio * y <= butter_available, \"ButterLimit\")\n    model.addConstr(flour_almond * x + flour_pistachio * y <= flour_available, \"FlourLimit\")\n\n    # Add popularity constraint\n    model.addConstr(x >= 3 * y, \"PopularityConstraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the total minimized time\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_croissants()\n    if min_time is not None:\n        print(f\"Minimum Total Production Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A051",
  "description": "A bakery makes fiber supplemented brownies and lemon squares. Each brownie requires 5 units of chocolate mix and 4 units of fiber. Each lemon square requires 7 units of lemon mix and 6 units of fiber. Lemon squares sell much faster and thus the number of lemon squares made must be larger than the number of brownies made. However, to please all customers, at least 40% of the items made must be brownies. If the bakery has 2500 units of chocolate mix and 3300 units of lemon mix, how many of each should be made to minimize the total amount of fiber needed?",
  "ground_truth": 26.0,
  "formulation": null,
  "correct_program": "def optimize_bakery_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"BakeryProduction\")\n\n    # Decision variables: number of brownies and lemon squares\n    B = m.addVar(name=\"Brownies\", vtype=GRB.INTEGER, lb=0)\n    L = m.addVar(name=\"LemonSquares\", vtype=GRB.INTEGER, lb=0)\n\n    # Set the objective: minimize total fiber\n    m.setObjective(4 * B + 6 * L, GRB.MINIMIZE)\n\n    # Add resource constraints\n    m.addConstr(5 * B <= 2500, name=\"ChocolateConstraint\")\n    m.addConstr(7 * L <= 3300, name=\"LemonConstraint\")\n\n    # Lemon squares must be more than brownies\n    # Note: Gurobi does not support strict inequalities directly.\n    # To model L > B, we can use L >= B + 1\n    m.addConstr(L >= B + 1, name=\"L_greater_than_B\")\n\n    # At least 40% of total items are brownies\n    # The original constraint: 3B >= 2L\n    m.addConstr(3 * B >= 2 * L, name=\"BrowniePercentage\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal fiber usage\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_fiber = optimize_bakery_production()\n    if min_fiber is not None:\n        print(f\"Minimum Total Fiber Usage: {min_fiber}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A052",
  "description": "A laundromat can buy two types of washing machines, a top-loading model and a front-loading model. The top-loading model can wash 50 items per day while the front-loading model can wash 75 items per day. The top-loading model consumes 85 kWh per day while the front-loading model consumes 100 kWh per day. The laundromat must be able to wash at least 5000 items per day and has available 7000 kWh per day. Since the top-loading machine are harder to use, at most 40% of the machines can be top-loading. Further, at least 10 machines should be front-loading. How many of each machine should the laundromat buy to minimize the total number of washing machines?",
  "ground_truth": 67.0,
  "formulation": null,
  "correct_program": "def optimize_washing_machines():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Laundromat Machine Optimization\")\n    \n    # Decision variables: number of machines\n    x = m.addVar(vtype=GRB.INTEGER, name=\"TopLoading\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"FrontLoading\")\n    \n    # Set the objective: minimize total number of machines\n    m.setObjective(x + y, GRB.MINIMIZE)\n    \n    # Add constraints\n    # Washing capacity constraint\n    m.addConstr(50 * x + 75 * y >= 5000, \"WashingCapacity\")\n    # Energy consumption constraint\n    m.addConstr(85 * x + 100 * y <= 7000, \"EnergyLimit\")\n    # Top-loading proportion constraint (transformed to linear form)\n    m.addConstr(3 * x <= 2 * y, \"TopLoadingProportion\")\n    # Minimum front-loading machines\n    m.addConstr(y >= 10, \"MinFrontLoading\")\n    # Non-negativity is implicit in variable definition\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of machines\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_machines = optimize_washing_machines()\n    if min_machines is not None:\n        print(f\"Minimum Total Number of Machines: {min_machines}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A053",
  "description": "A bank can build small and large branches to serve their customers. A small branch can serve 50 customers per day and requires 10 bank tellers. A large branch can serve 100 customers per day and requires 15 bank tellers. The bank has available 200 bank tellers and needs to be able to serve at least 1200 customers per day. How many of each branch size should they build to minimize the total number of branches needed?",
  "ground_truth": 12.0,
  "formulation": null,
  "correct_program": "def optimize_branches():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"BankBranches\")\n\n    # Decision variables: number of small and large branches\n    x = m.addVar(vtype=GRB.INTEGER, name=\"small_branches\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"large_branches\", lb=0)\n\n    # Set the objective: minimize total number of branches\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add customer service constraint\n    m.addConstr(50 * x + 100 * y >= 1200, name=\"CustomerService\")\n\n    # Add teller constraint\n    m.addConstr(10 * x + 15 * y <= 200, name=\"TellerAvailability\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal value of the objective function\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_branches = optimize_branches()\n    if min_branches is not None:\n        print(f\"Minimum Total Number of Branches: {min_branches}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A054",
  "description": "A shipping company can purchase regular and hybrid vans to make deliveries. A regular van can deliver 500 packages per day and produces 200 units of pollutants. A hybrid van can deliver 300 packages per day and produces 100 units of pollutants. Due to a new environmental law, they can produce at most 7000 units of pollutants per day. However, the company needs to be able to deliver at least 20000 packages per day. How many of each type of van should they buy to minimize the total number of vans needed?",
  "ground_truth": 60.0,
  "formulation": null,
  "correct_program": "def optimize_vans():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Vans_Optimization\")\n\n    # Decision variables: number of regular and hybrid vans\n    x = m.addVar(vtype=GRB.INTEGER, name=\"RegularVans\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"HybridVans\", lb=0)\n\n    # Set the objective: minimize total vans\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add delivery constraint\n    m.addConstr(500 * x + 300 * y >= 20000, name=\"DeliveryRequirement\")\n\n    # Add pollution constraint\n    m.addConstr(200 * x + 100 * y <= 7000, name=\"PollutionLimit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of vans\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_vans = optimize_vans()\n    if min_vans is not None:\n        print(f\"Minimum Total Number of Vans: {min_vans}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A055",
  "description": "In order to make carbon dioxide, wood is burned using two processes, with a catalyst and without a catalyst. The process with a catalyst requires 10 units of wood and 20 units of oxygen to make 15 units of carbon dioxide. The process without a catalyst requires 15 units of wood and 12 units of oxygen to make 18 units of carbon dioxide. There are 300 units of wood and 300 units of oxygen available. How many of each process should be used to maximize the amount of carbon dioxide produced?",
  "ground_truth": 375.0,
  "formulation": null,
  "correct_program": "def optimize_co2_production(\n    wood_available=300,\n    oxygen_available=300,\n    co2_with_catalyst=15,\n    co2_without_catalyst=18,\n    wood_per_with=10,\n    oxygen_per_with=20,\n    wood_per_without=15,\n    oxygen_per_without=12\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"CO2_Production_Maximization\")\n\n    # Decision variables: number of times to run each process\n    x = model.addVar(name=\"with_catalyst\")\n    y = model.addVar(name=\"without_catalyst\")\n\n    # Set objective: maximize total CO2\n    model.setObjective(\n        co2_with_catalyst * x + co2_without_catalyst * y,\n        GRB.MAXIMIZE\n    )\n\n    # Add resource constraints\n    model.addConstr(wood_per_with * x + wood_per_without * y <= wood_available, \"WoodConstraint\")\n    model.addConstr(oxygen_per_with * x + oxygen_per_without * y <= oxygen_available, \"OxygenConstraint\")\n\n    # Set non-negativity constraints (implicit in variable definitions)\n    model.addConstr(x >= 0, \"X_nonneg\")\n    model.addConstr(y >= 0, \"Y_nonneg\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum CO2 produced\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    max_co2 = optimize_co2_production()\n    if max_co2 is not None:\n        print(f\"Maximum CO2 produced: {max_co2:.2f}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A056",
  "description": "A tea estate has available 500 acres of land and they need to pick the tea leaves either using a traditional machine or modern machine. For each acre of land, the traditional machine can pick 30 kg of tea leaves, creates 10 kg of waste, and requires 20 liters of fuel. For each acre of land, the modern machine can pick 40 kg of tea leaves, creates 15 kg of waste, and requires 15 liters of fuel. The estate has available 9000 liters of fuel can handle at most 6000 kg of waste. For how many acres should each machine be used to maximize the amount of tea leaves that can be picked?",
  "ground_truth": 17000.0,
  "formulation": null,
  "correct_program": "def optimize_tea_harvest(\n    total_acres=500,\n    total_fuel=9000,\n    max_waste=6000\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Tea_Harvest_Maximization\")\n\n    # Decision variables: acres assigned to traditional and modern machines\n    x = model.addVar(name=\"Traditional_Acres\", lb=0)\n    y = model.addVar(name=\"Modern_Acres\", lb=0)\n\n    # Set the objective: maximize total tea leaves\n    model.setObjective(30 * x + 40 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Land constraint\n    model.addConstr(x + y <= total_acres, name=\"Land_Limit\")\n    # Fuel constraint\n    model.addConstr(20 * x + 15 * y <= total_fuel, name=\"Fuel_Limit\")\n    # Waste constraint\n    model.addConstr(10 * x + 15 * y <= max_waste, name=\"Waste_Limit\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum total tea leaves picked\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_tea_leaves = optimize_tea_harvest()\n    if max_tea_leaves is not None:\n        print(f\"Maximum Total Tea Leaves Picked: {max_tea_leaves}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A057",
  "description": "A grilled cheese shop sells a light and heavy grilled cheese sandwich. A light grilled cheese sandwich requires 2 slices of bread and 3 slices of cheese. A heavy grilled cheese sandwich requires 3 slices of bread and 5 slices of cheese. Since most people who come to the store love grilled cheese, the store must make at least 3 times as many heavy grilled cheese sandwiches as light grilled cheese sandwiches. The store has available 300 slices of bread and 500 slices of cheese. If a light grilled cheese sandwich takes 10 minutes to make and a heavy grilled cheese sandwich takes 15 minutes to make, how many of each should they make to minimize the total production time?",
  "ground_truth": 0.0,
  "formulation": null,
  "correct_program": "def optimize_grilled_cheese():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"GrilledCheeseOptimization\")\n    \n    # Decision variables: number of light and heavy sandwiches\n    x = m.addVar(name=\"light_sandwiches\", vtype=GRB.INTEGER, lb=0)\n    y = m.addVar(name=\"heavy_sandwiches\", vtype=GRB.INTEGER, lb=0)\n    \n    # Set the objective: minimize total production time\n    m.setObjective(10 * x + 15 * y, GRB.MINIMIZE)\n    \n    # Add resource constraints\n    m.addConstr(2 * x + 3 * y <= 300, name=\"bread_constraint\")\n    m.addConstr(3 * x + 5 * y <= 500, name=\"cheese_constraint\")\n    \n    # Add demand ratio constraint\n    m.addConstr(y >= 3 * x, name=\"heavy_light_ratio\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total production time\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_grilled_cheese()\n    if min_time is not None:\n        print(f\"Minimum Total Production Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A058",
  "description": "A post office is buying stamping machines and they can buy a dual or single model stamping machine. A dual model stamping machine can stamp 50 letters per minute while a single model stamping machine can stamp 30 letters per minute. The dual model stamping machine requires 20 units of glue per minute while the single model stamping machine requires 15 units of glue per minute. Since the single model stamping machine is quieter, the number of single model stamping machines must be more than the number of dual model stamping machines. Further, the post office wants to make sure they can stamp at least 300 letters per minute and use at most 135 units of glue per minute. How many of each stamping machine should they purchase to minimize the total number of stamping machines?",
  "ground_truth": 8.0,
  "formulation": null,
  "correct_program": "def optimize_stamping_machines():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"StampingMachines\")\n\n    # Decision variables: number of dual and single machines\n    x = m.addVar(name=\"dual_machines\", vtype=GRB.INTEGER, lb=0)\n    y = m.addVar(name=\"single_machines\", vtype=GRB.INTEGER, lb=0)\n\n    # Set the objective: minimize total number of machines\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add capacity constraint\n    m.addConstr(50 * x + 30 * y >= 300, name=\"capacity_constraint\")\n\n    # Add glue constraint\n    m.addConstr(20 * x + 15 * y <= 135, name=\"glue_constraint\")\n\n    # Add preference constraint: y > x\n    # Since Gurobi does not support strict inequalities directly,\n    # we model y >= x + 1 to enforce y > x for integer variables\n    m.addConstr(y >= x + 1, name=\"preference_constraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of machines\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_machines = optimize_stamping_machines()\n    if min_machines is not None:\n        print(f\"Minimum Total Number of Stamping Machines: {min_machines}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A059",
  "description": "A crepe store sells chocolate and peanut butter crepes. A chocolate crepe requires 3 units of chocolate spread and 6 units of crepe mix. A peanut butter crepe requires 4 units of peanut butter spread and 7 units of crepe mix. Recently, the peanut butter crepe has been more popular and therefore the number of peanut butter crepes made must exceed the number of chocolate crepes made. However at least 25% of the crepes made should be chocolate. The store has available 400 units of chocolate spread and 450 units of peanut butter spread. How many of each should the store make to minimize the total amount of crepe mix needed?",
  "ground_truth": 20.0,
  "formulation": null,
  "correct_program": "def optimize_crepe_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Crepe_Production\")\n\n    # Decision variables: number of chocolate and peanut butter crepes\n    C = m.addVar(name=\"Chocolate_Crepes\", vtype=GRB.INTEGER, lb=0)\n    P = m.addVar(name=\"Peanut_Butter_Crepes\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: minimize total crepe mix\n    m.setObjective(6 * C + 7 * P, GRB.MINIMIZE)\n\n    # Add constraints\n    m.addConstr(3 * C <= 400, name=\"Chocolate_Spread_Limit\")\n    m.addConstr(4 * P <= 450, name=\"Peanut_Butter_Spread_Limit\")\n    m.addConstr(P >= C + 1, name=\"Popularity_Preference\")\n    m.addConstr(P <= 3 * C, name=\"Percentage_Constraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total crepe mix used\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_crepe_mix = optimize_crepe_production()\n    if min_crepe_mix is not None:\n        print(f\"Minimum Total Crepe Mix Used: {min_crepe_mix}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A060",
  "description": "A fire department employs regular and emergency fire fighters. A regular fire fighter works 10 hours per shift and earns $300. An emergency fire fighter works 6 hours per shift and earns $100. Due to wildfires in the region, the fire department needs at least 300 hours of fire fighter time. If the fire department has a budget of $7000, how many of each should the fire department hire to minimize the total number of fire fighters?",
  "ground_truth": 40.0,
  "formulation": null,
  "correct_program": "import gurobipy as gp\nfrom gurobipy import GRB\n\ndef optimize_firefighters(\n    hours_required=300,\n    hours_regular=10,\n    hours_emergency=6,\n    cost_regular=300,\n    cost_emergency=100,\n    budget=7000\n):\n    # Create a new model\n    model = gp.Model(\"FireFighterOptimization\")\n    \n    # Add decision variables: number of regular and emergency fire fighters\n    R = model.addVar(vtype=GRB.INTEGER, name=\"Regular_Firefighters\", lb=0)\n    E = model.addVar(vtype=GRB.INTEGER, name=\"Emergency_Firefighters\", lb=0)\n    \n    # Set the objective: minimize total number of fire fighters\n    model.setObjective(R + E, GRB.MINIMIZE)\n    \n    # Add constraints\n    # Hours constraint\n    model.addConstr(hours_regular * R + hours_emergency * E >= hours_required, \"HoursRequirement\")\n    \n    # Budget constraint\n    model.addConstr(cost_regular * R + cost_emergency * E <= budget, \"BudgetLimit\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the total number of fire fighters hired\n        total_firefighters = R.X + E.X\n        return total_firefighters\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    total_firefighters = optimize_firefighters()\n    if total_firefighters is not None:\n        print(f\"Total Fire Fighters Hired: {total_firefighters}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A061",
  "description": "A mall buys two types of hand sanitizer machines, a motion activated one and a manual one. The motion activated one can deliver 50 drops per minute and consumes 30 kWh. The manual one can deliver 75 drops per minute and consumes 20 kWh. Since the motion activated one is more hygienic, at most 40% of the machines can be manual. In addition, at least 3 should be motion activated. If the mall must be able to deliver at least 1000 drops per minute and can use at most 500 kWh per minute, how many of each machine should they buy to minimize the total number of machines?",
  "ground_truth": 17.0,
  "formulation": null,
  "correct_program": "def optimize_machines():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"HandSanitizerMachines\")\n\n    # Decision variables\n    # x: number of motion-activated machines (minimum 3)\n    x = m.addVar(vtype=GRB.INTEGER, name=\"x\", lb=3)\n    # y: number of manual machines (non-negative)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"y\", lb=0)\n\n    # Set objective: minimize total number of machines\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Delivery constraint\n    m.addConstr(50 * x + 75 * y >= 1000, name=\"delivery\")\n    # Power constraint\n    m.addConstr(30 * x + 20 * y <= 500, name=\"power\")\n    # Manual proportion constraint\n    m.addConstr(y <= (2.0/3.0) * x, name=\"manual_ratio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_machines = m.objVal\n        return total_machines\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_machines = optimize_machines()\n    if min_machines is not None:\n        print(f\"Minimum Total Number of Machines: {min_machines}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A062",
  "description": "A hot dog company can build two types of butcher shops, a small shop and a large shop. A small shop can make 30 hot dogs per day and requires 2 workers. A large shop can make 70 hot dogs per day and requires 4 workers. The company must make at least 500 hot dogs per day but they only have available 30 workers. How many of each butcher shop should the company build to minimize the total number of butcher shops?",
  "ground_truth": 8.0,
  "formulation": null,
  "correct_program": "def optimize_butcher_shops():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"HotDogShopOptimization\")\n\n    # Decision variables: number of small and large shops\n    # Both are integers and non-negative\n    x = m.addVar(vtype=GRB.INTEGER, name=\"small_shops\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"large_shops\", lb=0)\n\n    # Set the objective: minimize total number of shops\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add production constraint: at least 500 hot dogs\n    m.addConstr(30 * x + 70 * y >= 500, name=\"production_constraint\")\n\n    # Add labor constraint: no more than 30 workers\n    m.addConstr(2 * x + 4 * y <= 30, name=\"labor_constraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal objective value (minimum total shops)\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_shops = optimize_butcher_shops()\n    if min_shops is not None:\n        print(f\"Minimum Total Number of Shops: {min_shops}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A063",
  "description": "An airport buys two types of vehicles, a 4-wheeler and 3-wheeler, to help move luggage. A 4-wheeler vehicle can move 60 luggage per day and produces 30 units of pollutant per day. A 3-wheeler vehicle can move 40 luggage per day and produces 15 units of pollutant per day. The airport needs to be able to move at least 1000 luggage per day. To avoid over-polluting the airport, they can produce at most 430 units of pollutant per day. How many of each vehicle should the airport buy to minimize the total number of vehicles needed.  ",
  "ground_truth": 22.0,
  "formulation": null,
  "correct_program": "def optimize_vehicles():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"airport_vehicles\")\n\n    # Decision variables: number of 4-wheelers and 3-wheelers\n    x = m.addVar(vtype=GRB.INTEGER, name=\"x\")  # 4-wheeler\n    y = m.addVar(vtype=GRB.INTEGER, name=\"y\")  # 3-wheeler\n\n    # Set the objective: minimize total number of vehicles\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Luggage capacity constraint\n    m.addConstr(60 * x + 40 * y >= 1000, \"luggage_constraint\")\n    # Pollution constraint\n    m.addConstr(30 * x + 15 * y <= 430, \"pollution_constraint\")\n    # Non-negativity is implicit in variable definition\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_vehicles = optimize_vehicles()\n    if min_vehicles is not None:\n        print(f\"Minimum Total Number of Vehicles: {min_vehicles}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A064",
  "description": "A scientist is conducting two experiments to produce electricity, experiment alpha and experiment beta. In experiment alpha, 3 units of metal and 5 units of acid are required to produce 8 units of electricity. In experiment beta, 5 units of metal and 4 units of acid are required to produced 10 units of electricity. The lab has 800 units of metal and 750 units of acid available. How many of each experiment should the scientist conduct to maximize the total amount of electricity produced?",
  "ground_truth": 1684.6153846153848,
  "formulation": null,
  "correct_program": "def optimize_experiments(metal_available=800, acid_available=750):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Electricity_Production\")\n\n    # Decision variables: number of experiments for alpha and beta\n    x = m.addVar(name=\"alpha_experiments\", lb=0)\n    y = m.addVar(name=\"beta_experiments\", lb=0)\n\n    # Set the objective: maximize total electricity\n    m.setObjective(8 * x + 10 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(3 * x + 5 * y <= metal_available, name=\"metal_constraint\")\n    m.addConstr(5 * x + 4 * y <= acid_available, name=\"acid_constraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum total electricity produced\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    max_electricity = optimize_experiments()\n    if max_electricity is not None:\n        print(f\"Maximum Total Electricity Produced: {max_electricity}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A065",
  "description": "A man fishes in a 250 acre lake and can catch fish either using a net or fishing line. For each acre of the lake, using a net will catch 8 fish and requires 4 units of bait but also causes 2 units of pain for the fisherman. For each acre of the lake, using a fishing line will catch 5 fish and requires 3 units of bait but also causes 1 unit of pain for the fisherman. The fisherman has available 800 units of bait and can tolerate at most 350 units of pain. For how many acres each should he use each fishing method to maximize the amount of fish he can catch?",
  "ground_truth": 1500.0,
  "formulation": null,
  "correct_program": "def optimize_fishing():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"FishingOptimization\")\n\n    # Decision variables: acres fished with net (x) and line (y)\n    x = m.addVar(name=\"Net_Acres\", lb=0)\n    y = m.addVar(name=\"Line_Acres\", lb=0)\n\n    # Set the objective: maximize total fish caught\n    m.setObjective(8 * x + 5 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(x + y <= 250, name=\"LakeArea\")\n    m.addConstr(4 * x + 3 * y <= 800, name=\"Bait\")\n    m.addConstr(2 * x + y <= 350, name=\"Pain\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum number of fish caught\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_fish = optimize_fishing()\n    if max_fish is not None:\n        print(f\"Maximum Fish Caught: {max_fish}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A066",
  "description": "A coffee shop sells mochas and regular coffees. Each mocha requires 3 units of coffee powder and 6 units of milk. Each regular coffee requires 6 units of coffee powder and 2 units of milk. The shop has available 400 units of coffee powder and 500 units of milk. Making a mocha takes 5 minutes and making a regular coffee takes 3 minutes. Since mochas are more popular among people, the shop must make at least 3 times as many mochas as regular coffees. How many of each should they make to minimize the total production time?",
  "ground_truth": 0.0,
  "formulation": null,
  "correct_program": "def optimize_coffee_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"CoffeeProduction\")\n\n    # Decision variables: number of mochas (x) and regular coffees (y)\n    x = m.addVar(vtype=GRB.INTEGER, name=\"mochas\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"regular_coffees\", lb=0)\n\n    # Set the objective: minimize total production time\n    m.setObjective(5 * x + 3 * y, GRB.MINIMIZE)\n\n    # Add resource constraints\n    m.addConstr(3 * x + 6 * y <= 400, name=\"coffee_powder\")\n    m.addConstr(6 * x + 2 * y <= 500, name=\"milk\")\n\n    # Add production ratio constraint\n    m.addConstr(x >= 3 * y, name=\"mocha_ratio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total production time\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_coffee_production()\n    if min_time is not None:\n        print(f\"Minimum Total Production Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A067",
  "description": "A water company sells water in glass and plastic bottles. A glass bottle can hole 500 ml of water while a plastic bottle can hold 750 ml of water. Because most customer prefer plastic bottles, the number of plastic bottles must be at least 3 times the number of glass bottles. However, there must be at least 20 glass bottles. If the company has available 250000 ml of water, how many of each bottle should be made to maximize the total number of bottles?",
  "ground_truth": 363.0,
  "formulation": null,
  "correct_program": "def optimize_bottle_production(\n    water_available=250000,\n    min_glass_bottles=20,\n    glass_bottle_volume=500,\n    plastic_bottle_volume=750,\n    plastic_ratio=3\n):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"WaterBottleOptimization\")\n    m.setParam('OutputFlag', 0)  # Suppress Gurobi output\n\n    # Decision variables\n    x = m.addVar(name=\"glass_bottles\", vtype=GRB.INTEGER, lb=min_glass_bottles)\n    y = m.addVar(name=\"plastic_bottles\", vtype=GRB.INTEGER, lb=plastic_ratio * min_glass_bottles)\n\n    # Set objective: maximize total bottles\n    m.setObjective(x + y, GRB.MAXIMIZE)\n\n    # Add water constraint\n    m.addConstr(glass_bottle_volume * x + plastic_bottle_volume * y <= water_available, \"WaterLimit\")\n\n    # Add ratio constraint: y >= 3x\n    m.addConstr(y >= plastic_ratio * x, \"PlasticRatio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_bottles = m.objVal\n        return total_bottles\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_bottles = optimize_bottle_production()\n    if max_bottles is not None:\n        print(f\"Maximum Total Number of Bottles: {max_bottles}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A068",
  "description": "An Indian restaurant makes goat and chicken curry. Each bowl of goat curry requires 3 units of goat meat and 6 units of the curry base. Each bowl of chicken curry requires 5 units of chicken meat and 5 units of the curry base. The restaurant has available 1500 units of goat meat and 2000 units of chicken meat. At least 25% of the bowls made must be chicken curry. Since goat curry is more popular, the number of goat curry bowls must be larger than the number of chicken curry bowls. How many of each type of curry bowl should be made to minimize the total amount of curry base used?",
  "ground_truth": 17.0,
  "formulation": null,
  "correct_program": "def optimize_curry_bowls():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"CurryOptimization\")\n    \n    # Decision variables: number of goat and chicken curry bowls\n    G = m.addVar(vtype=GRB.INTEGER, name=\"GoatCurry\")\n    C = m.addVar(vtype=GRB.INTEGER, name=\"ChickenCurry\")\n    \n    # Set the objective: minimize total curry base used\n    m.setObjective(6 * G + 5 * C, GRB.MINIMIZE)\n    \n    # Add resource constraints\n    m.addConstr(3 * G <= 1500, name=\"GoatMeatLimit\")\n    m.addConstr(5 * C <= 2000, name=\"ChickenMeatLimit\")\n    \n    # Add proportion constraint: C >= 0.25*(G + C) -> 3C >= G\n    m.addConstr(3 * C >= G, name=\"ProportionConstraint\")\n    \n    # Popularity constraint: G > C -> G >= C + 1\n    m.addConstr(G >= C + 1, name=\"PopularityConstraint\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total curry base used\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_curry_base = optimize_curry_bowls()\n    if min_curry_base is not None:\n        print(f\"Minimum Total Curry Base Used: {min_curry_base}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A069",
  "description": "An accounting firm employs part time workers and full time workers. Full time workers work 8 hours per shift while part time workers work 4 hours per shift. In addition, full time workers are paid $300 per shift while part time workers are paid $100 per shift. Currently, the accounting firm has a project requiring 500 hours of labor. If the firm has a budget of $15000, how many of each type of worker should be scheduled to minimize the total number of workers.",
  "ground_truth": 100.0,
  "formulation": null,
  "correct_program": "def optimize_worker_schedule():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"WorkerScheduling\")\n\n    # Decision variables: number of full-time and part-time workers\n    F = m.addVar(vtype=GRB.INTEGER, name=\"FullTime\")\n    P = m.addVar(vtype=GRB.INTEGER, name=\"PartTime\")\n\n    # Set the objective: minimize total number of workers\n    m.setObjective(F + P, GRB.MINIMIZE)\n\n    # Add labor hours constraint\n    m.addConstr(8 * F + 4 * P >= 500, name=\"LaborHours\")\n\n    # Add budget constraint\n    m.addConstr(300 * F + 100 * P <= 15000, name=\"Budget\")\n\n    # Set non-negativity constraints (implicitly handled by variable types)\n    # Solve the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of workers\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_workers = optimize_worker_schedule()\n    if min_workers is not None:\n        print(f\"Minimum Total Number of Workers: {min_workers}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A070",
  "description": "A factory has two machines, A and B. Each day, machine A can make 30 items and consumes 100 kWh. Machine B can make 50 items and consumes 120 kWh per day. The factory must produce at least 1000 items per day and has 3000 kWh of electricity available per day. Since there are not many workers that can operate both machines, at most 30% of the machines must be of type B. Further, at least 5 machines of type A should be used. How many of each machine should be used to minimize the total number of machines?",
  "ground_truth": 28.0,
  "formulation": null,
  "correct_program": "def optimize_machines():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Machine_Optimization\")\n    \n    # Decision variables\n    # Number of machine A (at least 5)\n    x_A = m.addVar(vtype=GRB.INTEGER, name=\"x_A\", lb=5)\n    # Number of machine B (non-negative)\n    x_B = m.addVar(vtype=GRB.INTEGER, name=\"x_B\", lb=0)\n    \n    # Set objective: minimize total number of machines\n    m.setObjective(x_A + x_B, GRB.MINIMIZE)\n    \n    # Add constraints\n    # Production constraint\n    m.addConstr(30 * x_A + 50 * x_B >= 1000, \"prod_constraint\")\n    # Electricity constraint\n    m.addConstr(100 * x_A + 120 * x_B <= 3000, \"energy_constraint\")\n    # B proportion constraint\n    m.addConstr(x_B <= (3/7) * x_A, \"b_ratio_constraint\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_machines = x_A.X + x_B.X\n        return total_machines\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_machines = optimize_machines()\n    if min_machines is not None:\n        print(f\"Minimum Total Number of Machines: {min_machines}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A071",
  "description": "A toy company can build two factory types, a medium sized factory and a small factory. A medium sized factory can make 50 toys per day and requires 3 operators. A small factory can make 35 toys per day and requires 2 operators. The company must make at least 250 toys per day but they only have available 16 operators. How many of each factory should the company build to minimize the total number of factories?",
  "ground_truth": 5.0,
  "formulation": null,
  "correct_program": "def optimize_factory_selection():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Factory_Optimization\")\n    \n    # Decision variables: number of medium and small factories\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Medium_Factories\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Small_Factories\", lb=0)\n    \n    # Set the objective: minimize total number of factories\n    m.setObjective(x + y, GRB.MINIMIZE)\n    \n    # Add production constraint\n    m.addConstr(50 * x + 35 * y >= 250, name=\"Production_Constraint\")\n    \n    # Add operator constraint\n    m.addConstr(3 * x + 2 * y <= 16, name=\"Operator_Constraint\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_factories = optimize_factory_selection()\n    if min_factories is not None:\n        print(f\"Minimum Total Number of Factories: {min_factories}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A072",
  "description": "There are two chemical reactions, chemical reaction A and chemical reaction B. Chemical reaction A requires 5 units of rare inert gas and 6 units of treated water to produce 10 units of a rare compound. Chemical reaction B requires 7 units of rare inert gas and 3 units of treater water to produce 8 units of a rare compound. There are 1000 units of the rare inert gas and 800 units of treated water available in the lab. How many reactions of each type should be done to maximize the amount of rare compound produced?",
  "ground_truth": 1555.5555555555557,
  "formulation": null,
  "correct_program": "def optimize_chemical_reactions(\n    inert_gas_available=1000,\n    water_available=800\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Chemical_Reactions_Maximize_Compound\")\n\n    # Decision variables: number of reactions for A and B\n    x = model.addVar(name=\"Reaction_A\", lb=0)\n    y = model.addVar(name=\"Reaction_B\", lb=0)\n\n    # Set the objective: maximize total rare compound produced\n    model.setObjective(10 * x + 8 * y, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    model.addConstr(5 * x + 7 * y <= inert_gas_available, name=\"InertGasConstraint\")\n    model.addConstr(6 * x + 3 * y <= water_available, name=\"WaterConstraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum amount of rare compound produced\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_compound = optimize_chemical_reactions()\n    if max_compound is not None:\n        print(f\"Maximum Rare Compound Produced: {max_compound}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A073",
  "description": "A mining company has available a total of 100 square miles of mining sites and considering the use of two mining techniques: heap leaching and vat leaching. For each square mile of land, heap leaching technique can have a daily production of 3 tons of rare earth oxide per square miles but it also creates 8 tons of polluted wastewater and requires 10 extraction machines. On the other hand, vat leaching technique produces 5 tons of rare earth oxide per square miles per day while creating 17 tons of polluted wastewater and requiring 20 extraction machines. There are 100 machines available and due to environmental regulations, the amount of polluted wastewater must be at most 90 tons daily. Find the proportion of lands that use each mining technique in order to maximize the daily production of rare earth oxide.",
  "ground_truth": 30.0,
  "formulation": null,
  "correct_program": "def optimize_mining_proportions():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MiningOptimization\")\n\n    # Decision variables: proportions of land allocated to each technique\n    x = m.addVar(name=\"heap_leaching\", lb=0)\n    y = m.addVar(name=\"vat_leaching\", lb=0)\n\n    # Set the objective: maximize total REO production\n    m.setObjective(300 * x + 500 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Land constraint\n    m.addConstr(x + y <= 1, name=\"land_constraint\")\n    # Machine constraint\n    m.addConstr(1000 * x + 2000 * y <= 100, name=\"machine_constraint\")\n    # Wastewater constraint\n    m.addConstr(800 * x + 1700 * y <= 90, name=\"wastewater_constraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum production value\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_production = optimize_mining_proportions()\n    if max_production is not None:\n        print(f\"Maximum REO Production: {max_production}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A074",
  "description": "A small chocolate shop makes milk chocolate and dark chocolate bars. Milk chocolate bars require 4 units of cocoa and 7 units of milk. Dark chocolate bars require 6 units of cocoa and 3 units of milk. The shop has 2000 units of cocoa and 1750 units of milk available. In addition since milk chocolate sells better, at least 2 times as many milk chocolate bars need to be made as dark chocolate bars.  If making a milk chocolate bar takes 15 minutes and making a dark chocolate bar takes 12 mins, how many of each should the make to minimize total production time?",
  "ground_truth": 0.0,
  "formulation": null,
  "correct_program": "def optimize_chocolate_production(cocoa_available=2000, milk_available=1750,\n                                  time_milk=15, time_dark=12):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Chocolate_Production_MinTime\")\n\n    # Decision variables: number of milk and dark chocolate bars\n    x = model.addVar(name=\"MilkBars\", vtype=GRB.INTEGER, lb=0)\n    y = model.addVar(name=\"DarkBars\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: minimize total production time\n    model.setObjective(time_milk * x + time_dark * y, GRB.MINIMIZE)\n\n    # Add resource constraints\n    model.addConstr(4 * x + 6 * y <= cocoa_available, \"CocoaConstraint\")\n    model.addConstr(7 * x + 3 * y <= milk_available, \"MilkConstraint\")\n\n    # Add production ratio constraint\n    model.addConstr(x >= 2 * y, \"MilkDarkRatio\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the minimized total time\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_chocolate_production()\n    if min_time is not None:\n        print(f\"Minimum Total Production Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A075",
  "description": "An office is buying printers for their headquarters, a premium model and regular model. The premium model can print 30 pages per minute while the regular model can print 20 pages per minute. In addition, the premium model requires 4 units of ink per minute while the regular model requires 3 units of ink per minute. The office wants to make sure that at least 200 pages can be printed per minute and that at most 35 units of ink are used per minute.  Since the premium model is more user friendly, the number regular printers must be less than the number of premium printers. How many of each printer should be bought to minimize the total number of printers in the office?",
  "ground_truth": 7.0,
  "formulation": null,
  "correct_program": "def optimize_printers():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Printer_Optimization\")\n\n    # Decision variables: number of premium and regular printers\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Premium\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Regular\")\n\n    # Set objective: minimize total number of printers\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Printing capacity constraint\n    m.addConstr(30 * x + 20 * y >= 200, name=\"PrintCapacity\")\n    # Ink usage constraint\n    m.addConstr(4 * x + 3 * y <= 35, name=\"InkLimit\")\n    # Preference constraint: y < x\n    m.addConstr(y <= x - 1, name=\"Preference\")\n    # Non-negativity constraints are implicit in variable definitions\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the total number of printers in the optimal solution\n        total_printers = x.X + y.X\n        return total_printers\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_printers = optimize_printers()\n    if min_printers is not None:\n        print(f\"Minimum Total Number of Printers: {min_printers}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A076",
  "description": "A vine company sells vine in vintage and regular bottles. A vintage bottle can hold 500 ml of vine while a regular bottle can hold 750 ml of vine. The company has available 100000 ml of vine. Because vintage bottles are mostly bought by collectors, the number of regular bottles must be at least 4 times as much as the number of vintage bottles. However, at least 10 vintage bottles must be made. How many of each should be made to maximize the total number of bottles produced?",
  "ground_truth": 142.0,
  "formulation": null,
  "correct_program": "def optimize_bottle_production(\n    total_vine_ml=100000,\n    vintage_volume_ml=500,\n    regular_volume_ml=750,\n    min_vintage_bottles=10,\n    ratio_regular_to_vintage=4\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Vine_Bottles_Production\")\n\n    # Decision variables: number of vintage and regular bottles\n    V = model.addVar(vtype=GRB.INTEGER, name=\"Vintage\", lb=min_vintage_bottles)\n    R = model.addVar(vtype=GRB.INTEGER, name=\"Regular\", lb=0)\n\n    # Set the objective: maximize total number of bottles\n    model.setObjective(V + R, GRB.MAXIMIZE)\n\n    # Add volume constraint\n    model.addConstr(\n        vintage_volume_ml * V + regular_volume_ml * R <= total_vine_ml,\n        name=\"VolumeConstraint\"\n    )\n\n    # Add ratio constraint: R >= 4V\n    model.addConstr(\n        R >= ratio_regular_to_vintage * V,\n        name=\"RatioConstraint\"\n    )\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        total_bottles = V.X + R.X\n        return total_bottles\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_bottles = optimize_bottle_production()\n    if max_bottles is not None:\n        print(f\"Maximum Total Number of Bottles: {max_bottles}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A077",
  "description": "A candy company is making peach flavored candy and cherry flavored candy. Each pack of peach flavored candy requires 3 units of peach flavoring and 5 units of special syrup. Each pack of cherry flavored candy requires 5 units of cherry flavoring and 4 units of special syrup. The company has available 3000 units of peach flavoring and 4000 units of cherry flavoring. Peach candy is much more popular and thus the number of peach candy packs must be larger than the number of cherry candy packs. In addition, at least 30% of the pack must be cherry flavored. How many of each should be made to minimize the total amount of special syrup used?",
  "ground_truth": 14.0,
  "formulation": null,
  "correct_program": "def optimize_candy_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"CandyProduction\")\n\n    # Decision variables: number of peach and cherry packs\n    P = m.addVar(vtype=GRB.INTEGER, name=\"PeachPacks\", lb=0)\n    C = m.addVar(vtype=GRB.INTEGER, name=\"CherryPacks\", lb=0)\n\n    # Set the objective: minimize total syrup used\n    m.setObjective(5 * P + 4 * C, GRB.MINIMIZE)\n\n    # Flavoring constraints\n    m.addConstr(P <= 1000, \"PeachFlavorLimit\")\n    m.addConstr(C <= 800, \"CherryFlavorLimit\")\n\n    # Popularity constraint: peach packs > cherry packs\n    # Note: Gurobi does not support strict inequalities directly.\n    # To enforce P > C, we can model as P >= C + 1\n    m.addConstr(P >= C + 1, \"PopularityConstraint\")\n\n    # Cherry proportion constraint: C >= (3/7)*P\n    # To avoid fractional coefficients, multiply both sides by 7\n    m.addConstr(7 * C >= 3 * P, \"CherryProportion\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total syrup usage\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_syrup = optimize_candy_production()\n    if min_syrup is not None:\n        print(f\"Minimum Total Syrup Usage: {min_syrup}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A078",
  "description": "A patient in the hospital can take two pills, Pill 1 and Pill 2. Per pill, pill 1 provides 0.2 units of pain medication and 0.3 units of anxiety medication. Per pill, pill 2 provides 0.6 units of pain medication and 0.2 units of anxiety medication. In addition, pill 1 causes 0.3 units of discharge while pill 2 causes 0.1 units of discharge. At most 6 units of pain medication can be provided and at least 3 units of anxiety medication must be provided. How many pills of each should the patient be given to minimize the total amount of discharge?",
  "ground_truth": 2.3,
  "formulation": null,
  "correct_program": "def optimize_pills(pain_limit=6, anxiety_requirement=3):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Pill_Optimization\")\n\n    # Decision variables: number of pills of each type\n    x1 = model.addVar(name=\"x1\", lb=0, vtype=GRB.INTEGER)  # Type 1 pills\n    x2 = model.addVar(name=\"x2\", lb=0, vtype=GRB.INTEGER)  # Type 2 pills\n\n    # Set the objective: minimize total discharge\n    model.setObjective(0.3 * x1 + 0.1 * x2, GRB.MINIMIZE)\n\n    # Add constraints\n    # Pain medication constraint\n    model.addConstr(0.2 * x1 + 0.6 * x2 <= pain_limit, name=\"PainLimit\")\n    # Anxiety medication constraint\n    model.addConstr(0.3 * x1 + 0.2 * x2 >= anxiety_requirement, name=\"AnxietyReq\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal objective value (minimum discharge)\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n\nprint(optimize_pills())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A079",
  "description": "A man on a strict diet only drinks meal replacement drinks from two brands, alpha and omega. The alpha brand drink contains 30 grams of protein, 20 grams of sugar, and 350 calories per bottle. The omega brand drink contains 20 grams of protein, 15 grams of sugar, and 300 calories per bottle. The man wants to get at least 100 grams of protein and 2000 calories. In addition, because the omega brand drink contains tiny amounts of caffeine, at most 35% of the drink should be omega brand. How many bottles of each should he drink to minimize his sugar intake?",
  "ground_truth": 110.0,
  "formulation": null,
  "correct_program": "def optimize_meal_plan():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MealReplacementOptimization\")\n\n    # Decision variables: number of bottles of alpha and omega\n    x = m.addVar(name=\"alpha_bottles\", lb=0, vtype=GRB.INTEGER)\n    y = m.addVar(name=\"omega_bottles\", lb=0, vtype=GRB.INTEGER)\n\n    # Set the objective: minimize total sugar\n    m.setObjective(20 * x + 15 * y, GRB.MINIMIZE)\n\n    # Add protein constraint\n    m.addConstr(30 * x + 20 * y >= 100, name=\"protein_req\")\n\n    # Add calorie constraint\n    m.addConstr(350 * x + 300 * y >= 2000, name=\"calorie_req\")\n\n    # Add omega proportion constraint\n    # y <= (0.35/0.65) * x\n    m.addConstr(y <= (0.35 / 0.65) * x, name=\"omega_ratio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal sugar intake\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nprint(optimize_meal_plan())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A080",
  "description": "A summer camps does science experiments in two pre filled beakers, beaker 1 and beaker 2. Beaker 1 uses 4 units of flour and 6 units of special liquid to make 5 units of slime. Beaker 2 uses 6 units of flour and 3 units of special liquid to make 3 units of slime.  However, beaker 1 creates 4 units of waste while beaker 2 creates 2 units of waste. The summer camp has available 150 units of flour and 100 units of special liquid. If at most 30 units of waste can be produced, how many of each beaker should be used to maximize the amount of slime produced?",
  "ground_truth": 45.0,
  "formulation": null,
  "correct_program": "def optimize_slime_production(\n    flour_available=150,\n    liquid_available=100,\n    waste_limit=30\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"SlimeProduction\")\n\n    # Decision variables: number of times each beaker is used\n    x1 = model.addVar(vtype=GRB.INTEGER, name=\"Beaker1\")\n    x2 = model.addVar(vtype=GRB.INTEGER, name=\"Beaker2\")\n\n    # Set objective: maximize total slime\n    model.setObjective(5 * x1 + 3 * x2, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    model.addConstr(4 * x1 + 6 * x2 <= flour_available, \"FlourConstraint\")\n    model.addConstr(6 * x1 + 3 * x2 <= liquid_available, \"LiquidConstraint\")\n    model.addConstr(4 * x1 + 2 * x2 <= waste_limit, \"WasteConstraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        return model.objVal\n    else:\n        return None\n# Example usage \nif __name__ == \"__main__\":\n    max_slime = optimize_slime_production()\n    if max_slime is not None:\n        print(f\"Maximum Total Slime Produced: {max_slime}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A081",
  "description": "An dog hospital has 2000 units of tooth medication to make both small and large bones. A small bone requires 10 units of tooth medication and 12 units of meat. A large bone requires 15 units of tooth medication and 15 units of meat. Since most dogs prefer the small bones, at least 50% of the bones made must be small. In addition, the hospital must make at least 30 large bones. How many of each bone should be made to minimize the amount of meat needed?",
  "ground_truth": 810.0,
  "formulation": null,
  "correct_program": "def optimize_bone_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"BoneProduction\")\n\n    # Decision variables\n    # x: number of small bones\n    # y: number of large bones\n    x = m.addVar(vtype=GRB.INTEGER, name=\"small_bones\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"large_bones\", lb=30)\n\n    # Set objective: minimize total meat\n    m.setObjective(12 * x + 15 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Tooth medication constraint\n    m.addConstr(10 * x + 15 * y <= 2000, \"tooth_limit\")\n    # Ratio constraint: at least 50% small bones\n    m.addConstr(x >= y, \"small_ratio\")\n    # Minimum large bones\n    m.addConstr(y >= 30, \"min_large_bones\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total meat used\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_meat = optimize_bone_production()\n    if min_meat is not None:\n        print(f\"Minimum Total Meat Used: {min_meat}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A082",
  "description": "A scientist in the arctic needs to get enough vitamin D and vitamin C in his diet by drinking orange and apple juice. Each box of orange juice contains 10 units of vitamin D and 8 units of vitamin C. Each box of apple juice contains 12 units of vitamin D and 6 units of vitamin C. Since the scientist prefers apple juice, he must drink at least 3 times as many apple juice boxes and orange juice boxes. However, he must also drink at least 3 orange juice boxes. To avoid a vitamin C overdose, the scientist can consume at most 300 units of vitamin C. How many of each juice box should he drink to maximize his total vitamin D intake?",
  "ground_truth": 582.0,
  "formulation": null,
  "correct_program": "def optimize_vitamins():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"VitaminIntakeMaximization\")\n\n    # Decision variables: number of orange and apple juice boxes\n    x = m.addVar(name=\"orange_boxes\", vtype=GRB.INTEGER, lb=3)\n    y = m.addVar(name=\"apple_boxes\", vtype=GRB.INTEGER, lb=0)\n\n    # Set the objective: maximize total vitamin D\n    m.setObjective(10 * x + 12 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Vitamin C constraint\n    m.addConstr(8 * x + 6 * y <= 300, name=\"VitaminC_limit\")\n    # Preference constraint: at least 3 times as many apple as orange\n    m.addConstr(y >= 3 * x, name=\"Preference\")\n    # Minimum orange boxes\n    m.addConstr(x >= 3, name=\"Min_orange\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum vitamin D intake\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_vitamin_d = optimize_vitamins()\n    if max_vitamin_d is not None:\n        print(f\"Maximum Vitamin D Intake: {max_vitamin_d}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A083",
  "description": "A cleaning company uses a cleansing chemical and odor-removing chemical to clean a house. Each unit of the cleansing chemical takes 4 units to be effective while each unit of the odor-removing chemical takes 6 minutes to be effective. The company must use at least 100 units of the cleansing chemical. In total, at least 300 units of chemicals can be used per house. Further, because the cleansing chemical is strong, there can be at most twice the amount of cleansing chemical as odor-removing chemical. How many units of each should be used to minimize the total time it takes for a house to be cleaned?",
  "ground_truth": 700.0,
  "formulation": null,
  "correct_program": "def optimize_chemical_usage():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Chemical_Optimization\")\n\n    # Decision variables\n    # x: units of cleansing chemical\n    # y: units of odor-removing chemical\n    x = m.addVar(name=\"x\", lb=0)\n    y = m.addVar(name=\"y\", lb=0)\n\n    # Set the objective: minimize total cleaning time\n    m.setObjective(4 * x + 6 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    m.addConstr(x >= 100, name=\"min_cleansing\")\n    m.addConstr(x + y <= 300, name=\"total_chemicals\")\n    m.addConstr(x <= 2 * y, name=\"strength_ratio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total time\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_chemical_usage()\n    if min_time is not None:\n        print(f\"Minimum Total Cleaning Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A084",
  "description": "A drug company is making allergy pills and fever reducing pills in two factories, factory 1 and factory 2. Factory 1 produces 20 allergy pills and 15 fever reducing pills per hour. Factory 2 produces 10 allergy pills and 30 fever reducing pills per hour.  Factory 1 is much more efficient and only requires 20 units of a rare compound while factory 2 requires 30 units of a rare compound. The company only has available 1000 units of the rare compound. If the company must make at least 700 allergy pills and 600 fever reducing pills, how many hours should each factory be run to minimize the total time needed?",
  "ground_truth": 27.5,
  "formulation": null,
  "correct_program": "def optimize_factory_hours():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Factory_Production_MinHours\")\n\n    # Decision variables: hours to run each factory\n    x1 = m.addVar(name=\"x1\", lb=0)\n    x2 = m.addVar(name=\"x2\", lb=0)\n    max_hour = m.addVar(name=\"max_hour\", lb=0)\n\n    # Set the objective: minimize total hours\n    m.setObjective(max_hour, GRB.MINIMIZE)\n\n    # Add production constraints\n    m.addConstr(20 * x1 + 10 * x2 >= 700, name=\"Allergy_Pills\")\n    m.addConstr(15 * x1 + 30 * x2 >= 600, name=\"Fever_Pills\")\n\n    # Add resource constraint\n    m.addConstr(20 * x1 + 30 * x2 <= 1000, name=\"Rare_Compound\")\n\n    # Add maximum hour constraint\n    m.addConstr(max_hour >= x1, name=\"Max_Hour_x1\")\n    m.addConstr(max_hour >= x2, name=\"Max_Hour_x2\")\n    \n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total hours\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nprint(optimize_factory_hours())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A085",
  "description": "A doctor recommends her patient eat more fish and chicken to increase her protein and iron intake. Each fish meal contains 10 units of protein and 12 units of iron. Each chicken meal contains 15 units of protein and 8 units of iron. The patient needs to consume at least 130 units of protein and 120 units of iron. Since the chicken meal is less expensive, the patient prefers to consume at least twice as many chicken meals as fish meals. If each fish meal contains 7 units of fat and each chicken meal contains 10 units of fat, how many meals of each should she eat to minimize her fat intake?",
  "ground_truth": 118.0,
  "formulation": null,
  "correct_program": "def optimize_meal_plan():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MealOptimization\")\n\n    # Decision variables: number of fish and chicken meals\n    x = m.addVar(name=\"fish_meals\", lb=0, vtype=GRB.INTEGER)\n    y = m.addVar(name=\"chicken_meals\", lb=0, vtype=GRB.INTEGER)\n\n    # Set the objective: minimize total fat intake\n    m.setObjective(7 * x + 10 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Protein constraint\n    m.addConstr(10 * x + 15 * y >= 130, name=\"protein_req\")\n    # Iron constraint\n    m.addConstr(12 * x + 8 * y >= 120, name=\"iron_req\")\n    # Preference constraint\n    m.addConstr(y >= 2 * x, name=\"chicken_pref\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total fat intake\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nprint(optimize_meal_plan())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A086",
  "description": "A pharmaceutical company makes skin cream in batches, a regular batch and premium batch, to sell to hospitals. The regular batch requires 50 units of medicinal ingredients and 40 units of rehydration product. A premium batch requires 40 units of medicinal ingredients and 60 units of rehydration product. The company has available 3000 units of medicinal ingredients and 3500 units of rehydration product. Since the premium batch sells better, the number of regular batches must be less than the number of premium batches. In addition, the company must make at least 10 regular batches. If a regular batch can treat 50 people and a premium batch can treat 30 people, how many of each batch should be made to maximize the number of people that can be treated?",
  "ground_truth": 2650.0,
  "formulation": null,
  "correct_program": "def optimize_batches(\n    min_regular_batches=10,\n    max_resource_medicinal=3000,\n    max_resource_rehydration=3500\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Batch_Production_Optimization\")\n\n    # Decision variables\n    # x: number of regular batches\n    # y: number of premium batches\n    x = model.addVar(name=\"x\", vtype=GRB.INTEGER, lb=min_regular_batches)\n    y = model.addVar(name=\"y\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: maximize total number of treated people\n    model.setObjective(50 * x + 30 * y, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    model.addConstr(50 * x + 40 * y <= max_resource_medicinal, \"Medicinal\")\n    model.addConstr(40 * x + 60 * y <= max_resource_rehydration, \"Rehydration\")\n\n    # Add batch relationship constraint: x < y\n    # Since variables are integers, x <= y - 1\n    model.addConstr(x <= y - 1, \"BatchRelation\")\n\n    # Optional: To ensure logical bounds, but already set lb for x\n    # model.addConstr(x >= 10, \"MinRegularBatches\") # Already set lb=10\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum total treated people\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_treated_people = optimize_batches()\n    if max_treated_people is not None:\n        print(f\"Maximum Total Number of Treated People: {max_treated_people}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A087",
  "description": "A clinic takes patient blood pressure either using an automatic machine or a manual machine. The automatic machine takes 10 minutes per patient while the manual machine takes 15 minutes per patient. Since the automatic machine frequently breaks, at least twice as many patients must have their blood pressure taken by the manual machine than the automatic machine. However, at least 20 patient can be processed by the automatic machine. If the clinic is open for 20000 minutes, maximize the number of patients whose blood pressure can be taken.",
  "ground_truth": 1500.0,
  "formulation": null,
  "correct_program": "def maximize_patients(open_minutes=20000, time_auto=10, time_manual=15, min_auto=20):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"BloodPressureScheduling\")\n\n    # Decision variables\n    x = model.addVar(name=\"automatic_patients\", vtype=GRB.INTEGER, lb=0)\n    y = model.addVar(name=\"manual_patients\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: maximize total patients\n    model.setObjective(x + y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Time constraint\n    model.addConstr(time_auto * x + time_manual * y <= open_minutes, name=\"time_limit\")\n    # Manual patients at least twice automatic\n    model.addConstr(y >= 2 * x, name=\"manual_at_least_twice_auto\")\n    # Minimum automatic patients\n    model.addConstr(x >= min_auto, name=\"min_auto\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum number of patients served\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_patients = maximize_patients()\n    if max_patients is not None:\n        print(f\"Maximum Number of Patients Served: {max_patients}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A088",
  "description": "A patient with a sore throat can drink two syrups, syrup 1 and syrup 2 for treatment. Per serving, syrup 1 delivers 0.5 units of medicine to the throat and 0.4 units of medicine to the lungs. Per serving, syrup 2 delivers 0.2 units of medicine to the throat and 0.5 units of medicine to the lungs. Furthermore, syrup 1 contains 0.5 units of sugar while syrup 2 contains 0.3 units of sugar per serving. The patient can get at most 5 units of medicine for the throat and at least 4 units of medicine to the lungs. How many servings of each should the patient take to minimize his sugar intake?",
  "ground_truth": 2.4,
  "formulation": null,
  "correct_program": "def optimize_syrup_intake():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"SyrupOptimization\")\n\n    # Decision variables: number of servings of each syrup\n    x1 = m.addVar(name=\"x1\", lb=0)\n    x2 = m.addVar(name=\"x2\", lb=0)\n\n    # Set the objective: minimize sugar intake\n    m.setObjective(0.5 * x1 + 0.3 * x2, GRB.MINIMIZE)\n\n    # Add constraints\n    m.addConstr(0.5 * x1 + 0.2 * x2 <= 5, name=\"ThroatMedicine\")\n    m.addConstr(0.4 * x1 + 0.5 * x2 >= 4, name=\"LungMedicine\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n\n# Example usage\nprint(optimize_syrup_intake())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A089",
  "description": "A sailor can eat either a crab cakes or a lobster roll for his meals. He needs to ensure he gets at least 80 units of vitamin A and 100 units of vitamin C. Each crab cake contains 5 units of vitamin A and 7 units of vitamin C. Each lobster roll contains 8 units of vitamin A and 4 units of vitamin C. In addition, since lobster is more expensive, at most 40% of his meals should be lobster rolls. If each crab cake contains 4 units of unsaturated fat and each lobster roll contains 6 units of unsaturated fat, how many of each should he eat to minimize his unsaturated fat intake?",
  "ground_truth": 64.0,
  "formulation": null,
  "correct_program": "def optimize_meal_plan():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MealOptimization\")\n\n    # Decision variables: number of crab cakes and lobster rolls\n    x = m.addVar(name=\"crab_cakes\", lb=0, vtype=GRB.INTEGER)\n    y = m.addVar(name=\"lobster_rolls\", lb=0, vtype=GRB.INTEGER)\n\n    # Set the objective: minimize total unsaturated fat\n    m.setObjective(4 * x + 6 * y, GRB.MINIMIZE)\n\n    # Add vitamin A constraint\n    m.addConstr(5 * x + 8 * y >= 80, name=\"VitaminA\")\n    # Add vitamin C constraint\n    m.addConstr(7 * x + 4 * y >= 100, name=\"VitaminC\")\n    # Add meal composition constraint (lobster at most 40%)\n    m.addConstr(y <= (2/3) * x, name=\"LobsterRatio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal objective value\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_fat = optimize_meal_plan()\n    if min_fat is not None:\n        print(f\"Minimum Total Unsaturated Fat: {min_fat}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A090",
  "description": "A science show preforms two different demonstrations, demonstration 1 and demonstration 2. In demonstration 1, 10 units of mint and 20 units of the active ingredient is used to make 25 units of minty foam. In demonstration 2, 12 units of mint and 15 units of the active ingredient is used to make 18 units of minty foam. In addition, demonstration 1 creates 5 units of black tar while demonstration 2 creates 3 units of black tar. The show has available 120 units of mint and 100 units of active ingredients. If at most 50 units of black tar can be produced, how many of each demonstration should be done to maximize the amount of minty foam produced?",
  "ground_truth": 125.0,
  "formulation": null,
  "correct_program": "def optimize_minty_foam():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    model = Model(\"MintyFoamOptimization\")\n    \n    # Decision variables: number of demonstrations\n    x1 = model.addVar(vtype=GRB.INTEGER, name=\"Demo1\")\n    x2 = model.addVar(vtype=GRB.INTEGER, name=\"Demo2\")\n    \n    # Set the objective: maximize total minty foam\n    model.setObjective(25 * x1 + 18 * x2, GRB.MAXIMIZE)\n    \n    # Add resource constraints\n    model.addConstr(10 * x1 + 12 * x2 <= 120, \"MintConstraint\")\n    model.addConstr(20 * x1 + 15 * x2 <= 100, \"ActiveIngredientConstraint\")\n    model.addConstr(5 * x1 + 3 * x2 <= 50, \"BlackTarConstraint\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        return model.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_minty_foam = optimize_minty_foam()\n    if max_minty_foam is not None:\n        print(f\"Maximum Total Minty Foam Produced: {max_minty_foam}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A091",
  "description": "A lab has 20000 mg of mRNA anti-viral available to make children's and adult vaccines. Each children's vaccine contains 50 mg of mRNA and 50 mg of fever suppressant. Each adult vaccine contains 75 mg of mRNA and 75 mg of fever suppressant. Since adult vaccines are more essential, at least 70% of vaccines should be adult vaccines. However, at least 50 children's vaccines should be made. How many of each vaccine should be made to minimize the amount of fever suppressant used?",
  "ground_truth": 11275.0,
  "formulation": null,
  "correct_program": "def optimize_vaccine_production(\n    total_mrna=20000,\n    min_children=50,\n    adult_ratio=0.7,\n    children_mrna=50,\n    children_fever=50,\n    adult_mrna=75,\n    adult_fever=75\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Vaccine_Production_Optimization\")\n    \n    # Decision variables: number of children's and adult vaccines\n    x = model.addVar(vtype=GRB.INTEGER, lb=0, name=\"Children\")\n    y = model.addVar(vtype=GRB.INTEGER, lb=0, name=\"Adult\")\n    \n    # Set the objective: minimize total fever suppressant\n    model.setObjective(children_fever * x + adult_fever * y, GRB.MINIMIZE)\n    \n    # Add resource constraint (mRNA availability)\n    model.addConstr(children_mrna * x + adult_mrna * y <= total_mrna, \"mRNA_constraint\")\n    \n    # Add ratio constraint: y >= (7/3) * x\n    model.addConstr(y >= (7/3) * x, \"adult_ratio_constraint\")\n    \n    # Add minimum children's vaccines constraint\n    model.addConstr(x >= min_children, \"min_children_constraint\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the minimum total fever suppressant used\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_fever_suppressant = optimize_vaccine_production()\n    if min_fever_suppressant is not None:\n        print(f\"Minimum Total Fever Suppressant Used: {min_fever_suppressant}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A092",
  "description": "A parent feeds their baby two flavors of baby food, apple and carrot, in order to meet the babies fat and folate requirements. Each serving of apple flavored baby food contains 2 units of fat and 5 units of folate. Each serving of carrot flavored baby food contains 4 units of fat and 3 units of folate. The baby does not like the carrot flavor, and therefore he must eat three times as many apple flavored baby food as carrot flavored baby food. However, he must eat at least 2 servings of carrot flavored baby food. If the baby can consume at most 100 units of folate, how many servings of each should he eat to maximize his fat intake?",
  "ground_truth": 55.55555555555556,
  "formulation": null,
  "correct_program": "def optimize_baby_food():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"BabyFoodOptimization\")\n    \n    # Decision variables\n    # Since servings are discrete, define as integer variables\n    C = m.addVar(name=\"C\", lb=2)  # Carrot servings, at least 2\n    A = m.addVar(name=\"A\", lb=0)        # Apple servings\n    \n    # Add the preference constraint: A = 3 * C\n    m.addConstr(A == 3 * C, name=\"preference\")\n    \n    # Add the folate constraint: 5A + 3C <= 100\n    m.addConstr(5 * A + 3 * C <= 100, name=\"folate_limit\")\n    \n    # Objective: maximize total fat intake = 2A + 4C\n    m.setObjective(2 * A + 4 * C, GRB.MAXIMIZE)\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum fat intake\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nprint(optimize_baby_food())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A093",
  "description": "Both fertilizer and seeds need to be added to a lawn. One unit of fertilizer takes 0.5 minutes to be effective while one unit of seeds takes 1.5 minutes to be effective. There can be at most 300 units of fertilizer and seeds combined added to the lawn. In addition at least 50 units of fertilizer need to be added. Since the lawn is really patchy, there can be at most twice the amount of fertilizer as seeds. How many units of each should be added to minimize the total time it takes for the lawn to be ready?",
  "ground_truth": 37.5,
  "formulation": null,
  "correct_program": "def optimize_lawn_treatment():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"LawnTreatment\")\n\n    # Decision variables\n    # F: units of fertilizer\n    # S: units of seeds\n    # T: total time (auxiliary variable)\n    F = m.addVar(name=\"F\", lb=0, vtype=GRB.INTEGER)\n    S = m.addVar(name=\"S\", lb=0, vtype=GRB.INTEGER)\n    T = m.addVar(name=\"T\", lb=0, vtype=GRB.CONTINUOUS)\n\n    # Set objective: minimize total time T\n    m.setObjective(T, GRB.MINIMIZE)\n\n    # Add constraints\n    m.addConstr(F + S <= 300, name=\"TotalUnits\")\n    m.addConstr(F >= 50, name=\"MinFertilizer\")\n    m.addConstr(F <= 2 * S, name=\"FertilizerSeedsRatio\")\n    m.addConstr(T >= 0.5 * F, name=\"TimeFertilizer\")\n    m.addConstr(T >= 1.5 * S, name=\"TimeSeeds\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_lawn_treatment()\n    if min_time is not None:\n        print(f\"Minimum Total Time for Lawn Treatment: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A094",
  "description": "A pharmacy has two factories, factory 1 and factory 2, where they make acne cream and anti-bacterial cream. Factory 1 produces 12 units of acne cream and 15 units of anti-bacterial cream per hour. Factory 2 produces 20 units of acne cream and 10 units of anti-bacterial cream per hour. Factory 1 requires 30 units of base gel per hour while factory 2 requires 45 units of base gel per hour. The pharmacy has available 5000 units of base gel. Further, they must make at least 800 units of acne cream and 1000 units of anti-bacterial cream. How many hours should each factory be run to minimize the total time needed?",
  "ground_truth": 40.0,
  "formulation": null,
  "correct_program": "def optimize_factory_hours():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"FactoryOptimization\")\n\n    # Decision variables: hours each factory runs\n    t1 = m.addVar(name=\"t1\", lb=0)\n    t2 = m.addVar(name=\"t2\", lb=0)\n    max_hour = m.addVar(name=\"max_hour\", lb=0)\n\n    # Set the objective: minimize total hours\n    m.setObjective(max_hour, GRB.MINIMIZE)\n\n    # Add constraints\n    # Acne cream production constraint\n    m.addConstr(12 * t1 + 20 * t2 >= 800, name=\"AcneProduction\")\n    # Anti-bacterial cream production constraint\n    m.addConstr(15 * t1 + 10 * t2 >= 1000, name=\"AntiBacterialProduction\")\n    # Base gel resource constraint\n    m.addConstr(30 * t1 + 45 * t2 <= 5000, name=\"BaseGelLimit\")\n    # Maximum hours constraint\n    m.addConstr(t1 <= max_hour, name=\"MaxHoursT1\")\n    m.addConstr(t2 <= max_hour, name=\"MaxHoursT2\")\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total hours\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nprint(optimize_factory_hours())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A095",
  "description": "A doctor recommends that a man eat burgers and pizza in order to put on weight. Each burger contains 10 units of fat and 300 calories. Each slice of pizza contains 8 units of fat and 250 calories. The man must get at least 130 units of fat and 3000 calories. Further, each burger contains 12 units of cholesterol while each slice of pizza contains 10 units of cholesterol. Since burgers are slightly more expensive, the man decides to eat at least twice as many slices of pizza as burgers. How many of each should he eat to minimize his cholesterol intake?",
  "ground_truth": 160.0,
  "formulation": null,
  "correct_program": "def optimize_cholesterol():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Minimize Cholesterol Intake\")\n\n    # Decision variables: number of burgers (x) and slices of pizza (y)\n    # Both are integers and >= 0\n    x = m.addVar(name=\"burgers\", vtype=GRB.INTEGER, lb=0)\n    y = m.addVar(name=\"pizza_slices\", vtype=GRB.INTEGER, lb=0)\n\n    # Set the objective: minimize total cholesterol\n    m.setObjective(12 * x + 10 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    m.addConstr(10 * x + 8 * y >= 130, name=\"fat_constraint\")\n    m.addConstr(300 * x + 250 * y >= 3000, name=\"calorie_constraint\")\n    m.addConstr(y >= 2 * x, name=\"pizza_burger_ratio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cholesterol = optimize_cholesterol()\n    if min_cholesterol is not None:\n        print(f\"Minimum Cholesterol Intake: {min_cholesterol}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A096",
  "description": "A clinic makes batches of vitamin shots and pills. Each batch of vitamin shots requires 30 units of vitamin C and 40 units of vitamin D. Each batch of vitamin pills requires 50 units of vitamin C and 30 units of vitamin D. Since pills are more popular, the number of batches of vitamin pills must be larger than the number of batches of vitamin shots. Further, the clinic can make at most 10 batches of vitamin shots. The clinic has available 1200 units of vitamin C and 1500 units of vitamin D. If each batch of vitamin shots can supply 10 people and each batch of vitamin pills can supply 7 people, how many batches of each should be made to maximize the number of people that can be supplied?",
  "ground_truth": 226.0,
  "formulation": null,
  "correct_program": "def optimize_vitamin_batches():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Vitamin_Batches\")\n\n    # Decision variables\n    # x: batches of vitamin shots\n    # y: batches of vitamin pills\n    x = m.addVar(vtype=GRB.INTEGER, name=\"x\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"y\", lb=0)\n\n    # Set the objective: maximize total people served\n    m.setObjective(10 * x + 7 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(30 * x + 50 * y <= 1200, \"VitaminC\")\n    m.addConstr(40 * x + 30 * y <= 1500, \"VitaminD\")\n    # Replace the strict inequality y > x with y >= x + 1\n    m.addConstr(y >= x + 1, \"BatchSizeRelation\")\n    m.addConstr(x <= 10, \"MaxShots\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum number of people served\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_people_served = optimize_vitamin_batches()\n    if max_people_served is not None:\n        print(f\"Maximum People Served: {max_people_served}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A097",
  "description": "A doctor's office takes the  temperature of patients one by one either by using an electronic or regular thermometer. The electronic thermometer takes 3 minutes to make a reading while the regular thermometer takes 2 minutes to make a reading. Since the electronic thermometer is more accurate, at least twice as many patients should have their temperature checked by the electronic thermometer than the regular thermometer. Since the electronic thermometer has a cooldown time, at least 50 patients should have their temperature checked by a regular thermometer. If the office is open for 15000 minutes, maximize the number of patients whose temperature can be taken?",
  "ground_truth": 5625.0,
  "formulation": null,
  "correct_program": "def maximize_patients(time_available=15000, min_regular=50):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Maximize_Patients\")\n\n    # Decision variables: number of patients checked with each thermometer\n    x = model.addVar(vtype=GRB.INTEGER, name=\"electronic\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"regular\")\n\n    # Set the objective: maximize total patients\n    model.setObjective(x + y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Time constraint\n    model.addConstr(3 * x + 2 * y <= time_available, \"TimeLimit\")\n    # Accuracy constraint\n    model.addConstr(x >= 2 * y, \"Accuracy\")\n    # Minimum regular thermometer patients\n    model.addConstr(y >= min_regular, \"MinRegular\")\n    # Non-negativity is implicit in variable definition\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum number of patients served\n        return int(model.objVal)\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_patients = maximize_patients()\n    if max_patients is not None:\n        print(f\"Maximum Number of Patients Served: {max_patients}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A098",
  "description": "A patient can be hooked up to two machines to have medicine delivered, machine 1 and machine 2. Machine 1 delivers 0.5 units of medicine to the heart per minute and 0.8 units of medicine per minute to the brain. Machine 2 delivers 0.3 units of medicine per minute to the heart and 1 unit of medicine per minute to the brain. In addition however, machine 1 creates 0.3 units of waste per minute while machine 2 creates 0.5 units of waste per minute. If at most 8 units of medicine can be received by the heart and at least 4 units of medicine should be received by the brain, how many minutes should each machine be used to minimize the total amount of waste produced?",
  "ground_truth": 1.5,
  "formulation": null,
  "correct_program": "def optimize_machine_usage():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MedicineDeliveryWasteMinimization\")\n\n    # Decision variables: usage time of each machine\n    t1 = m.addVar(name=\"t1\", lb=0)  # Machine 1 usage time\n    t2 = m.addVar(name=\"t2\", lb=0)  # Machine 2 usage time\n\n    # Set objective: minimize total waste\n    m.setObjective(0.3 * t1 + 0.5 * t2, GRB.MINIMIZE)\n\n    # Add constraints\n    # Medicine delivered to the heart\n    m.addConstr(0.5 * t1 + 0.3 * t2 <= 8, name=\"HeartDelivery\")\n    # Medicine delivered to the brain\n    m.addConstr(0.8 * t1 + 1.0 * t2 >= 4, name=\"BrainDelivery\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total waste\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_waste = optimize_machine_usage()\n    if min_waste is not None:\n        print(f\"Minimum Total Waste: {min_waste}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A099",
  "description": "A travelling salesman only eats ramen and fries. Each pack of ramen contains 400 calories, 20 grams of protein, and 100 mg of sodium. Each pack of fries contains 300 calories, 10 grams of protein, and 75 mg of sodium. Since fries are easier to eat while driving, at most 30% of his meals can be ramen. The salesman wants to ensure he eats at least 3000 calories and 80 grams of protein. How many of each should he eat to minimize his sodium intake?",
  "ground_truth": 750.0,
  "formulation": null,
  "correct_program": "def optimize_meal(min_calories=3000, min_protein=80):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"MealOptimization\")\n\n    # Decision variables: number of ramen and fries packs\n    R = model.addVar(name=\"R\", lb=0)\n    F = model.addVar(name=\"F\", lb=0)\n\n    # Objective: minimize total sodium intake\n    sodium = 100 * R + 75 * F\n    model.setObjective(sodium, GRB.MINIMIZE)\n\n    # Nutritional constraints\n    model.addConstr(400 * R + 300 * F >= min_calories, name=\"Calories\")\n    model.addConstr(20 * R + 10 * F >= min_protein, name=\"Protein\")\n\n    # Proportion constraint: R <= 0.3*(R+F)\n    # Simplified to 7 R <= 3 F\n    model.addConstr(7 * R <= 3 * F, name=\"RamenProportion\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the minimal sodium intake\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_sodium = optimize_meal()\n    if min_sodium is not None:\n        print(f\"Minimum Sodium Intake: {min_sodium}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A100",
  "description": "A science store makes two boxes, a cheap and expensive box. The cheap box contains 3 units of metal and 5 units of acid which can be mixed to create 8 units of foam. The expensive box contains 5 units of metal and 8 units of acid which can be mixed to create 10 units of foam. The cheap box however gives off 2 units of heat while the expensive box gives off 3 units of heat. The science store has available 200 units of metal and 300 units of acid. If at most 50 units of heat can be given off, how many of each box should the store make to maximize the amount of foam produced?",
  "ground_truth": 200.0,
  "formulation": null,
  "correct_program": "def optimize_foam(max_metal=200, max_acid=300, max_heat=50):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"FoamProduction\")\n\n    # Decision variables: number of cheap and expensive boxes\n    x = model.addVar(vtype=GRB.INTEGER, name=\"CheapBoxes\", lb=0)\n    y = model.addVar(vtype=GRB.INTEGER, name=\"ExpensiveBoxes\", lb=0)\n\n    # Set the objective: maximize foam\n    model.setObjective(8 * x + 10 * y, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    model.addConstr(3 * x + 5 * y <= max_metal, \"MetalConstraint\")\n    model.addConstr(5 * x + 8 * y <= max_acid, \"AcidConstraint\")\n    model.addConstr(2 * x + 3 * y <= max_heat, \"HeatConstraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        return model.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_foam = optimize_foam()\n    if max_foam is not None:\n        print(f\"Maximum Foam Produced: {max_foam}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A101",
  "description": "A pharmacy has 3000 mg of morphine to make painkillers and sleeping pills. Each painkiller pill requires 10 mg of morphine and 3 units of digestive medicine. Each sleeping pill requires 6 mg of morphine and 5 units of digestive medicine. The pharmacy needs to make at least 50 painkiller pills. Since sleeping pills are more popular, at least 70% of the pills should be sleeping pills. How many of each should the pharmacy make to minimize the total amount of digestive medicine needed?",
  "ground_truth": 735.0,
  "formulation": null,
  "correct_program": "def optimize_pills():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"pharmacy_pills\")\n\n    # Decision variables: number of pills\n    x = m.addVar(name=\"painkiller\", lb=50, vtype=GRB.INTEGER)\n    y = m.addVar(name=\"sleeping\", lb=0, vtype=GRB.INTEGER)\n\n    # Set objective: minimize total digestive medicine\n    m.setObjective(3 * x + 5 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Morphine constraint\n    m.addConstr(10 * x + 6 * y <= 3000, name=\"morphine_limit\")\n    # Sleeping pills ≥ 70% of total pills\n    m.addConstr(y >= (7/3) * x, name=\"sleeping_ratio\")\n    # x ≥ 50 is already enforced by lb=50\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_digestive_medicine = optimize_pills()\n    if min_digestive_medicine is not None:\n        print(f\"Minimum Total Digestive Medicine: {min_digestive_medicine}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A102",
  "description": "A boy needs to get enough magnesium and zinc in his diet by eating chewable gummies and taking pills. Each gummy contains 3 units of magnesium and 4 units of zinc. Each pill contains 2 units of magnesium and 5 units of zinc. The boy must take at least 10 pills. Since he prefers gummies more, he must eat at least 3 times the amount of gummies as pills. If the boy can consume at most 200 units of magnesium, how many of each should he eat to maximize his zinc intake?",
  "ground_truth": 306.0,
  "formulation": null,
  "correct_program": "def optimize_diet(max_magnesium=200, min_pills=10, ratio_gummies_to_pills=3):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Magnesium_Zinc_Optimization\")\n    \n    # Decision variables: number of gummies and pills\n    x = m.addVar(name=\"Gummies\", lb=0, vtype=GRB.INTEGER)\n    y = m.addVar(name=\"Pills\", lb=0, vtype=GRB.INTEGER)\n    \n    # Set the objective: maximize zinc intake\n    m.setObjective(4 * x + 5 * y, GRB.MAXIMIZE)\n    \n    # Add constraints\n    m.addConstr(y >= min_pills, \"MinPills\")\n    m.addConstr(x >= ratio_gummies_to_pills * y, \"GummiesPillsRatio\")\n    m.addConstr(3 * x + 2 * y <= max_magnesium, \"MagnesiumLimit\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum zinc intake\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nprint(optimize_diet())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A103",
  "description": "A patient takes anxiety medication and anti-depressants one after the other. Each unit of anxiety medication takes 3 minutes to be effective while each unit of anti-depressant takes 5 minutes to be effective. The patient must take at least 100 units of medication and at least 30 should be anxiety medication. Since the anxiety medication is strong, the patient can take at most twice the amount of anxiety medication as anti-depressants. How many units of each should the patient take to minimize the total time it take for the medication to be effective?",
  "ground_truth": 368.0,
  "formulation": null,
  "correct_program": "def optimize_medication_time(\n    min_total_units=100,\n    min_anxiety_units=30,\n    max_ratio=2\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Medication_Minimize_Time\")\n\n    # Decision variables: number of units of each medication\n    x = model.addVar(name=\"x\", lb=0, vtype=GRB.INTEGER)  # anxiety medication\n    y = model.addVar(name=\"y\", lb=0, vtype=GRB.INTEGER)  # anti-depressants\n\n    # Set objective: minimize total time\n    model.setObjective(3 * x + 5 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    model.addConstr(x + y >= min_total_units, name=\"total_units\")\n    model.addConstr(x >= min_anxiety_units, name=\"min_anxiety\")\n    model.addConstr(x <= max_ratio * y, name=\"ratio_constraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the minimal total time\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_medication_time()\n    if min_time is not None:\n        print(f\"Minimum Total Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A104",
  "description": "A pharmacy makes eye cream and foot cream using two different machines, machine 1 and machine 2. Machine 1 can  make 30 ml of eye cream and 60 ml of foot cream per hour. Machine 2 can make 45 ml of eye cream and 30 ml of foot cream per hour. Furthermore, machine 1 requires 20 ml of distilled water per hour while machine 2 requires 15 ml of distilled water per hour. The pharmacy has available 1200 ml of distilled water. If the pharmacy needs to make at least 1300 ml of eye cream and 1500 ml of foot cream, how many hours should each machine be used to minimize the total time needed?",
  "ground_truth": 17.333333333333332,
  "formulation": null,
  "correct_program": "def optimize_machine_hours(\n    production_eye_target=1300,\n    production_foot_target=1500,\n    water_available=1200\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Machine_Usage_Minimization\")\n\n    # Decision variables: hours of machine 1 and machine 2\n    x1 = model.addVar(name=\"x1\", lb=0)\n    x2 = model.addVar(name=\"x2\", lb=0)\n    max_hour = model.addVar(name=\"max_hour\", lb=0)\n\n    # Set objective: minimize total hours\n    model.setObjective(max_hour, GRB.MINIMIZE)\n\n    # Add production constraints\n    model.addConstr(30 * x1 + 45 * x2 >= production_eye_target, name=\"EyeCream\")\n    model.addConstr(60 * x1 + 30 * x2 >= production_foot_target, name=\"FootCream\")\n\n    # Add water constraint\n    model.addConstr(20 * x1 + 15 * x2 <= water_available, name=\"WaterLimit\")\n\n    # Add maximum hour constraints\n    model.addConstr(max_hour >= x1, name=\"MaxHour_x1\")\n    model.addConstr(max_hour >= x2, name=\"MaxHour_x2\")\n    \n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the minimal total time\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nprint(optimize_machine_hours())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A105",
  "description": "A woman eats cashews and almonds to get her calorie and protein intake. A serving of almonds contains 200 calories and 20 grams of protein. A serving of cashews contains 300 calories and 25 grams of protein. The woman decides to eat at least twice as many servings of almonds as cashews. Furthermore, a serving of almonds contains 15 grams of fat while a serving of cashews contains 12 grams of fat. If the woman needs to consume at least 10000 calories and 800 grams of protein this week, how many servings of each should she eat to minimize her fat intake?",
  "ground_truth": 600.0,
  "formulation": null,
  "correct_program": "def optimize_nut_intake():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"nut_intake_min_fat\")\n\n    # Decision variables: servings of almonds and cashews\n    x_A = m.addVar(name=\"almond_servings\", lb=0)\n    x_C = m.addVar(name=\"cashew_servings\", lb=0)\n\n    # Set the objective: minimize total fat intake\n    m.setObjective(15 * x_A + 12 * x_C, GRB.MINIMIZE)\n\n    # Add constraints\n    # Calorie constraint\n    m.addConstr(200 * x_A + 300 * x_C >= 10000, name=\"calories\")\n    # Protein constraint\n    m.addConstr(20 * x_A + 25 * x_C >= 800, name=\"protein\")\n    # Servings ratio constraint\n    m.addConstr(x_A >= 2 * x_C, name=\"ratio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal value of the objective function\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_fat = optimize_nut_intake()\n    if min_fat is not None:\n        print(f\"Minimum Total Fat Intake: {min_fat}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A106",
  "description": "A company make both liquid and foam hand sanitizer. Liquid hand sanitizer requires 40 units of water and 50 units of alcohol. Foam hand sanitizer requires 60 units of water and 40 units of alcohol. The company has available 2000 units of water and 2100 units of alcohol. The number of foam hand sanitizers made must exceed the number of liquid hand sanitizers. In addition, at most 30 liquid hand sanitizers can be made. If each liquid hand sanitizer can clean 30 hands and each foam hand sanitizer can clean 20 hands, how many of each should the company make to maximize the number of hands that can be cleaned?",
  "ground_truth": 970.0,
  "formulation": null,
  "correct_program": "def optimize_hand_sanitizer_production(\n    water_available=2000,\n    alcohol_available=2100,\n    max_liquid=30\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"SanitizerProduction\")\n\n    # Decision variables: number of liquid and foam sanitizers\n    L = model.addVar(vtype=GRB.INTEGER, name=\"Liquid\")\n    F = model.addVar(vtype=GRB.INTEGER, name=\"Foam\")\n\n    # Set objective: maximize total cleaned hands\n    model.setObjective(30 * L + 20 * F, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    model.addConstr(40 * L + 60 * F <= water_available, \"WaterLimit\")\n    model.addConstr(50 * L + 40 * F <= alcohol_available, \"AlcoholLimit\")\n\n    # Add production constraints\n    model.addConstr(F >= L + 1, \"FoamExceedsLiquid\")\n    model.addConstr(L <= max_liquid, \"LiquidMax\")\n    model.addConstr(L >= 0, \"LiquidNonNeg\")\n    model.addConstr(F >= 0, \"FoamNonNeg\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum number of hands cleaned\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_hands_cleaned = optimize_hand_sanitizer_production()\n    if max_hands_cleaned is not None:\n        print(f\"Maximum Number of Hands Cleaned: {max_hands_cleaned}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A107",
  "description": "A clinic is conducting a throat or nasal swabs on each patient. A throat swab takes 5 minutes while a nasal swab takes 3 minutes. The clinic must administer at least 30 nasal swabs. Since the nasal swab is more uncomfortable, at least 4 times as many throat swabs must be done as nasal swabs. If the clinic is only operational for 20000 minutes, how many of each swab should be done to maximize the number of patients seen?",
  "ground_truth": 4347.0,
  "formulation": null,
  "correct_program": "def optimize_swabs(time_limit=20000, min_nasal=30, ratio=4):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Swab Optimization\")\n    \n    # Decision variables: number of throat and nasal swabs\n    T = model.addVar(name=\"ThroatSwabs\", vtype=GRB.INTEGER, lb=0)\n    N = model.addVar(name=\"NasalSwabs\", vtype=GRB.INTEGER, lb=0)\n    \n    # Set the objective: maximize total number of patients (swabs)\n    model.setObjective(T + N, GRB.MAXIMIZE)\n    \n    # Add constraints\n    # Time constraint\n    model.addConstr(5 * T + 3 * N <= time_limit, name=\"TimeLimit\")\n    # Minimum nasal swabs\n    model.addConstr(N >= min_nasal, name=\"MinNasal\")\n    # Throat to nasal ratio\n    model.addConstr(T >= ratio * N, name=\"ThroatNasalRatio\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum total number of patients served\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_patients = optimize_swabs()\n    if max_patients is not None:\n        print(f\"Maximum Number of Patients Served: {max_patients}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A108",
  "description": "A patient in the hospital can take two different pain killers, pain killer 1 and pain killer 2. Per dose, pain killer 1 delivers 0.5 units of medicine to the legs and 0.8 units of medicine to the back. Per dose, pain killer 2 delivers 0.7 units of medicine to the legs and 0.4 units of medicine to the back. In, addition pain killer 1 deliver 0.3 units of sleeping medicine and pain killer 2 delivers 0.6 units of sleeping medicine. At most 8 units of sleep medicine should be delivered and at least 4 units of medicine should be delivered to the legs. How many doses of each should be taken to maximize the amount of medicine delivered to the back?",
  "ground_truth": 20.8,
  "formulation": null,
  "correct_program": "def optimize_pain_killers():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"PainKillerOptimization\")\n\n    # Decision variables: doses of pain killer 1 and 2\n    x1 = m.addVar(name=\"PainKiller1\", lb=0, vtype=GRB.INTEGER)\n    x2 = m.addVar(name=\"PainKiller2\", lb=0, vtype=GRB.INTEGER)\n\n    # Set the objective: maximize back medicine\n    m.setObjective(0.8 * x1 + 0.4 * x2, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Sleep medicine constraint\n    m.addConstr(0.3 * x1 + 0.6 * x2 <= 8, name=\"SleepLimit\")\n    # Leg medicine constraint\n    m.addConstr(0.5 * x1 + 0.7 * x2 >= 4, name=\"LegRequirement\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal value of the objective function\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n\n# Example usage\nprint(optimize_pain_killers())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A109",
  "description": "A zookeeper feeds a gorilla with bananas and mangoes. Each banana contains 80 calories, 20 grams of potassium, and 10 grams of sugar. Each mango contains 100 calories, 15 grams of potassium, and 8 grams of sugar.  The gorilla must consume at least 4000 calories and 150 grams of potassium. Since the gorilla prefers bananas, at most 33% of the fruits he eats can be mangoes. If excess sugar makes the gorilla aggressive, how many of each fruit should he consume to minimize his sugar intake?",
  "ground_truth": 440.0,
  "formulation": null,
  "correct_program": "def optimize_gorilla_fruits():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"GorillaFruits\")\n\n    # Decision variables: number of bananas and mangoes\n    x_b = m.addVar(name=\"Bananas\", lb=0, vtype=GRB.INTEGER)\n    x_m = m.addVar(name=\"Mangoes\", lb=0, vtype=GRB.INTEGER)\n\n    # Set the objective: minimize total sugar intake\n    m.setObjective(10 * x_b + 8 * x_m, GRB.MINIMIZE)\n\n    # Add calorie constraint\n    m.addConstr(80 * x_b + 100 * x_m >= 4000, name=\"Calories\")\n    # Add potassium constraint\n    m.addConstr(20 * x_b + 15 * x_m >= 150, name=\"Potassium\")\n    # Add preference constraint (x_b >= 2 * x_m)\n    m.addConstr(x_b >= 2 * x_m, name=\"Preference\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimum sugar intake\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nprint(optimize_gorilla_fruits())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A110",
  "description": "In a science club, there are two tables that can be set up to make slime. At table 1, 3 units of powder and 5 units of glue are used to make 4 units of slime. At table 2, 8 units of powder and 6 units of glue are used to make 5 units of slime. However, table 1 produces 2 units of mess while table 2 produces 4 units of mess. The science club has available 100 units of powder and 90 units of glue.  If at most 30 units of mess can be made, how many of each table should be set up to maximize the amount of slime produced?",
  "ground_truth": 60.0,
  "formulation": null,
  "correct_program": "def optimize_slime_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"SlimeProduction\")\n\n    # Decision variables: number of tables at each station\n    x = m.addVar(name=\"Table1\", lb=0)\n    y = m.addVar(name=\"Table2\", lb=0)\n\n    # Set the objective: maximize total slime\n    m.setObjective(4 * x + 5 * y, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    m.addConstr(3 * x + 8 * y <= 100, name=\"Powder\")\n    m.addConstr(5 * x + 6 * y <= 90, name=\"Glue\")\n    m.addConstr(2 * x + 4 * y <= 30, name=\"Mess\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_slime = optimize_slime_production()\n    if max_slime is not None:\n        print(f\"Maximum Slime Production: {max_slime}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A111",
  "description": "A competitive eater challenges himself to eat slices of cheesecake and caramel cake. Each slice of cheesecake contains 200 calories and 40 grams of sugar. Each slice of caramel cake contains 250 calories and 50 grams of sugar. He prefers cheesecake and decides to eat at least 3 times as many slices of cheesecake as caramel cake. However, he must also eat at least 3 slices of caramel cake. If he can consume at most 10000 calories in one day, how many slices of each cake should he eat to maximize the total amount of sugar he consumes?",
  "ground_truth": 2000.0,
  "formulation": null,
  "correct_program": "def optimize_cakes():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"CakeEatingOptimization\")\n\n    # Decision variables\n    # x: number of cheesecake slices\n    # y: number of caramel cake slices\n    x = m.addVar(vtype=GRB.INTEGER, name=\"x\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"y\", lb=0)\n\n    # Set objective: maximize sugar intake\n    m.setObjective(40 * x + 50 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Preference constraint: x >= 3y\n    m.addConstr(x >= 3 * y, \"pref_constraint\")\n    # Minimum caramel slices\n    m.addConstr(y >= 3, \"min_caramel\")\n    # Calorie constraint\n    m.addConstr(200 * x + 250 * y <= 10000, \"calorie_limit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum sugar intake\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_sugar = optimize_cakes()\n    if max_sugar is not None:\n        print(f\"Maximum Sugar Intake: {max_sugar}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A112",
  "description": "Both sulfate and ginger need to be added to a shampoo. One unit of sulfate takes 0.5 minutes to be effective while one unit of ginger takes 0.75 minutes to be effective. The shampoo must contain at least 100 units of sulfates and a total of 400 units of both ingredient. Since too much sulfate can damage the hair, there can be at most twice the amount of sulfate as ginger in the shampoo. How many units of each should be added to the shampoo to minimize the total amount of time it takes for the mixture to be effective? (Note: one must be added before the other)",
  "ground_truth": 233.5,
  "formulation": null,
  "correct_program": "def optimize_shampoo_ingredients():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"shampoo_optimization\")\n\n    # Decision variables: number of units of sulfate and ginger\n    S = m.addVar(name=\"S\", lb=0, vtype=GRB.INTEGER)\n    G = m.addVar(name=\"G\", lb=0, vtype=GRB.INTEGER)\n\n    # Set the objective: minimize total effective time\n    m.setObjective(0.5 * S + 0.75 * G, GRB.MINIMIZE)\n\n    # Add constraints\n    m.addConstr(S >= 100, name=\"min_sulfate\")\n    m.addConstr(S + G == 400, name=\"total_units\")\n    m.addConstr(S <= 2 * G, name=\"max_sulfate_ratio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total time\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_shampoo_ingredients()\n    if min_time is not None:\n        print(f\"Minimum Total Effective Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A113",
  "description": "A doctor suggests that his patient eat oranges and grapefruit to meet his vitamin C and vitamin A requirements. One orange contains 5 units of vitamin C, 3 units of vitamin A, and 5 grams of sugar. One grapefruit contains 7 units of vitamin C, 5 units of vitamin A, and 6 grams of sugar. The patient must get at least 80 units of vitamin C and 70 units of vitamin A. Since the patent prefers oranges, he must eat at least 2 times as many oranges as grapefruit. How many of each should he eat to minimize his sugar intake?",
  "ground_truth": 105.0,
  "formulation": null,
  "correct_program": "def optimize_fruit_intake():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Fruit_Optimization\")\n\n    # Decision variables: number of oranges and grapefruits\n    x = m.addVar(name=\"oranges\", lb=0, vtype=GRB.INTEGER)\n    y = m.addVar(name=\"grapefruits\", lb=0, vtype=GRB.INTEGER)\n\n    # Set the objective: minimize total sugar intake\n    m.setObjective(5 * x + 6 * y, GRB.MINIMIZE)\n\n    # Add vitamin C constraint\n    m.addConstr(5 * x + 7 * y >= 80, name=\"VitaminC\")\n    # Add vitamin A constraint\n    m.addConstr(3 * x + 5 * y >= 70, name=\"VitaminA\")\n    # Add preference constraint: oranges at least twice grapefruits\n    m.addConstr(x - 2 * y >= 0, name=\"Preference\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal objective value (minimum sugar intake)\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n\n# Example usage\nprint(optimize_fruit_intake())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A114",
  "description": "A university research lab can make two types of diabetes medicine, medicine A and medicine B. Per dose, medicine A takes 30 units of imported material and 50 units of mRNA to make. Per dose, medicine B takes 40 units of imported material and 30 units of mRNA to take. The lab has available at most 300 units of imported material and 400 units of mRNA. The lab can make at most 5 doses of medicine A and the number of doses of medicine B must be larger than the number of dosed of medicine A. If one dose of medicine A can treat 12 people and one dose of medicine B can treat 8 people, how many doses of each should be made to maximize the number of people that can be treated?",
  "ground_truth": 76.0,
  "formulation": null,
  "correct_program": "def optimize_medicine_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MedicineProduction\")\n\n    # Decision variables\n    x = m.addVar(vtype=GRB.INTEGER, name=\"x\")  # Doses of medicine A\n    y = m.addVar(vtype=GRB.INTEGER, name=\"y\")  # Doses of medicine B\n\n    # Set objective: maximize total treated people\n    m.setObjective(12 * x + 8 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(30 * x + 40 * y <= 300, \"MaterialConstraint\")\n    m.addConstr(50 * x + 30 * y <= 400, \"mRNAConstraint\")\n    m.addConstr(x <= 5, \"MaxDosesA\")\n    m.addConstr(y >= x + 1, \"B_at_least_A\")\n    m.addConstr(x >= 0, \"NonNegX\")\n    m.addConstr(y >= 0, \"NonNegY\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum number of people treated\n        return m.objVal\n    else:\n        return None\n\nprint(optimize_medicine_production())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A115",
  "description": "A popup clinic is doing virus testing with either spit tests or swabs. A spit test takes 10 minutes to administer while a  swab takes 15 minutes to administer. Since the spit test is more accurate, at least twice as many spit tests should be given as  swabs. However, at least 20  swabs must be administers. If the popup clinic operates for 8000 minutes, maximize the number of tests that can be administered.",
  "ground_truth": 790.0,
  "formulation": null,
  "correct_program": "def optimize_tests(time_available=8000, min_swabs=20):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"VirusTestingOptimization\")\n\n    # Decision variables\n    x = model.addVar(name=\"spit_tests\", vtype=GRB.INTEGER, lb=0)\n    y = model.addVar(name=\"swab_tests\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: maximize total tests\n    model.setObjective(x + y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Time constraint\n    model.addConstr(10 * x + 15 * y <= time_available, name=\"TimeLimit\")\n    # Ratio constraint: spit tests at least twice swabs\n    model.addConstr(x >= 2 * y, name=\"Ratio\")\n    # Minimum swabs\n    model.addConstr(y >= min_swabs, name=\"MinSwabs\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        total_tests = model.objVal\n        return total_tests\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_tests = optimize_tests()\n    if max_tests is not None:\n        print(f\"Maximum Total Tests: {max_tests}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A116",
  "description": "A patient is undergoing radiation treatment involving two beams, Beam 1 and Beam 2. Beam 1 delivers a dose of 0.3 units of medicine per minute to the benign area of the pancreas and 0.2 units of medicine per minute to the benign area of the skin. Beam 2 delivers 0.2 units of medicine per minute to the benign area of the pancreas and 0.1 units of medicine per minute to the benign area of the skin.  In addition, beam 1 delivers 0.6 units of medicine per minute to the tumor and beam 2 delivers 0.4 units of medicine per minute to the tumor. At most 4 units of medicine should be received by the skin and at least 3 units of medicine should be delivered to the tumor.  How many minutes of each beam should be used to minimize the total radiation received by the pancreas?",
  "ground_truth": 1.5,
  "formulation": null,
  "correct_program": "def optimize_radiation_treatment():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"RadiationTreatment\")\n\n    # Decision variables: minutes of each beam\n    x1 = m.addVar(name=\"x1\", lb=0)\n    x2 = m.addVar(name=\"x2\", lb=0)\n\n    # Set the objective: minimize pancreas dose\n    m.setObjective(0.3 * x1 + 0.2 * x2, GRB.MINIMIZE)\n\n    # Add skin dose constraint\n    m.addConstr(0.2 * x1 + 0.1 * x2 <= 4, name=\"SkinDoseLimit\")\n\n    # Add tumor dose constraint\n    m.addConstr(0.6 * x1 + 0.4 * x2 >= 3, name=\"TumorDoseRequirement\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_pancreas_dose = optimize_radiation_treatment()\n    if min_pancreas_dose is not None:\n        print(f\"Minimum Pancreas Dose: {min_pancreas_dose}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A117",
  "description": "A body builder buys pre prepared meals, a turkey dinner and a tuna salad sandwich. The turkey dinner contains 20 grams of protein, 30 grams of carbs, and 12 grams of fat. The tuna salad sandwich contains 18 grams of protein, 25 grams of carbs, and 8 grams of fat. The bodybuilder wants to get at least 150 grams of protein and 200 grams of carbs. In addition because the turkey dinner is expensive, at most 40% of the meals should be turkey dinner. How many of each meal should he eat if he wants to minimize his fat intake?",
  "ground_truth": 72.0,
  "formulation": null,
  "correct_program": "def optimize_meals():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MealOptimization\")\n\n    # Decision variables: number of turkey dinners and tuna sandwiches\n    x_T = m.addVar(name=\"TurkeyDinner\", lb=0, vtype=GRB.INTEGER)\n    x_S = m.addVar(name=\"TunaSandwich\", lb=0, vtype=GRB.INTEGER)\n\n    # Set the objective: minimize total fat intake\n    m.setObjective(12 * x_T + 8 * x_S, GRB.MINIMIZE)\n\n    # Add constraints\n    # Protein constraint\n    m.addConstr(20 * x_T + 18 * x_S >= 150, name=\"ProteinRequirement\")\n    # Carbohydrate constraint\n    m.addConstr(30 * x_T + 25 * x_S >= 200, name=\"CarbRequirement\")\n    # Proportion constraint: 3x_T - 2x_S <= 0\n    m.addConstr(3 * x_T - 2 * x_S <= 0, name=\"TurkeyProportion\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total fat intake\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nprint(optimize_meals())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A118",
  "description": "A chemistry teacher teaches her students two experiments, experiment 1 and experiment 2. In experiment 1, 3 units of the red liquid and 4 units of the blue liquid mix to create 5 units of green gas. In experiment 2, 5 units of the red liquid and 3 units of the blue liquid mix to create 6 units of the green gas. In addition, experiment 1 produces 1 units of smelly gas while experiment 2 produces 2 units of smelly gas.  The lab has available 80 units of red liquid and 70 units of blue liquid. If at most 10 units of smelly gas can be produced, how many experiments of each should be done to maximize the total amount of green gas produced?",
  "ground_truth": 50.0,
  "formulation": null,
  "correct_program": "def optimize_green_gas(\n    red_liquid=80,\n    blue_liquid=70,\n    max_smelly_gas=10\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"GreenGasOptimization\")\n\n    # Decision variables: number of experiments (integer, >=0)\n    x1 = model.addVar(vtype=GRB.INTEGER, name=\"Experiment1\")\n    x2 = model.addVar(vtype=GRB.INTEGER, name=\"Experiment2\")\n\n    # Set objective: maximize total green gas\n    model.setObjective(5 * x1 + 6 * x2, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    model.addConstr(3 * x1 + 5 * x2 <= red_liquid, \"RedLiquid\")\n    model.addConstr(4 * x1 + 3 * x2 <= blue_liquid, \"BlueLiquid\")\n    # Add smelly gas constraint\n    model.addConstr(x1 + 2 * x2 <= max_smelly_gas, \"SmellyGas\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        return model.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_green_gas = optimize_green_gas()\n    if max_green_gas is not None:\n        print(f\"Maximum Total Green Gas: {max_green_gas}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A119",
  "description": "A lab has 1000 units of medicinal ingredients to make two pills, a large pill and a small pill. A large pill requires 3 units of medicinal ingredients and 2 units of filler. A small pill requires 2 units of medicinal ingredients and 1 unit of filler. The lab has to make at least 100 large pills. However, since small pills are more popular at least 60% of the total number of pills must be small. How many of each should be made to minimize the total number of filler material needed?",
  "ground_truth": 350.0,
  "formulation": null,
  "correct_program": "def optimize_pills():\n    from gurobipy import Model, GRB, quicksum\n\n    # Create a new model\n    m = Model(\"PillProduction\")\n\n    # Decision variables\n    # L: number of large pills (integer, at least 100)\n    L = m.addVar(vtype=GRB.INTEGER, name=\"LargePills\", lb=100)\n    # S: number of small pills (integer, at least 0)\n    S = m.addVar(vtype=GRB.INTEGER, name=\"SmallPills\", lb=0)\n\n    # Set objective: minimize total filler used\n    m.setObjective(2 * L + S, GRB.MINIMIZE)\n\n    # Add resource constraint for medicinal ingredients\n    m.addConstr(3 * L + 2 * S <= 1000, \"MedicinalConstraint\")\n\n    # Add constraint for small pills being at least 60% of total\n    # S >= 1.5 * L\n    m.addConstr(S >= 1.5 * L, \"SmallPercentageConstraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal filler usage\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    min_filler = optimize_pills()\n    if min_filler is not None:\n        print(f\"Minimum Total Filler Used: {min_filler}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A120",
  "description": "A dietician recommends her client eat blueberries and strawberries to meet her anti-oxidant and mineral requirement. A pack of blueberries contains 3 units of anti-oxidants and 5 units of minerals. A pack of strawberries contains 1 unit of anti-oxidants and 7 units of minerals. The client must get at least 90 units of anti-oxidants and 100 units of minerals. In addition, because blueberries are not in season, the dietician recommend she eats at least 3 times as many packs of strawberries as blueberries. If a pack of blueberries contains 5 grams of sugar and a pack of strawberries contains 7 grams of sugar, how many of packs of each should she consume to minimize her sugar intake?",
  "ground_truth": 390.0,
  "formulation": null,
  "correct_program": "def optimize_fruit_packs():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Fruit_Packs_Minimize_Sugar\")\n\n    # Decision variables: number of blueberry and strawberry packs\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Blueberry_Packs\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Strawberry_Packs\", lb=0)\n\n    # Set objective: minimize total sugar intake\n    m.setObjective(5 * x + 7 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    m.addConstr(3 * x + y >= 90, \"AntiOxidant_Requirement\")\n    m.addConstr(5 * x + 7 * y >= 100, \"Mineral_Requirement\")\n    m.addConstr(y >= 3 * x, \"Strawberry_to_Blueberry_Ratio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimum sugar intake\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_sugar = optimize_fruit_packs()\n    if min_sugar is not None:\n        print(f\"Minimum Sugar Intake: {min_sugar}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A121",
  "description": "An engineering school has a bridge building competition where students must build as many beam bridges and truss bridges as they can using Popsicle sticks and glue. A beam bridge requires 30 Popsicle sticks and 5 units of glue while a truss bridge requires 50 Popsicle sticks and 8 units of glue. Each team has at most 600 Popsicle sticks and 100 units of glue. In addition, each team can build at most 5 truss bridges and the number of beam bridges must be larger than the number of truss bridges. If a beam bridge can hold 40 grams and a truss bridge can hold 60 grams, how many of each bridge should a team build to maximize the total mass that can be supported?",
  "ground_truth": 800.0,
  "formulation": null,
  "correct_program": "def optimize_bridges():\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"BridgeBuildingOptimization\")\n\n    # Decision variables\n    # x_b: number of beam bridges\n    # x_t: number of truss bridges\n    x_b = model.addVar(vtype=GRB.INTEGER, name=\"beam_bridges\", lb=0)\n    x_t = model.addVar(vtype=GRB.INTEGER, name=\"truss_bridges\", lb=0)\n\n    # Set objective: maximize total supported mass\n    model.setObjective(40 * x_b + 60 * x_t, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Material constraints\n    model.addConstr(30 * x_b + 50 * x_t <= 600, \"sticks_constraint\")\n    model.addConstr(5 * x_b + 8 * x_t <= 100, \"glue_constraint\")\n    # Truss bridge limit\n    model.addConstr(x_t <= 5, \"max_truss\")\n    # Beam > Truss\n    model.addConstr(x_b >= x_t + 1, \"beam_greater_than_truss\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum total supported mass\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_mass = optimize_bridges()\n    if max_mass is not None:\n        print(f\"Maximum Supported Mass: {max_mass}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A122",
  "description": "A clinic administers two vaccines available for the public to take one at a time. One vaccine is taken as a pill and another is taken as a shot. The pill vaccine takes 10 minutes to administer while the shot takes 20 minutes to administer. Since the shot has been more thoroughly studied, the clinic must deliver at least 3 times as many shots as pill. In addition, the clinic must administer at least 30 pill vaccines. If the clinic only operates for 10000 minutes, maximize the number of patients that can be vaccinated.",
  "ground_truth": 571.0,
  "formulation": null,
  "correct_program": "def optimize_vaccination(max_time=10000, min_pills=30):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Vaccination_Optimization\")\n\n    # Decision variables: number of pills and shots\n    x = model.addVar(name=\"pill\", vtype=GRB.INTEGER, lb=0)\n    y = model.addVar(name=\"shot\", vtype=GRB.INTEGER, lb=0)\n\n    # Set the objective: maximize total vaccinated\n    model.setObjective(x + y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Time constraint\n    model.addConstr(10 * x + 20 * y <= max_time, name=\"time_limit\")\n    # Ratio constraint\n    model.addConstr(y >= 3 * x, name=\"ratio\")\n    # Minimum pills\n    model.addConstr(x >= min_pills, name=\"min_pills\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum number of patients vaccinated\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage \nif __name__ == \"__main__\":\n    max_vaccinated = optimize_vaccination()\n    if max_vaccinated is not None:\n        print(f\"Maximum Patients Vaccinated: {max_vaccinated}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A123",
  "description": "A chocolate company can transport their boxes of chocolate either using their own vans or by renting trucks. Their vans can transport 50 boxes per trip while a truck can transport 80 boxes per trip. Since they own their vans, the cost per van trip is $30 while the cost per truck trip is $50. The company needs to transport at least 1500 boxes of chocolate and they have a budget of $1000. Since the vans also provide advertising, the number of trips by van must be larger than the number of trips by trucks. How many of trip by each should be done to minimize the total number of trips?",
  "ground_truth": 24.0,
  "formulation": null,
  "correct_program": "def optimize_trips():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Chocolate_Transport\")\n\n    # Decision variables: number of van trips (x) and truck trips (y)\n    # Both are integers and >= 0\n    x = m.addVar(vtype=GRB.INTEGER, name=\"van_trips\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"truck_trips\")\n\n    # Set the objective: minimize total number of trips\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add capacity constraint: at least 1500 boxes transported\n    m.addConstr(50 * x + 80 * y >= 1500, name=\"capacity_constraint\")\n\n    # Add budget constraint: total cost <= 1000\n    m.addConstr(30 * x + 50 * y <= 1000, name=\"budget_constraint\")\n\n    # Add trip comparison constraint: van trips > truck trips\n    # Since Gurobi does not support strict inequalities directly,\n    # we model x > y as x >= y + 1\n    m.addConstr(x >= y + 1, name=\"trip_comparison\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal total number of trips\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_trips = optimize_trips()\n    if min_trips is not None:\n        print(f\"Minimum Total Trips: {min_trips}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A124",
  "description": "A bee farmer transports his honey in small and large bottles. A small bottle can take 5 units of honey while a large bottle can take 20 units of honey. The farmer has available at most 300 small bottles and at most 100 large bottles. In addition, since small bottles are easier to sell, at least twice as many small bottles must be used than large bottles. Finally, he can transport at most 200 bottles total and at least 50 must be large bottles. How many of each bottle should be use to maximize the total amount of honey he can transport?",
  "ground_truth": 1990.0,
  "formulation": null,
  "correct_program": "def optimize_honey_transport():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"HoneyTransport\")\n\n    # Decision variables\n    # x: number of small bottles\n    # y: number of large bottles\n    x = m.addVar(vtype=GRB.INTEGER, name=\"small_bottles\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"large_bottles\")\n\n    # Set objective: maximize total honey\n    m.setObjective(5 * x + 20 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(x <= 300, \"max_small_bottles\")\n    m.addConstr(y <= 100, \"max_large_bottles\")\n    m.addConstr(x >= 2 * y, \"small_at_least_twice_large\")\n    m.addConstr(x + y <= 200, \"total_bottles_limit\")\n    m.addConstr(y >= 50, \"min_large_bottles\")\n    m.addConstr(x >= 0, \"non_negative_small\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum total honey transported\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_honey = optimize_honey_transport()\n    if max_honey is not None:\n        print(f\"Maximum Honey Transported: {max_honey}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A125",
  "description": "An international goods exporter uses ships and planes to transport goods. A ship can take 40 containers worth of goods and uses 500 liters of fuel per trip. A plane can take 20 containers worth of goods and uses 300 liters of fuel per trip. The company needs to transport at least 500 containers worth of goods. In addition, there can be at most 10 plane trips made and a minimum of 50% of the trips made must be by ship. How many of each trip should be made to minimize the total amount of fuel consumed?",
  "ground_truth": 6300.0,
  "formulation": null,
  "correct_program": "def optimize_transport(fuel_ship=500, fuel_plane=300, containers_required=500, max_plane_trips=10):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"TransportOptimization\")\n\n    # Decision variables\n    x_s = m.addVar(vtype=GRB.INTEGER, name=\"ship_trips\", lb=0)\n    x_p = m.addVar(vtype=GRB.INTEGER, name=\"plane_trips\", lb=0)\n\n    # Set objective: minimize total fuel consumption\n    m.setObjective(fuel_ship * x_s + fuel_plane * x_p, GRB.MINIMIZE)\n\n    # Add constraints\n    # Container requirement\n    m.addConstr(40 * x_s + 20 * x_p >= containers_required, \"containers_min\")\n    # Plane trips limit\n    m.addConstr(x_p <= max_plane_trips, \"max_plane_trips\")\n    # Ship trips at least 50% of total trips\n    m.addConstr(x_s >= x_p, \"ship_at_least_equal_plane\")\n    \n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_fuel = m.objVal\n        return total_fuel\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_fuel = optimize_transport()\n    if min_fuel is not None:\n        print(f\"Minimum Total Fuel Consumption: {min_fuel}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A126",
  "description": "There has been an oil spill in the ocean and ducks need to be taken to shore to be cleaned either by boat or by canoe. A boat can take 10 ducks per trip while a canoe can take 8 ducks per trip. Since the boats are motor powered, they take 20 minutes per trip while the canoes take 40 minutes per trip. In order to avoid further environmental damage, there can be at most 12 boat trips and at least 60% of the trips should be by canoe. If at least 300 ducks need to be taken to shore, how many of each transportation method should be used to minimize the total amount of time needed to transport the ducks?",
  "ground_truth": 1160.0,
  "formulation": null,
  "correct_program": "def optimize_duck_transport():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"DuckTransport\")\n\n    # Decision variables: number of trips\n    x_b = m.addVar(vtype=GRB.INTEGER, name=\"boat_trips\")\n    x_c = m.addVar(vtype=GRB.INTEGER, name=\"canoe_trips\")\n\n    # Set objective: minimize total time\n    m.setObjective(20 * x_b + 40 * x_c, GRB.MINIMIZE)\n\n    # Add constraints\n    # Ducks transported at least 300\n    m.addConstr(10 * x_b + 8 * x_c >= 300, name=\"duck_transport\")\n    # Maximum 12 boat trips\n    m.addConstr(x_b <= 12, name=\"max_boat_trips\")\n    # At least 60% trips are by canoe\n    m.addConstr(2 * x_c >= 3 * x_b, name=\"canoe_ratio\")\n    # Non-negativity (implicitly enforced by variable type)\n    # (Gurobi variables are non-negative by default unless specified otherwise)\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal total time\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_duck_transport()\n    if min_time is not None:\n        print(f\"Minimum Total Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A127",
  "description": "A soda company sends bottles of their soda to stores around the city in old and new vans. An old van can take 100 soda bottles while a new van can take 80 soda bottles. An old van produces 50 units of pollution while a new van only produces 30 units of pollution. The company needs to send at least 5000 bottles. In addition, at most 30 new vans can be used. How many of each van should be used to minimize the total amount of pollution produced?",
  "ground_truth": 2200.0,
  "formulation": null,
  "correct_program": "def optimize_vans():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Vans Pollution Minimization\")\n\n    # Decision variables\n    # x: number of old vans\n    # y: number of new vans\n    x = m.addVar(vtype=GRB.INTEGER, name=\"OldVans\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"NewVans\", lb=0)\n\n    # Set objective: minimize total pollution\n    m.setObjective(50 * x + 30 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Capacity constraint\n    m.addConstr(100 * x + 80 * y >= 5000, \"Capacity\")\n    # Max number of new vans\n    m.addConstr(y <= 30, \"MaxNewVans\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total pollution\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_pollution = optimize_vans()\n    if min_pollution is not None:\n        print(f\"Minimum Total Pollution: {min_pollution}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A128",
  "description": "A lawn mowing service provides neighborhood services using small teams and large teams. A small team requires 3 employees and can mow 50 sq ft of lawn. A large team requires 5 employees and can mow 80 sq ft of lawn. The company has 150 employees available. Because most people have smaller lawns in the city, the number of small teams must be at least 3 times as much as the number of large teams. In addition, to make sure the company can meet all demands, there has to be at least 6 large teams and at least 10 small teams. How many of each team type should be used to maximize the amount of lawn that can be mowed?",
  "ground_truth": 2480.0,
  "formulation": null,
  "correct_program": "def optimize_lawn_mowing(small_team_min=10, large_team_min=6, total_employees=150):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"LawnMowingOptimization\")\n    m.setParam('OutputFlag', 0)  # Suppress Gurobi output\n\n    # Decision variables\n    s = m.addVar(vtype=GRB.INTEGER, name=\"small_teams\")\n    l = m.addVar(vtype=GRB.INTEGER, name=\"large_teams\")\n\n    # Set objective: maximize total lawn area\n    m.setObjective(50 * s + 80 * l, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Employee constraint\n    m.addConstr(3 * s + 5 * l <= total_employees, name=\"employee_limit\")\n    # Ratio constraint\n    m.addConstr(s >= 3 * l, name=\"ratio_constraint\")\n    # Minimum number of small teams\n    m.addConstr(s >= small_team_min, name=\"min_small_teams\")\n    # Minimum number of large teams\n    m.addConstr(l >= large_team_min, name=\"min_large_teams\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum lawn area\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_lawn_area = optimize_lawn_mowing()\n    if max_lawn_area is not None:\n        print(f\"Maximum Lawn Area: {max_lawn_area}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A129",
  "description": "An aquarium does shows using otters and dolphins. An otter will do 3 tricks at a time and requires 3 treats to do so. A dolphin will do 1 trick at a time and requires 5 treats to do so. Since dolphins are more popular, at least 10 dolphins must be used and at most 30% of the performers can be otters. If the aquarium only has 200 treats available, maximize the total number of tricks that can be preformed.",
  "ground_truth": 71.0,
  "formulation": null,
  "correct_program": "def optimize_tricks():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Aquarium_Performance\")\n\n    # Decision variables: number of sessions for otters and dolphins\n    x_o = m.addVar(vtype=GRB.INTEGER, name=\"Otters\")\n    x_d = m.addVar(vtype=GRB.INTEGER, name=\"Dolphins\")\n\n    # Set objective: maximize total tricks\n    m.setObjective(3 * x_o + x_d, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Otter proportion constraint: 7 * x_o <= 3 * x_d\n    m.addConstr(7 * x_o <= 3 * x_d, name=\"OtterProportion\")\n    # Minimum number of dolphins\n    m.addConstr(x_d >= 10, name=\"MinDolphins\")\n    # Treats constraint\n    m.addConstr(3 * x_o + 5 * x_d <= 200, name=\"TreatsLimit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum total tricks\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_tricks = optimize_tricks()\n    if max_tricks is not None:\n        print(f\"Maximum Tricks: {max_tricks}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A130",
  "description": "A shoe company supplies shoes to stores via vans and trucks. A van can transport 50 pairs of shoes while a truck can transport 100 pairs of shoes. The company must supply a minimum of 2000 pairs of shoes around the city. Since most stores are small, the number of trucks used cannot exceed the number of vans used.  Find the minimum number of vans that can be used?",
  "ground_truth": 14.0,
  "formulation": null,
  "correct_program": "def minimize_vans():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Minimize_Vans\")\n\n    # Decision variables\n    V = m.addVar(vtype=GRB.INTEGER, name=\"Vans\", lb=0)\n    T = m.addVar(vtype=GRB.INTEGER, name=\"Trucks\", lb=0)\n\n    # Set objective: minimize number of vans\n    m.setObjective(V, GRB.MINIMIZE)\n\n    # Add constraints\n    # Supply constraint\n    m.addConstr(50 * V + 100 * T >= 2000, name=\"Supply\")\n    # Truck-to-van ratio constraint\n    m.addConstr(T <= V, name=\"Truck_Van_Ratio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimum number of vans used\n        return V.X\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_vans = minimize_vans()\n    if min_vans is not None:\n        print(f\"Minimum number of vans used: {min_vans}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A131",
  "description": "An oil and gas company is sending their oil to the port using containers and trucks. A container can hold 30 units of oil while a truck can hold 40 units of oil. Due to government restrictions, the number of trucks used has to at most half the number of containers used. If at least 2000 units of oil need to be sent to the port and at least 15 containers need to be used, minimize the total number of containers and trucks needed.",
  "ground_truth": 60.0,
  "formulation": null,
  "correct_program": "def optimize_oil_transport():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"OilTransport\")\n\n    # Decision variables\n    # Number of containers (at least 15)\n    C = m.addVar(name=\"Containers\", vtype=GRB.INTEGER, lb=15)\n    # Number of trucks (non-negative)\n    T = m.addVar(name=\"Trucks\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: minimize total number of containers and trucks\n    m.setObjective(C + T, GRB.MINIMIZE)\n\n    # Capacity constraint: at least 2000 units of oil\n    m.addConstr(30 * C + 40 * T >= 2000, name=\"Capacity\")\n\n    # Truck-to-container ratio constraint\n    m.addConstr(T <= 0.5 * C, name=\"TruckContainerRatio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of containers and trucks\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_transport = optimize_oil_transport()\n    if min_transport is not None:\n        print(f\"Minimum Total Transport (Containers + Trucks): {min_transport}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A132",
  "description": "A school is organizing a field trip to a science center and wants to hire small buses and large buses. A small bus can carry 20 students while a large bus can carry 50 students.  The school needs to provide transportation for at least 500 students.  In addition, since the parking lot is rather small, a maximum of 20% of the buses can be large buses. How many of each type of bus should be hired to minimize the total number of buses?",
  "ground_truth": 20.0,
  "formulation": null,
  "correct_program": "def optimize_buses():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"School_Bus_Optimization\")\n    \n    # Decision variables\n    x = m.addVar(vtype=GRB.INTEGER, name=\"small_buses\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"large_buses\")\n    \n    # Set objective: minimize total number of buses\n    m.setObjective(x + y, GRB.MINIMIZE)\n    \n    # Capacity constraint\n    m.addConstr(20 * x + 50 * y >= 500, name=\"capacity_constraint\")\n    \n    # Parking lot constraint (x >= 4y)\n    m.addConstr(x - 4 * y >= 0, name=\"parking_constraint\")\n    \n    # Non-negativity is implicit in variable definition (non-negative by default)\n    # but to be explicit:\n    m.addConstr(x >= 0, name=\"x_nonneg\")\n    m.addConstr(y >= 0, name=\"y_nonneg\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_buses = m.objVal\n        return total_buses\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_buses = optimize_buses()\n    if min_buses is not None:\n        print(f\"Minimum Total Buses: {min_buses}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A133",
  "description": "A meat shop ships their burger patties using refrigerated trucks and vans. Each truck can take 1000 patties at a cost of $300 per trip. Each van can take 500 patties at a cost of $100 per trip. Because the trucks have difficulty moving around in the city, the number of trucks must not exceed the number of vans. The meat shop has to ship at least 50000 patties and they have a budget of $12500. How should they plan their shipment to minimize the total number of trips?",
  "ground_truth": 75.0,
  "formulation": null,
  "correct_program": "def optimize_shipment():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Meat_Shipment\")\n\n    # Decision variables: number of truck trips and van trips\n    T = m.addVar(vtype=GRB.INTEGER, name=\"TruckTrips\", lb=0)\n    V = m.addVar(vtype=GRB.INTEGER, name=\"VanTrips\", lb=0)\n\n    # Set the objective: minimize total trips\n    m.setObjective(T + V, GRB.MINIMIZE)\n\n    # Capacity constraint: at least 50,000 patties shipped\n    m.addConstr(1000 * T + 500 * V >= 50000, name=\"DemandConstraint\")\n\n    # Budget constraint: total cost not exceeding $12,500\n    m.addConstr(300 * T + 100 * V <= 12500, name=\"BudgetConstraint\")\n\n    # Vehicle count constraint: trucks not more than vans\n    m.addConstr(T <= V, name=\"VehicleCountConstraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal total number of trips\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_trips = optimize_shipment()\n    if min_trips is not None:\n        print(f\"Minimum Total Trips (Trucks + Vans): {min_trips}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A134",
  "description": "A florist transports his flowers to stores in small bouquets and large bouquets. A small bouquet has 5 flowers while a large bouquet has 10 flowers. The florist can transport at most 80 small bouquets and 50 large bouquets. In total, he can transport at most 70 bouquets and he must transport at least 20 large bouquets. Since small bouquets are more popular, he must transport at least twice as many small bouquets as large bouquets. How many of each bouquet should he transport to maximize the total number of flowers that reach the stores?",
  "ground_truth": 465.0,
  "formulation": null,
  "correct_program": "def optimize_bouquets():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"FlowerBouquets\")\n\n    # Decision variables\n    S = m.addVar(vtype=GRB.INTEGER, name=\"SmallBouquets\")\n    L = m.addVar(vtype=GRB.INTEGER, name=\"LargeBouquets\")\n\n    # Set objective: maximize total flowers\n    m.setObjective(5 * S + 10 * L, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(S <= 80, name=\"MaxSmall\")\n    m.addConstr(L <= 50, name=\"MaxLarge\")\n    m.addConstr(S + L <= 70, name=\"TotalBouquets\")\n    m.addConstr(L >= 20, name=\"MinLarge\")\n    m.addConstr(S >= 2 * L, name=\"SmallAtLeastTwiceLarge\")\n    m.addConstr(S >= 0, name=\"NonNegSmall\")\n    m.addConstr(L >= 0, name=\"NonNegLarge\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum total number of flowers\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_flowers = optimize_bouquets()\n    if max_flowers is not None:\n        print(f\"Maximum Total Flowers: {max_flowers}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A135",
  "description": "A toy store decides to deliver gifts using two shipping companies, a new one and an old one. The new company can deliver 50 gifts per trip while the old company can deliver 70 gifts per trip. The new company uses 30 liters of diesel per trip while the old company uses 40 liters of diesel per trip. The toy store needs to deliver at least 1000 gifts. There can be at most 15 trips made by the new company. In order to make sure that the old company does not go out of business, at least 40% of all trips must be made by the old company. How many trips should each company make to minimize the total amount of diesel used?",
  "ground_truth": 580.0,
  "formulation": null,
  "correct_program": "def optimize_gift_delivery(\n    max_trips_new=15,\n    min_gifts=1000,\n    gifts_per_trip_new=50,\n    gifts_per_trip_old=70,\n    diesel_per_trip_new=30,\n    diesel_per_trip_old=40,\n    min_old_trip_fraction=0.4\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"GiftDeliveryOptimization\")\n    \n    # Decision variables\n    x = model.addVar(vtype=GRB.INTEGER, name=\"x_trips_new\")  # Trips by new company\n    y = model.addVar(vtype=GRB.INTEGER, name=\"y_trips_old\")  # Trips by old company\n    \n    # Set objective: minimize total diesel consumption\n    model.setObjective(\n        diesel_per_trip_new * x + diesel_per_trip_old * y,\n        GRB.MINIMIZE\n    )\n    \n    # Add constraints\n    # Delivery requirement\n    model.addConstr(\n        gifts_per_trip_new * x + gifts_per_trip_old * y >= min_gifts,\n        name=\"DeliveryRequirement\"\n    )\n    # Trips limit for new company\n    model.addConstr(\n        x <= max_trips_new,\n        name=\"MaxTripsNew\"\n    )\n    # Old company trips proportion constraint: y >= 0.4*(x + y)\n    model.addConstr(\n        y >= min_old_trip_fraction * (x + y),\n        name=\"OldTripProportion\"\n    )\n    # Non-negativity constraints are implicit in variable types\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the total diesel used in the optimal solution\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    total_diesel = optimize_gift_delivery()\n    if total_diesel is not None:\n        print(f\"Minimum Total Diesel Consumption: {total_diesel}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A136",
  "description": "A zoo needs to transport their monkeys to the vet either by bus or by car. A bus can transport 20 monkeys per trip and takes 30 minutes. A car can transport 6 monkeys per trip and takes 15 minutes. There can be at most 10 bus trips. In addition, since the monkeys get aggressive when there are too many in one place at least 60% of the trips should be by car. If the zoo needs to transport 300 monkeys, how many trips of each should be done to minimize the total time required to transport the monkeys?",
  "ground_truth": 555.0,
  "formulation": null,
  "correct_program": "def optimize_monkey_transport():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MonkeyTransport\")\n\n    # Decision variables\n    x_b = m.addVar(vtype=GRB.INTEGER, name=\"bus_trips\")\n    x_c = m.addVar(vtype=GRB.INTEGER, name=\"car_trips\")\n\n    # Set objective: minimize total time\n    m.setObjective(30 * x_b + 15 * x_c, GRB.MINIMIZE)\n\n    # Add constraints\n    # Capacity constraint\n    m.addConstr(20 * x_b + 6 * x_c >= 300, name=\"capacity\")\n    # Bus trip limit\n    m.addConstr(x_b <= 10, name=\"max_bus_trips\")\n    # Proportion constraint (2 * x_c >= 3 * x_b)\n    m.addConstr(2 * x_c >= 3 * x_b, name=\"car_ratio\")\n    # Non-negativity is implicit in variable definition\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal total time\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_monkey_transport()\n    if min_time is not None:\n        print(f\"Minimum Total Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A137",
  "description": "A farmer decides to move his cows to a nearby farm using helicopters and trucks. A helicopter can take 3 cows per trip and creates 5 units of pollution. A truck can take 7 cows per trip and creates 10 units of pollution. The farmer needs to transport 80 cows and he only has enough money for at most 8 truck trips. How many of each type of trip should be taken to minimize the total amount of pollution produced?",
  "ground_truth": 120.0,
  "formulation": null,
  "correct_program": "def optimize_cow_transport():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"CowTransport\")\n\n    # Decision variables\n    h = m.addVar(vtype=GRB.INTEGER, name=\"HelicopterTrips\", lb=0)\n    t = m.addVar(vtype=GRB.INTEGER, name=\"TruckTrips\", lb=0)\n\n    # Set objective: minimize total pollution\n    m.setObjective(5 * h + 10 * t, GRB.MINIMIZE)\n\n    # Add constraints\n    # Ensure at least 80 cows are transported\n    m.addConstr(3 * h + 7 * t >= 80, \"CowsTransported\")\n    # Limit on number of truck trips\n    m.addConstr(t <= 8, \"TruckLimit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total pollution\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_pollution = optimize_cow_transport()\n    if min_pollution is not None:\n        print(f\"Minimum Total Pollution: {min_pollution}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A138",
  "description": "A sand company delivers sand for playgrounds in small and large containers. A small container requires 1 person to unload and can hold 20 units of sand. A large container requires 3 people to unload and can hold 50 units of sand. Since most playgrounds are small, the number of small containers used must be thrice the number of large containers used. In addition, there must be at least 5 small containers and 3 large containers used. If the company has 100 people available, maximize the amount of sand that they can deliver.",
  "ground_truth": 1760.0,
  "formulation": null,
  "correct_program": "def optimize_sand_delivery():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"SandDelivery\")\n\n    # Decision variables\n    # x_s: number of small containers\n    # x_l: number of large containers\n    x_s = m.addVar(vtype=GRB.INTEGER, name=\"x_s\")\n    x_l = m.addVar(vtype=GRB.INTEGER, name=\"x_l\")\n\n    # Set objective: maximize total sand\n    m.setObjective(20 * x_s + 50 * x_l, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Container ratio constraint\n    m.addConstr(x_s == 3 * x_l, \"ratio\")\n    # Minimum containers\n    m.addConstr(x_s >= 5, \"min_small\")\n    m.addConstr(x_l >= 3, \"min_large\")\n    # Labor constraint\n    m.addConstr(x_s + 3 * x_l <= 100, \"labor\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum amount of sand delivered\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_sand = optimize_sand_delivery()\n    if max_sand is not None:\n        print(f\"Maximum Amount of Sand Delivered: {max_sand}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A139",
  "description": "A meal service company delivers meals to customers either on electric bikes or scooters. A bike can hold 8 meals and requires 3 units of charge. A scooter can hold 5 meals and requires 2 units of charge. Since the city is more friendly towards scooters, at most 30% of the electric vehicles can be bikes and at least 20 scooters must be used. If the company only has 200 units of charge available, how many of each vehicle should be used to maximize the number of meals that can be delivered?",
  "ground_truth": 513.0,
  "formulation": null,
  "correct_program": "def optimize_meal_delivery():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MealDeliveryOptimization\")\n\n    # Decision variables\n    x_b = m.addVar(vtype=GRB.INTEGER, name=\"bikes\")\n    x_s = m.addVar(vtype=GRB.INTEGER, name=\"scooters\")\n\n    # Set objective: maximize total meals\n    m.setObjective(8 * x_b + 5 * x_s, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Charge constraint\n    m.addConstr(3 * x_b + 2 * x_s <= 200, name=\"charge_limit\")\n    # Bike usage limit (30% of total vehicles)\n    m.addConstr(7 * x_b <= 3 * x_s, name=\"bike_ratio\")\n    # Minimum scooters\n    m.addConstr(x_s >= 20, name=\"min_scooters\")\n    # Non-negativity is implicit in variable definition\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum number of meals delivered\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_meals = optimize_meal_delivery()\n    if max_meals is not None:\n        print(f\"Maximum Meals Delivered: {max_meals}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A140",
  "description": "A car manufacturer ships their cars on large and small planes. A large plane can carry 30 cars while a small plane can carry 10 cars. Since large planes cause more pollution, the number of large planes must be less than the number of small planes. If the manufacturer wants to deliver at least 300 cars, find the minimum number of planes that can be used.",
  "ground_truth": 16.0,
  "formulation": null,
  "correct_program": "def minimize_planes():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MinimizePlanes\")\n\n    # Decision variables: number of large and small planes\n    L = m.addVar(vtype=GRB.INTEGER, name=\"LargePlanes\", lb=0)\n    S = m.addVar(vtype=GRB.INTEGER, name=\"SmallPlanes\", lb=0)\n\n    # Set the objective: minimize total number of planes\n    m.setObjective(L + S, GRB.MINIMIZE)\n\n    # Capacity constraint: at least 300 cars delivered\n    m.addConstr(30 * L + 10 * S >= 300, name=\"CapacityConstraint\")\n\n    # Relationship constraint: large planes less than small planes\n    m.addConstr(L <= S - 1, name=\"PlaneCountConstraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimum total number of planes\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_planes = minimize_planes()\n    if min_planes is not None:\n        print(f\"Minimum Total Planes: {min_planes}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A141",
  "description": "A mine sends ore to the surface in small and large wagons. A small wagon hold 20 units of ore while a large wagon holds 50 units of ore. To avoid taking up too much space on the ramps, the number of small wagons must be at least twice as much as the number or large wagons. In addition, at least 10 large wagons must be used. If 2000 units of ore need to taken to the surface, minimize the total number of wagons needed.",
  "ground_truth": 67.0,
  "formulation": null,
  "correct_program": "def optimize_wagons():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"WagonOptimization\")\n\n    # Decision variables\n    # x: number of small wagons\n    # y: number of large wagons\n    x = m.addVar(name=\"small_wagons\", vtype=GRB.INTEGER, lb=0)\n    y = m.addVar(name=\"large_wagons\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: minimize total wagons\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Ore transportation constraint\n    m.addConstr(20 * x + 50 * y >= 2000, name=\"OreRequirement\")\n    # Small wagons at least twice large wagons\n    m.addConstr(x >= 2 * y, name=\"SmallLargeRatio\")\n    # Minimum large wagons\n    m.addConstr(y >= 10, name=\"MinLargeWagons\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_wagons = m.objVal\n        return total_wagons\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_wagons = optimize_wagons()\n    if min_wagons is not None:\n        print(f\"Minimum Total Wagons: {min_wagons}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A142",
  "description": "A theme park transports its visitors around the park either by scooter or rickshaw. A scooter can carry 2 people while a rickshaw can carry 3 people. To avoid excessive pollution, at most 40% of the vehicles used can be rickshaws. If the park needs to transport at least 300 visitors, minimize the total number of scooters used.",
  "ground_truth": 75.0,
  "formulation": null,
  "correct_program": "def optimize_transportation():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"ThemeParkTransport\")\n\n    # Decision variables\n    s = m.addVar(name=\"scooters\", vtype=GRB.INTEGER, lb=0)\n    r = m.addVar(name=\"rickshaws\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: minimize number of scooters\n    m.setObjective(s, GRB.MINIMIZE)\n\n    # Capacity constraint: at least 300 visitors\n    m.addConstr(2 * s + 3 * r >= 300, name=\"capacity\")\n\n    # Pollution constraint: r ≤ (2/3) * s\n    m.addConstr(r <= (2/3) * s, name=\"pollution_limit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal number of scooters used\n        return s.X\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_scooters = optimize_transportation()\n    if min_scooters is not None:\n        print(f\"Minimum Number of Scooters: {min_scooters}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A143",
  "description": "A company in the middle east delivers their packages to customers on camels and horses. A camel can carry 50 packages while a horse can carry 60 packages. A camel requires 20 units of food while a horse requires 30 units of food. The company needs to deliver at least 1000 packages and they have 450 units of food available. Since horses are not as suited for the hot climate, the number of horses cannot exceed the number of camels. How many of each animal should be used to minimize the total number of animals?",
  "ground_truth": 19.0,
  "formulation": null,
  "correct_program": "def optimize_animals():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Animal_Optimization\")\n\n    # Decision variables\n    C = m.addVar(vtype=GRB.INTEGER, name=\"Camels\", lb=0)\n    H = m.addVar(vtype=GRB.INTEGER, name=\"Horses\", lb=0)\n\n    # Set objective: minimize total number of animals\n    m.setObjective(C + H, GRB.MINIMIZE)\n\n    # Add constraints\n    # Package capacity constraint\n    m.addConstr(50 * C + 60 * H >= 1000, name=\"PackageCapacity\")\n    # Food constraint\n    m.addConstr(20 * C + 30 * H <= 450, name=\"FoodLimit\")\n    # Horse-to-camel ratio\n    m.addConstr(H <= C, name=\"HorseCamelRatio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_animals = m.objVal\n        return total_animals\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_animals = optimize_animals()\n    if min_animals is not None:\n        print(f\"Minimum Total Animals (Camels + Horses): {min_animals}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A144",
  "description": "A snack exporter sends snacks to his customer in small and large suitcases. A small suitcase can hold 50 snacks while a large suitcase can hold 80 snacks. Most customer prefer small suitcases, and so at least twice as many small suitcases must be used as large suitcases. The exporter has available at most 70 small suitcases and 50 large suitcases. If he must send at least 15 large suitcases and can send  at most 70 suitcases in total, how many of each should he send to maximize the total number of snacks that can be delivered?",
  "ground_truth": 4190.0,
  "formulation": null,
  "correct_program": "def optimize_snacks():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Snack_Suitcases_Maximize\")\n\n    # Decision variables\n    # x: number of small suitcases\n    # y: number of large suitcases\n    x = m.addVar(vtype=GRB.INTEGER, name=\"small_suitcases\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"large_suitcases\")\n\n    # Set objective: maximize total snacks\n    m.setObjective(50 * x + 80 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(x - 2 * y >= 0, \"preference_constraint\")\n    m.addConstr(x <= 70, \"max_small\")\n    m.addConstr(y <= 50, \"max_large\")\n    m.addConstr(y >= 15, \"min_large\")\n    m.addConstr(x + y <= 70, \"total_limit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum total snacks\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_snacks = optimize_snacks()\n    if max_snacks is not None:\n        print(f\"Maximum Snacks in Suitcases: {max_snacks}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A145",
  "description": "A mail delivery service in an island village delivers mail by regular and speed boats. A regular boat can carry 20 pieces of mail per trip and uses 10 liters of gas. A speed boat can carry 30 pieces of mail per trip and uses 20 liters of gas. There can be at most 20 regular boat trips. Since customers want their mail as fast as possible, at least 50% of the trips must be made by speed boats. If the service needs to deliver 1000 pieces of mail, how many trips of each should be made to minimize the total amount of gas consumed?",
  "ground_truth": 600.0,
  "formulation": null,
  "correct_program": "def optimize_mail_delivery():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MailDeliveryOptimization\")\n    \n    # Decision variables\n    R = m.addVar(vtype=GRB.INTEGER, name=\"RegularTrips\", lb=0, ub=20)\n    S = m.addVar(vtype=GRB.INTEGER, name=\"SpeedTrips\", lb=0)\n    \n    # Set objective: minimize total gas consumption\n    m.setObjective(10 * R + 20 * S, GRB.MINIMIZE)\n    \n    # Add constraints\n    # Mail delivery constraint\n    m.addConstr(20 * R + 30 * S >= 1000, name=\"MailDelivery\")\n    # Regular trips limit\n    m.addConstr(R <= 20, name=\"MaxRegularTrips\")\n    # Speed trips at least 50% of total trips\n    m.addConstr(S >= R, name=\"SpeedAtLeastHalf\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total gas consumption\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_gas = optimize_mail_delivery()\n    if min_gas is not None:\n        print(f\"Minimum Total Gas Consumption: {min_gas}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A146",
  "description": "A chicken farmer has sold his chicken and they need to be transported either by bus or by car. A bus can take 100 chicken and takes 2 hours per trip. A car can take 40 chicken and takes 1.5 hours per trip. There can be at most 10 bus trips and at least 60% of the trips must be by car. If the farmer needs to transport 1200 chicken, how many trips of each should be done to minimize the total time needed to transport the chicken?",
  "ground_truth": 33.5,
  "formulation": null,
  "correct_program": "def optimize_transportation():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"ChickenTransport\")\n\n    # Decision variables\n    x = m.addVar(vtype=GRB.INTEGER, name=\"bus_trips\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"car_trips\")\n\n    # Set objective: minimize total time\n    m.setObjective(2 * x + 1.5 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Capacity constraint\n    m.addConstr(100 * x + 40 * y >= 1200, name=\"capacity\")\n    # Bus trip limit\n    m.addConstr(x <= 10, name=\"max_bus_trips\")\n    # Trip ratio constraint (at least 60% by car)\n    m.addConstr(y >= 1.5 * x, name=\"car_ratio\")\n    # Non-negativity is implicit in variable definition\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total time\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_transportation()\n    if min_time is not None:\n        print(f\"Minimum Total Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A147",
  "description": "Children can go to school either by van or by minibus. A van can take 6 kids and produces 7 units of pollution. A minibus can take 10 kids and produced 10 units of pollution. There are at least 150 kids than need to go to school and at most 10 minibuses can be used. In addition, the number of vans used must exceed the number of minibuses. How many of each should be used to minimize the total amount of pollution produced?",
  "ground_truth": 160.0,
  "formulation": null,
  "correct_program": "def optimize_transportation(pollution_van=7, pollution_minibus=10, capacity_van=6, capacity_minibus=10, min_kids=150, max_minibuses=10):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"SchoolTransportPollutionMinimization\")\n    \n    # Decision variables\n    V = m.addVar(vtype=GRB.INTEGER, name=\"Vans\", lb=0)\n    M = m.addVar(vtype=GRB.INTEGER, name=\"Minibuses\", lb=0)\n    \n    # Set objective: minimize total pollution\n    m.setObjective(pollution_van * V + pollution_minibus * M, GRB.MINIMIZE)\n    \n    # Capacity constraint: at least 150 kids transported\n    m.addConstr(capacity_van * V + capacity_minibus * M >= min_kids, name=\"Capacity\")\n    \n    # Max number of minibuses\n    m.addConstr(M <= max_minibuses, name=\"MaxMinibuses\")\n    \n    # Vans must exceed minibuses: V > M\n    # Gurobi does not support strict inequalities directly, so we model V >= M + 1\n    m.addConstr(V >= M + 1, name=\"V_greater_than_M\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the total pollution of the optimal solution\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_pollution = optimize_transportation()\n    if min_pollution is not None:\n        print(f\"Minimum Total Pollution: {min_pollution}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A148",
  "description": "A recycling company collects recycling from neighborhoods using small and large bins. A small bin requires 2 workers while a large bin requires 5 workers. A small bin can hold 25 units of recycling material and a large bin can hold 60 units of recycling material. The company has available 100 workers. Because most people don't recycle, the number of small bins must be three times the number of large bins. In addition, there must be at least 10 small bins and 4 large bins. How many of each bin type should be used to maximize the total amount of recycling material that can be collected?",
  "ground_truth": 1215.0,
  "formulation": null,
  "correct_program": "def optimize_recycling_bins():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    model = Model(\"RecyclingBins\")\n\n    # Decision variables\n    # Number of large bins\n    L = model.addVar(vtype=GRB.INTEGER, name=\"LargeBins\")\n    # Number of small bins\n    S = model.addVar(vtype=GRB.INTEGER, name=\"SmallBins\")\n\n    # Set the objective: maximize total recycling units\n    # Since S = 3L, we can directly relate the objective to L\n    # But for clarity, define the objective as 25*S + 60*L\n    model.setObjective(25 * S + 60 * L, GRB.MAXIMIZE)\n\n    # Constraints\n    # Relationship between small and large bins\n    model.addConstr(S == 3 * L, \"SmallLargeRelation\")\n    # Worker constraint\n    model.addConstr(2 * S + 5 * L <= 100, \"WorkerLimit\")\n    # Minimum small bins\n    model.addConstr(S >= 10, \"MinSmallBins\")\n    # Minimum large bins\n    model.addConstr(L >= 4, \"MinLargeBins\")\n    # Non-negativity is implicit in variable definition\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        total_recycling = model.objVal\n        # Retrieve values of decision variables\n        small_bins = S.X\n        large_bins = L.X\n        return total_recycling\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_recycling = optimize_recycling_bins()\n    if max_recycling is not None:\n        print(f\"Maximum Total Recycling Units: {max_recycling}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A149",
  "description": "A toy store hires seasonal and full-time volunteers to deliver gifts and gives them points for service. A seasonal volunteer can deliver 5 gifts and gets 2 points. A full-time volunteer can deliver 8 gifts and gets 5 points. The store can only give out 200 points. In addition, a maximum of 30% of the volunteers can be seasonal and at least 10 must be full-time. How many of each volunteer is needed to maximize the total number of gifts that can be delivered?",
  "ground_truth": 342.0,
  "formulation": null,
  "correct_program": "def optimize_volunteers():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"VolunteerOptimization\")\n\n    # Decision variables\n    S = m.addVar(vtype=GRB.INTEGER, name=\"Seasonal\")\n    F = m.addVar(vtype=GRB.INTEGER, name=\"FullTime\")\n\n    # Set objective: maximize total gifts\n    m.setObjective(5 * S + 8 * F, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Points constraint\n    m.addConstr(2 * S + 5 * F <= 200, name=\"PointsLimit\")\n    # Seasonal volunteers limit (7S <= 3F)\n    m.addConstr(7 * S <= 3 * F, name=\"SeasonalLimit\")\n    # Minimum full-time volunteers\n    m.addConstr(F >= 10, name=\"MinFullTime\")\n    # Non-negativity is implicit in variable definitions\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum total gifts delivered\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_gifts = optimize_volunteers()\n    if max_gifts is not None:\n        print(f\"Maximum Gifts Delivered: {max_gifts}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A150",
  "description": "A jam company sends its product out in small and large jars. A small jar can hold 50 ml of jam while a large jar can hold 200 ml of jam. Most store prefer the smaller size and so the number of large jars cannot exceed the number of small jars. If the company wants to ship at least 100000 ml of jam, find the minimum number of jars that can be used.",
  "ground_truth": 800.0,
  "formulation": null,
  "correct_program": "import gurobipy as gp\nfrom gurobipy import GRB\n\ndef minimize_jars(volume_threshold=100000, small_jar_ml=50, large_jar_ml=200):\n    \"\"\"\n    Finds the minimum total number of jars (small + large) needed to ship at least\n    'volume_threshold' ml of jam, with the constraint that the number of large jars\n    cannot exceed the number of small jars.\n    \n    Args:\n        volume_threshold (int): Minimum total volume of jam to ship (default: 100000 ml).\n        small_jar_ml (int): Volume of jam in a small jar (default: 50 ml).\n        large_jar_ml (int): Volume of jam in a large jar (default: 200 ml).\n        \n    Returns:\n        int or None: The minimum total number of jars if feasible, else None.\n    \"\"\"\n    # Create a new model\n    model = gp.Model(\"Minimize_Jars\")\n    \n    # Decision variables: number of small and large jars\n    x = model.addVar(name=\"small_jars\", vtype=GRB.INTEGER, lb=0)\n    y = model.addVar(name=\"large_jars\", vtype=GRB.INTEGER, lb=0)\n    \n    # Set objective: minimize total jars\n    model.setObjective(x + y, GRB.MINIMIZE)\n    \n    # Add constraints\n    # Volume constraint\n    model.addConstr(small_jar_ml * x + large_jar_ml * y >= volume_threshold, \"volume_constraint\")\n    # Preference constraint\n    model.addConstr(y <= x, \"preference_constraint\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        total_jars = int(x.X + y.X)\n        return total_jars\n    else:\n        return None\n# Example usage \nif __name__ == \"__main__\":\n    min_jars = minimize_jars()\n    if min_jars is not None:\n        print(f\"Minimum Total Jars: {min_jars}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A151",
  "description": "A corn farmer sends his corn to the city by either tractor or car.  A tractor can carry 40 kg of corn while a car can carry 20 kg of corn. Since tractors are very slow, the number of cars used has to be at least twice the number of tractors used. If at least 500 kg of corn need to be sent to the city, minimize the total number of tractors and cars needed.",
  "ground_truth": 19.0,
  "formulation": null,
  "correct_program": "import gurobipy as gp\nfrom gurobipy import GRB\n\ndef optimize_transportation(\n    capacity_truck=40,     # capacity of a tractor in kg\n    capacity_car=20,       # capacity of a car in kg\n    min_corn=500,          # minimum kg of corn to send\n    ratio_cars_to_tractors=2  # cars >= 2 * tractors\n):\n    # Create a new model\n    model = gp.Model(\"CornTransportOptimization\")\n    \n    # Decision variables: number of tractors and cars\n    x = model.addVar(vtype=GRB.INTEGER, name=\"tractors\", lb=0)\n    y = model.addVar(vtype=GRB.INTEGER, name=\"cars\", lb=0)\n    \n    # Set objective: minimize total number of vehicles\n    model.setObjective(x + y, GRB.MINIMIZE)\n    \n    # Capacity constraint: total transported >= min_corn\n    model.addConstr(capacity_truck * x + capacity_car * y >= min_corn, name=\"capacity\")\n    \n    # Ratio constraint: cars >= 2 * tractors\n    model.addConstr(y >= ratio_cars_to_tractors * x, name=\"ratio\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the minimal total number of vehicles\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_vehicles = optimize_transportation()\n    if min_vehicles is not None:\n        print(f\"Minimum Total Vehicles: {min_vehicles}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A152",
  "description": "A village hosts a banquet and provides bike and car transportation for everyone. A bike can take 3 people while a car can take 5 people. Since cars are more expensive, at most 40% of the vehicles can be cars. If the village needs to transport at least 500 people, how many of each vehicle should be used to minimize the total number of bikes needed?",
  "ground_truth": 80.0,
  "formulation": null,
  "correct_program": "def optimize_transportation():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"TransportationOptimization\")\n\n    # Decision variables\n    b = m.addVar(vtype=GRB.INTEGER, name=\"bikes\", lb=0)\n    c = m.addVar(vtype=GRB.INTEGER, name=\"cars\", lb=0)\n\n    # Set objective: minimize number of bikes\n    m.setObjective(b, GRB.MINIMIZE)\n\n    # Add capacity constraint\n    m.addConstr(3 * b + 5 * c >= 500, name=\"capacity_constraint\")\n\n    # Add vehicle ratio constraint\n    # c <= (2/3) * b\n    m.addConstr(c <= (2/3) * b, name=\"vehicle_ratio_constraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal number of bikes\n        return b.X\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_bikes = optimize_transportation()\n    if min_bikes is not None:\n        print(f\"Minimum number of bikes: {min_bikes}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A153",
  "description": "An industrial tire company delivers large tires for equipment to remote engineering sites either by cargo planes or ultrawide trucks. Each cargo plane can transport 10 tires per trip and costs $1000. Each ultrawide truck can transport 6 tires per trip and costs $700. The company needs to transport at least 200 tires and has available $22000. Because most remote sites don't have proper airports, the number of plane trips cannot exceed the number of ultrawide truck trips. How many trips of each should be done to minimize the total number of trips?",
  "ground_truth": 26.0,
  "formulation": null,
  "correct_program": "def optimize_trips():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"TireTransportOptimization\")\n\n    # Decision variables\n    x = m.addVar(vtype=GRB.INTEGER, name=\"plane_trips\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"truck_trips\")\n\n    # Set objective: minimize total trips\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Tire delivery constraint\n    m.addConstr(10 * x + 6 * y >= 200, name=\"TireRequirement\")\n    # Budget constraint\n    m.addConstr(1000 * x + 700 * y <= 22000, name=\"Budget\")\n    # Trip ratio constraint\n    m.addConstr(x <= y, name=\"TripRatio\")\n    # Non-negativity is implicit in variable definition\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the total number of trips in the optimal solution\n        total_trips = m.objVal\n        return total_trips\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_trips = optimize_trips()\n    if min_trips is not None:\n        print(f\"Minimum Total Trips: {min_trips}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A154",
  "description": "A water salesman collects water from a glacier and transports it in either small or large kegs. A small keg can hold 40 liters of water while a large keg can hold 100 liters of water. The salesman has available at most 30 small kegs and 10 large kegs. Since small kegs are easier to carry, at least twice as may small kegs must be used than large kegs. If he can transport at most 25 kegs total and at least 5 kegs must be large, how many of each should he use to maximize the total amount of glacial water he can transport?",
  "ground_truth": 1480.0,
  "formulation": null,
  "correct_program": "def optimize_water_transport():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Water_Transport_Maximize\")\n\n    # Decision variables\n    # x: number of small kegs\n    # y: number of large kegs\n    x = m.addVar(vtype=GRB.INTEGER, name=\"small_kegs\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"large_kegs\")\n\n    # Set objective: maximize total liters of water transported\n    m.setObjective(40 * x + 100 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(x <= 30, \"max_small_kegs\")\n    m.addConstr(y <= 10, \"max_large_kegs\")\n    m.addConstr(x >= 2 * y, \"small_at_least_twice_large\")\n    m.addConstr(x + y <= 25, \"total_kegs_limit\")\n    m.addConstr(y >= 5, \"min_large_kegs\")\n    m.addConstr(x >= 0, \"non_negative_small\")\n    m.addConstr(y >= 0, \"non_negative_large\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum total water transported\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_water = optimize_water_transport()\n    if max_water is not None:\n        print(f\"Maximum Total Water Transported: {max_water} liters\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A155",
  "description": "A tropical city full of islands sends mail either by submarine or by boat. A submarine can carry 100 pieces of mail per trip and uses 30 liters of gas. A boat can carry 80 pieces of mail per trip and uses 25 liters of gas. There can be at most 6 submarine trips and a minimum of 50% of the trips must be by boat. If the city needs to transport at least 1000 pieces of mail, how many of each transportation should they use to minimize the total amount of gas used?",
  "ground_truth": 310.0,
  "formulation": null,
  "correct_program": "def optimize_mail_transport(\n    max_sub_trips=6,\n    min_total_mail=1000,\n    mail_per_sub=100,\n    mail_per_boat=80,\n    gas_per_sub=30,\n    gas_per_boat=25\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"MailTransportMinGas\")\n\n    # Decision variables: number of trips by submarine and boat\n    x = model.addVar(vtype=GRB.INTEGER, name=\"submarine_trips\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"boat_trips\")\n\n    # Set objective: minimize total gas\n    model.setObjective(gas_per_sub * x + gas_per_boat * y, GRB.MINIMIZE)\n\n    # Add constraints\n    model.addConstr(x <= max_sub_trips, \"max_sub_trips\")\n    model.addConstr(mail_per_sub * x + mail_per_boat * y >= min_total_mail, \"mail_requirement\")\n    model.addConstr(y >= x, \"boat_at_least_half\")  # y >= x\n\n    # Non-negativity constraints are implicit in variable definitions\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal total gas used\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    total_gas = optimize_mail_transport()\n    if total_gas is not None:\n        print(f\"Minimum Total Gas Consumption: {total_gas}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A156",
  "description": "The weather is freezing and the fish in the pond need to be transported either by helicopter or car. A helicopter can take 30 fish per trip and takes 40 minutes. A car can take 20 fish per trip and takes 30 minutes. Since helicopter trips are expensive, there can be at most 5 helicopter trips. In addition, at least 60% of the trips should be by car. If at least 300 fish need to transported, how many of each trip should be taken to minimize the total time needed?",
  "ground_truth": 430.0,
  "formulation": null,
  "correct_program": "def optimize_fish_transport():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"FishTransport\")\n\n    # Decision variables\n    h = m.addVar(vtype=GRB.INTEGER, name=\"helicopter_trips\", lb=0, ub=5)\n    c = m.addVar(vtype=GRB.INTEGER, name=\"car_trips\", lb=0)\n\n    # Set objective: minimize total time\n    m.setObjective(40 * h + 30 * c, GRB.MINIMIZE)\n\n    # Add constraints\n    # Fish transported constraint\n    m.addConstr(30 * h + 20 * c >= 300, name=\"fish_transport\")\n    # Trip proportion constraint\n    m.addConstr(c >= 1.5 * h, name=\"car_min_trips\")\n    # h <= 5 is already enforced by ub=5\n    # Non-negativity is enforced by lb=0\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total time\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_fish_transport()\n    if min_time is not None:\n        print(f\"Minimum Total Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A157",
  "description": "A tourist spot in the mountains allows visitors to travel to the top either by hot-air balloon or gondola lift. A hot air balloon can carry 4 visitors while a gondola lift can carry 6 visitors. Each hot air balloon produces 10 units of pollution while each gondola lift produces 15 units of pollution. There can be at most 10 hot-air balloon rides and at least 70 visitors need to be transported. How many of each type of transport method should be taken to minimize the total pollution produced?",
  "ground_truth": 175.0,
  "formulation": null,
  "correct_program": "def minimize_pollution():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"TouristTransportPollution\")\n\n    # Decision variables\n    # x: number of hot-air balloon rides\n    # y: number of gondola lift rides\n    x = m.addVar(vtype=GRB.INTEGER, name=\"hot_air_balloons\", lb=0, ub=10)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"gondola_lifts\", lb=0)\n\n    # Set objective: minimize total pollution\n    m.setObjective(10 * x + 15 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Capacity constraint\n    m.addConstr(4 * x + 6 * y >= 70, \"capacity\")\n    # Hot-air balloon ride limit\n    m.addConstr(x <= 10, \"max_balloons\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_pollution = minimize_pollution()\n    if min_pollution is not None:\n        print(f\"Minimum Total Pollution: {min_pollution}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A158",
  "description": "A factory transports rice to the city in horse-drawn carts that are either medium or large size. A medium sized cart requires 2 horses and can carry 30 kg of rice. A large sized cart requires 4 horses and can carry 70 kg of rice.  The factory has 60 horses available. Because the horses don't get along well, the number of medium sized carts must be three times the number of large sized carts. In addition, there must be at least 5 medium sized carts and at least 5 large sized carts. How many of each cart size should be used to maximize the amount of rice that can be transported?",
  "ground_truth": 960.0,
  "formulation": null,
  "correct_program": "def optimize_rice_transport():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"RiceTransport\")\n\n    # Decision variables\n    # Since M = 3L, we only need to define L, and M is derived\n    L = m.addVar(vtype=GRB.INTEGER, name=\"L\")\n    M = m.addVar(vtype=GRB.INTEGER, name=\"M\")\n\n    # Set the objective: maximize total rice transported\n    # Total rice = 30*M + 70*L\n    # Since M = 3L, total rice = 90*L + 70*L = 160*L\n    m.setObjective(160 * L, GRB.MAXIMIZE)\n\n    # Add constraints\n    # M = 3L\n    m.addConstr(M == 3 * L, \"cart_relation\")\n    # Horse constraint\n    m.addConstr(2 * M + 4 * L <= 60, \"horse_limit\")\n    # Minimum carts\n    m.addConstr(L >= 5, \"min_large_carts\")\n    m.addConstr(M >= 5, \"min_medium_carts\")\n    # Link M and L to ensure integrality and consistency\n    # (M is defined as 3L, but to ensure M is integer, L must be integer)\n    # Already defined as integer, so no extra constraint needed\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Retrieve the value of L\n        optimal_L = int(L.X)\n        # Compute M\n        optimal_M = int(M.X)\n        # Compute total rice\n        total_rice = 160 * optimal_L\n        return total_rice\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_rice = optimize_rice_transport()\n    if max_rice is not None:\n        print(f\"Maximum Total Rice Transported: {max_rice} kg\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A159",
  "description": "A dog school trains labradors and golden retrievers to deliver newspaper. A labrador can deliver 7 newspapers at a time and requires 5 small bone treats for service. A golden retriever can deliver 10 newspapers at a time and requires 6 small bone treats per service. The school only has 1500 small bone treats available. In addition, at least 50 golden retrievers must be used and at most 60% of the dogs can be labradors. How many of each dog should be used to maximize the number of newspapers that can be delivered?",
  "ground_truth": 2500.0,
  "formulation": null,
  "correct_program": "def optimize_dogs(max_treats=1500, min_golden=50, max_lab_ratio=0.6):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"DogSchoolOptimization\")\n    m.setParam('OutputFlag', 0)  # Silence Gurobi output\n\n    # Decision variables\n    L = m.addVar(name=\"Labradors\", vtype=GRB.INTEGER, lb=0)\n    G = m.addVar(name=\"Goldens\", vtype=GRB.INTEGER, lb=min_golden)\n\n    # Objective: Maximize total newspapers delivered\n    m.setObjective(7 * L + 10 * G, GRB.MAXIMIZE)\n\n    # Constraints\n    # Bone treat constraint\n    m.addConstr(5 * L + 6 * G <= max_treats, name=\"TreatsLimit\")\n    # Golden retriever minimum\n    m.addConstr(G >= min_golden, name=\"MinGoldens\")\n    # Labrador proportion constraint: L <= 0.6 * (L + G)\n    # Rearranged: 2L <= 3G\n    m.addConstr(2 * L <= 3 * G, name=\"LabradorProportion\")\n\n    # Optimize\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_newspapers = m.objVal\n        return total_newspapers\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_newspapers = optimize_dogs()\n    if max_newspapers is not None:\n        print(f\"Maximum Newspapers Delivered: {max_newspapers}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A160",
  "description": "A construction company in the tropics uses cows and elephants to carry bricks. A cow can carry 20 bricks on its back while an elephant can carry 50 bricks on its back. To avoid having elephants create too much traffic, the number of elephant cannot exceed the number of cows. In addition, there can be at most twice the number of cows as elephants. If the company needs to transport at least 1000 bricks, find the minimum number of animals, cows and elephants, that can be used..",
  "ground_truth": 29.0,
  "formulation": null,
  "correct_program": "def minimize_animals(\n    bricks_required=1000,\n    bricks_per_cow=20,\n    bricks_per_elephant=50\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Minimize Animals\")\n\n    # Decision variables: number of cows and elephants\n    x = model.addVar(vtype=GRB.INTEGER, name=\"cows\", lb=0)\n    y = model.addVar(vtype=GRB.INTEGER, name=\"elephants\", lb=0)\n\n    # Set the objective: minimize total animals\n    model.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Brick transportation constraint\n    model.addConstr(bricks_per_cow * x + bricks_per_elephant * y >= bricks_required, \"bricks_constraint\")\n    # Elephants cannot exceed cows\n    model.addConstr(y <= x, \"elephants_not_exceed_cows\")\n    # At most twice the number of cows as elephants\n    model.addConstr(x <= 2 * y, \"cows_at_most_twice_elephants\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        total_animals = x.X + y.X\n        return total_animals\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    total_animals = minimize_animals()\n    if total_animals is not None:\n        print(f\"Minimum total number of animals: {total_animals}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A161",
  "description": "A farmer on an island sends corn to the main land either by ferry or light rail. Each ferry trip can take 20 boxes of corn while each light rail trip can take 15 boxes of corn. Since ferry trips are slow, the number of light rail trip has to be at least 4 times the number of ferry trips. If the farmer wants to send at least 500 boxes of corn, minimize the total number of trips of either type needed.",
  "ground_truth": 32.0,
  "formulation": null,
  "correct_program": "def optimize_corn_transport(\n    min_boxes=500,\n    ferry_capacity=20,\n    rail_capacity=15,\n    min_ratio=4\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Farmer_Corn_Transport\")\n\n    # Decision variables: number of ferry trips and light rail trips\n    F = model.addVar(vtype=GRB.INTEGER, name=\"FerryTrips\", lb=0)\n    L = model.addVar(vtype=GRB.INTEGER, name=\"RailTrips\", lb=0)\n\n    # Set the objective: minimize total trips\n    model.setObjective(F + L, GRB.MINIMIZE)\n\n    # Add constraints\n    # Capacity constraint: total boxes >= min_boxes\n    model.addConstr(20 * F + 15 * L >= min_boxes, name=\"TotalBoxes\")\n    # Trip ratio constraint: L >= 4 * F\n    model.addConstr(L >= min_ratio * F, name=\"TripRatio\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        total_trips = F.X + L.X\n        return total_trips\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_transport = optimize_corn_transport()\n    if min_transport is not None:\n        print(f\"Minimum Total Transport (Ferry + Rail): {min_transport}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A162",
  "description": "A factory provides rides for its employees in either taxis or company cars. Each taxi ride can take 2 employees while each company car ride can take 3 employees. Since buying and maintaining cars is expensive, at most 60% of the rides can be company car rides. However, there has to be at least 30 company car rides. If the company needs to transport at least 500 employees, how many rides of each should be done to minimize the total number of taxi rides.",
  "ground_truth": 78.0,
  "formulation": null,
  "correct_program": "def optimize_rides():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Employee_Rides_Optimization\")\n    \n    # Decision variables\n    T = m.addVar(name=\"Taxi_Rides\", vtype=GRB.INTEGER, lb=0)\n    C = m.addVar(name=\"Company_Car_Rides\", vtype=GRB.INTEGER, lb=30)\n    \n    # Set objective: minimize taxi rides\n    m.setObjective(T, GRB.MINIMIZE)\n    \n    # Add constraints\n    # Employee transportation constraint\n    m.addConstr(2 * T + 3 * C >= 500, name=\"EmployeeTransport\")\n    \n    # Ratio constraint: T >= (2/3) * C\n    m.addConstr(T >= (2/3) * C, name=\"CarRideRatio\")\n    \n    # C >= 30 is already enforced by lb=30\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal number of taxi rides\n        return T.X\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_taxi_rides = optimize_rides()\n    if min_taxi_rides is not None:\n        print(f\"Minimum number of taxi rides: {min_taxi_rides}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A163",
  "description": "A grape farmer transports his grapes in either small crates or large crates. A small crate can take 200 grapes while a large crate can take 500.  Because his customers prefer smaller crates, at least 3 times as many small crates must be used than large crates. The farmer has available at most 100 small crates and at most 50 large crates. In addition, his truck can take at most 60 crates total and he must use at least 10 large crates. How many of each crate should he use to maximize the total number of grapes he can transport?",
  "ground_truth": 16500.0,
  "formulation": null,
  "correct_program": "def optimize_grape_transport(\n    max_small_crates=100,\n    max_large_crates=50,\n    min_large_crates=10,\n    max_total_crates=60,\n    small_crate_capacity=200,\n    large_crate_capacity=500\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"GrapeTransport\")\n\n    # Decision variables\n    x = model.addVar(vtype=GRB.INTEGER, name=\"small_crates\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"large_crates\")\n\n    # Set objective: maximize total grapes\n    model.setObjective(\n        small_crate_capacity * x + large_crate_capacity * y,\n        GRB.MAXIMIZE\n    )\n\n    # Add constraints\n    model.addConstr(x >= 3 * y, name=\"small_crate_pref\")\n    model.addConstr(x <= max_small_crates, name=\"max_small_crates\")\n    model.addConstr(y <= max_large_crates, name=\"max_large_crates\")\n    model.addConstr(x + y <= max_total_crates, name=\"truck_capacity\")\n    model.addConstr(y >= min_large_crates, name=\"min_large_crates\")\n    model.addConstr(x >= 0, name=\"nonneg_small\")\n    model.addConstr(y >= 0, name=\"nonneg_large\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum total grapes transported\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_grapes = optimize_grape_transport()\n    if max_grapes is not None:\n        print(f\"Maximum Total Grapes Transported: {max_grapes}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A164",
  "description": "A shipping company need to transport packages by either truck or car. A truck can transport 50 packages per trip while a car can transport 30 packages per trip. In addition, a truck uses 20 liters of gas per trip while a car uses 15 liters of gas per trip. There can be at most 5 truck trips made and at least 30% of all the trips must be made by car. The company needs to transport at least 500 packages. How many of each transportation should they use to minimize the total amount of gas consumed?",
  "ground_truth": 230.0,
  "formulation": null,
  "correct_program": "def optimize_transportation():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"TransportationOptimization\")\n\n    # Decision variables\n    T = m.addVar(vtype=GRB.INTEGER, name=\"TruckTrips\", lb=0, ub=5)\n    C = m.addVar(vtype=GRB.INTEGER, name=\"CarTrips\", lb=0)\n\n    # Set objective: minimize total gas consumption\n    m.setObjective(20 * T + 15 * C, GRB.MINIMIZE)\n\n    # Add constraints\n    # Capacity constraint\n    m.addConstr(50 * T + 30 * C >= 500, name=\"PackageRequirement\")\n    # Trip ratio constraint\n    m.addConstr(C >= (3/7) * T, name=\"CarTripRatio\")\n    # T is at most 5 (already set as ub=5)\n    # T >= 0 (lb=0), C >= 0 (lb=0)\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total gas consumption\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_gas_consumption = optimize_transportation()\n    if min_gas_consumption is not None:\n        print(f\"Minimum Total Gas Consumption: {min_gas_consumption}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A165",
  "description": "There has been a horrible accident and patients need to be taken to the hospital by either a helicopter or bus. A helicopter can transport 5 patients per trip and takes 1 hour. On the other hand, a bus can transport 8 patients per trip and takes 3 hours. At least 120 patients need to be transported and at least 30% of the trips should be by helicopter. In addition, there can be at most 10 bus trips. How should the patients be taken to minimize the total time to transport the patients?",
  "ground_truth": 24.0,
  "formulation": null,
  "correct_program": "def optimize_transportation():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"PatientTransport\")\n\n    # Decision variables\n    h = m.addVar(vtype=GRB.INTEGER, name=\"helicopter_trips\", lb=0)\n    b = m.addVar(vtype=GRB.INTEGER, name=\"bus_trips\", lb=0)\n\n    # Set objective: minimize total transportation time\n    m.setObjective(h + 3 * b, GRB.MINIMIZE)\n\n    # Add constraints\n    # Patients transported constraint\n    m.addConstr(5 * h + 8 * b >= 120, name=\"patients_min\")\n    # Trip proportion constraint: h >= (3/7) * b\n    m.addConstr(h >= (3/7) * b, name=\"trip_ratio\")\n    # Bus trip limit\n    m.addConstr(b <= 10, name=\"bus_limit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_transportation()\n    if min_time is not None:\n        print(f\"Minimum Total Transportation Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A166",
  "description": "Employees have the option of car-pooling to work or taking the company bus. A car can take 4 employees and produces 10 units of pollution, while a bus can take 20 employees and produces 30 units of pollution. At least 300 employees need to be transported and at most 4 buses can be used. How many of each type of transport should be taken to minimize the total pollution produced.",
  "ground_truth": 670.0,
  "formulation": null,
  "correct_program": "def optimize_transportation():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Employee_Transport_MinPollution\")\n\n    # Decision variables\n    # Number of cars\n    x = m.addVar(vtype=GRB.INTEGER, name=\"cars\", lb=0)\n    # Number of buses\n    y = m.addVar(vtype=GRB.INTEGER, name=\"buses\", lb=0, ub=4)\n\n    # Set objective: minimize total pollution\n    m.setObjective(10 * x + 30 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Ensure at least 300 employees are transported\n    m.addConstr(4 * x + 20 * y >= 300, \"transport_capacity\")\n    # Limit on number of buses\n    m.addConstr(y <= 4, \"bus_limit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total pollution\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    min_pollution = optimize_transportation()\n    if min_pollution is not None:\n        print(f\"Minimum Total Pollution: {min_pollution}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A167",
  "description": "A magic school sends letters to student either by carrier pigeons or owls. A carrier pigeon can carry two letters at a time and requires 3 treats for service. An owl can carry 5 letters at a time and requires 5 treats for service.  At most 40% of the birds can be owls. In addition, the school only has 1000 treats available and at least 20 carrier pigeons must be uses. How many of each bird can be used to maximize the total number of letters that can be sent.",
  "ground_truth": 841.0,
  "formulation": null,
  "correct_program": "def optimize_bird_usage(\n    min_pigeons=20,\n    max_treats=1000,\n    max_owl_ratio=0.4\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create model\n    model = gp.Model(\"BirdLettersMaximization\")\n    model.setParam('OutputFlag', 0)  # Silence Gurobi output\n\n    # Decision variables\n    x = model.addVar(vtype=GRB.INTEGER, lb=min_pigeons, name=\"pigeons\")\n    y = model.addVar(vtype=GRB.INTEGER, lb=0, name=\"owls\")\n\n    # Objective: Maximize total letters sent\n    model.setObjective(2 * x + 5 * y, GRB.MAXIMIZE)\n\n    # Constraints\n    # Treats constraint\n    model.addConstr(3 * x + 5 * y <= max_treats, \"TreatsLimit\")\n    # Owl ratio constraint: y <= (2/3) * x\n    model.addConstr(y <= (2/3) * x, \"OwlRatio\")\n    # Pigeons at least 20\n    model.addConstr(x >= min_pigeons, \"MinPigeons\")\n\n    # Optimize\n    model.optimize()\n\n    # Check feasibility and return result\n    if model.status == GRB.OPTIMAL:\n        total_letters = model.objVal\n        return total_letters\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_letters = optimize_bird_usage()\n    if max_letters is not None:\n        print(f\"Maximum Letters Sent: {max_letters}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A168",
  "description": "An international shipping company uses large and small ships to transport containers around the world. A large ship can carry 500 containers while a small ship can carry 200 containers. Because most ports are small, the number of large ships cannot exceed the number of small ships. If the company is under contract needs to transport at least 3000 containers, find the minimum number of ships that can be used.",
  "ground_truth": 9.0,
  "formulation": null,
  "correct_program": "def minimize_ships():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Minimize_Ships\")\n\n    # Decision variables: number of large and small ships\n    L = m.addVar(vtype=GRB.INTEGER, name=\"LargeShips\", lb=0)\n    S = m.addVar(vtype=GRB.INTEGER, name=\"SmallShips\", lb=0)\n\n    # Set the objective: minimize total number of ships\n    m.setObjective(L + S, GRB.MINIMIZE)\n\n    # Add capacity constraint\n    m.addConstr(500 * L + 200 * S >= 3000, name=\"CapacityConstraint\")\n\n    # Add port constraint: large ships cannot exceed small ships\n    m.addConstr(L <= S, name=\"PortConstraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimum total number of ships\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_ships = minimize_ships()\n    if min_ships is not None:\n        print(f\"Minimum Total Ships (Large + Small): {min_ships}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A169",
  "description": "A large fishing boat sends fish back to shore either by small canoes or smaller diesel boats. A canoe can carry back 10 fish while a small diesel boat can carry back 15 fish. In order to follow environmental rules, the number of small canoes used has to be at least 3 times as many as the number of diesel boats uses. If  at least 1000 fish need to be transported to shore, minimize the total number of canoes and diesel boats needed.",
  "ground_truth": 89.0,
  "formulation": null,
  "correct_program": "def optimize_boats():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"FishingBoatsOptimization\")\n\n    # Decision variables\n    # x: number of canoes\n    # y: number of diesel boats\n    x = m.addVar(vtype=GRB.INTEGER, name=\"canoes\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"diesel_boats\", lb=0)\n\n    # Set objective: minimize total number of boats\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Fish transportation constraint\n    m.addConstr(10 * x + 15 * y >= 1000, name=\"fish_transport\")\n    # Environmental constraint\n    m.addConstr(x >= 3 * y, name=\"env_rule\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal total number of boats\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    min_boats = optimize_boats()\n    if min_boats is not None:\n        print(f\"Minimum Total Boats: {min_boats}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A170",
  "description": "A volunteer organization transports voters to the polls on Election Day either by vans or cars. They have vans which can carry 6 people and cars which can carry 3 people.  They need to transport at least 200 voters to the polls. In addition, at most 30% of the vehicles can be vans. How many of each vehicle should be used to minimize the total number of cars used?",
  "ground_truth": 37.0,
  "formulation": null,
  "correct_program": "def optimize_vehicle_allocation():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"VoterTransport\")\n\n    # Decision variables\n    V = m.addVar(vtype=GRB.INTEGER, name=\"Vans\")\n    C = m.addVar(vtype=GRB.INTEGER, name=\"Cars\")\n\n    # Set objective: minimize number of cars\n    m.setObjective(C, GRB.MINIMIZE)\n\n    # Capacity constraint: total capacity ≥ 200 voters\n    m.addConstr(6 * V + 3 * C >= 200, name=\"Capacity\")\n\n    # Vehicle ratio constraint: vans ≤ 30% of total vehicles\n    # Derived as: 7V ≤ 3C\n    m.addConstr(7 * V <= 3 * C, name=\"Vans_ratio\")\n\n    # Non-negativity constraints are implicit in variable definitions\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal number of cars used\n        return C.X\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cars = optimize_vehicle_allocation()\n    if min_cars is not None:\n        print(f\"Minimum number of cars needed: {min_cars}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A171",
  "description": "A car manufacturing company makes hamburgers and chicken wraps for workers. They need to ensure workers get at least 2200 calories, 50 grams of protein, and 70 grams of carbs. One hamburger costs $6.5 and contains 800 calories, 19 grams of protein, and 20 grams of carbs. One chicken wrap costs $4 and contains 450 calories, 12 grams of protein, and 10 grams of carbs. What is the minimum cost diet that the company can provide for its workers?",
  "ground_truth": 22.75,
  "formulation": null,
  "correct_program": "def optimize_diet(\n    calorie_req=2200,\n    protein_req=50,\n    carbs_req=70,\n    cost_hamburger=6.5,\n    cost_wrap=4,\n    calories_hamburger=800,\n    calories_wrap=450,\n    protein_hamburger=19,\n    protein_wrap=12,\n    carbs_hamburger=20,\n    carbs_wrap=10\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"DietOptimization\")\n\n    # Decision variables: number of hamburgers and wraps\n    x = model.addVar(name=\"Hamburgers\", lb=0)\n    y = model.addVar(name=\"Wraps\", lb=0)\n\n    # Set the objective: minimize total cost\n    model.setObjective(cost_hamburger * x + cost_wrap * y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Calorie constraint\n    model.addConstr(calories_hamburger * x + calories_wrap * y >= calorie_req, name=\"Calories\")\n    # Protein constraint\n    model.addConstr(protein_hamburger * x + protein_wrap * y >= protein_req, name=\"Protein\")\n    # Carbohydrate constraint\n    model.addConstr(carbs_hamburger * x + carbs_wrap * y >= carbs_req, name=\"Carbohydrates\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the minimum cost\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_diet()\n    if min_cost is not None:\n        print(f\"Minimum Cost: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A172",
  "description": "A meat processing plant uses two machines, a meat slicer and a meat packer, to make their hams and pork ribs. To produce one batch of hams requires 4 hours on the meat slicer and 2.5 hours on the meat packer. To produce one batch of pork ribs requires 2 hours on the meat slicer and 3.5 hours on the meat packer. Each machine runs for at most 4000 hours per year. If the profit per batch of hams is $150 and the profit per batch of pork ribs is $300, how many batches of each should be made to maximize profit?",
  "ground_truth": 342857.14285714284,
  "formulation": null,
  "correct_program": "def optimize_meat_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Meat_Processing_Optimization\")\n\n    # Decision variables: number of batches of hams and pork ribs\n    x = m.addVar(name=\"Hams\", lb=0)\n    y = m.addVar(name=\"Pork_Ribs\", lb=0)\n\n    # Set the objective: maximize profit\n    m.setObjective(150 * x + 300 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Meat slicer constraint\n    m.addConstr(4 * x + 2 * y <= 4000, name=\"Slicer_Time\")\n    # Meat packer constraint\n    m.addConstr(2.5 * x + 3.5 * y <= 4000, name=\"Packer_Time\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal profit\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_meat_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A173",
  "description": "An appliance company sells and installs refrigerators and stoves. Each refrigerator takes 60 minutes of mover time and 20 minutes of setup time. Each stove takes 45 minutes of mover time and 25 minutes of setup time. The company has available 20000 minutes of mover time and 13000 minutes of setup time. If the profit per refrigerator is $400 and the profit per stove is $260, how many of each should they sell in order to maximize profit?",
  "ground_truth": 133200.0,
  "formulation": null,
  "correct_program": "def optimize_appliances():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Appliance_Optimization\")\n\n    # Decision variables: number of refrigerators and stoves\n    # Both are integers and non-negative\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Refrigerators\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Stoves\", lb=0)\n\n    # Set the objective: maximize profit\n    m.setObjective(400 * x + 260 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(60 * x + 45 * y <= 20000, \"MoverTime\")\n    m.addConstr(20 * x + 25 * y <= 13000, \"SetupTime\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal profit\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_appliances()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A174",
  "description": "An office company makes desks and drawers. Each desk requires 40 minutes of assembly and 20 minutes of sanding. Each drawer requires 30 minutes of assembly and 10 minutes of sanding. The company has available 4000 minutes for assembly and 3500 minutes for sanding. If the profit per desk is $100 and the profit per drawer is $90, how many of each should the company make to maximize profit?",
  "ground_truth": 11980.0,
  "formulation": null,
  "correct_program": "def optimize_desks_drawers():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Desks_and_Drawers\")\n\n    # Decision variables: number of desks and drawers\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Desks\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Drawers\")\n\n    # Set the objective: maximize profit\n    m.setObjective(100 * x + 90 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(40 * x + 30 * y <= 4000, \"AssemblyTime\")\n    m.addConstr(20 * x + 10 * y <= 3500, \"SandingTime\")\n    m.addConstr(x >= 0, \"NonNegDesks\")\n    m.addConstr(y >= 0, \"NonNegDrawers\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal profit\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_desks_drawers()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A175",
  "description": "A milk tea shop owner would like to sell two different milk teas: black milk tea and matcha milk tea. Each contains both milk and honey. A bottle of black milk tea contains 600 grams of milk and 10 grams of honey, whereas a bottle of matcha milk tea contains 525 grams of milk and 5 grams of honey. The profit from each bottle of black milk tea sold is $7.5 and the profit from each bottle of matcha milk tea sold is $5. If his total production must not exceed his available stock of 30000 grams of milk and 500 grams of honey, how many bottles of each type of milk tea should be made to maximize profits?",
  "ground_truth": 375.0,
  "formulation": null,
  "correct_program": "def optimize_milk_tea_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MilkTeaOptimization\")\n\n    # Decision variables: number of bottles of black and matcha milk tea\n    x = m.addVar(vtype=GRB.INTEGER, name=\"BlackMilkTea\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"MatchaMilkTea\")\n\n    # Set the objective: maximize profit\n    m.setObjective(7.5 * x + 5 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Milk constraint\n    m.addConstr(600 * x + 525 * y <= 30000, \"MilkConstraint\")\n    # Honey constraint\n    m.addConstr(10 * x + 5 * y <= 500, \"HoneyConstraint\")\n    # Non-negativity is implicit in variable definition\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_milk_tea_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A176",
  "description": "A young boy is trying to grow taller by drinking milk and eating vegetables. He wants to get a minimum of 100 units of calcium and 50 units of iron per day. A glass of milk costs $1 and contains 40 units of calcium and 25 units of iron. A plate of vegetables costs $2 and contains 15 units of calcium and 30 units of iron. How many of each should he consume to minimize his cost?",
  "ground_truth": 2.5,
  "formulation": null,
  "correct_program": "def optimize_nutrition(cost_milk=1, cost_vegetables=2, calcium_milk=40, calcium_veg=15,\n                       iron_milk=25, iron_veg=30, min_calcium=100, min_iron=50):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"NutritionOptimization\")\n\n    # Decision variables: number of glasses of milk and plates of vegetables\n    x = model.addVar(name=\"milk\", lb=0)\n    y = model.addVar(name=\"vegetables\", lb=0)\n\n    # Set the objective: minimize total cost\n    model.setObjective(cost_milk * x + cost_vegetables * y, GRB.MINIMIZE)\n\n    # Add calcium constraint\n    model.addConstr(calcium_milk * x + calcium_veg * y >= min_calcium, name=\"CalciumReq\")\n    # Add iron constraint\n    model.addConstr(iron_milk * x + iron_veg * y >= min_iron, name=\"IronReq\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        return model.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_nutrition()\n    if min_cost is not None:\n        print(f\"Minimum Cost: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A177",
  "description": "Bob wants to design a diet consisting of protein bars and noodles. Assume that each serving of noodles costs $5 and contains 600 calories and 1.5 grams of protein. Assume that each serving of protein bar costs $2.5 and contains 250 calories and 5 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2000 calories and at least 16 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.",
  "ground_truth": 17.71428571428571,
  "formulation": null,
  "correct_program": "def optimize_diet():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"DietOptimization\")\n\n    # Decision variables: servings of noodles (x) and protein bars (y)\n    x = m.addVar(name=\"noodles\", lb=0)\n    y = m.addVar(name=\"protein_bars\", lb=0)\n\n    # Set the objective: minimize total cost\n    m.setObjective(5 * x + 2.5 * y, GRB.MINIMIZE)\n\n    # Add calorie constraint\n    m.addConstr(600 * x + 250 * y >= 2000, name=\"calories\")\n    # Add protein constraint\n    m.addConstr(1.5 * x + 5 * y >= 16, name=\"protein\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal cost\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_diet()\n    if min_cost is not None:\n        print(f\"Minimum Cost: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A178",
  "description": "A toy store sells plush toys and dolls. Each plush toy costs the store $3 and each doll costs the store $2. The store owner can spend at most $700 on inventory. Each plush toy is then sold for a profit of $4 while each doll is sold for a profit of $2. The owner estimates that at least 90 plush toys but at most 190 plush toys are sold each month. He also estimates that the number of dolls sold is at most twice the amount of plush toys sold. How many of each should be bought and sold to maximize profit?",
  "ground_truth": 890.0,
  "formulation": null,
  "correct_program": "def optimize_toy_store(\n    max_budget=700,\n    min_plush=90,\n    max_plush=190,\n    plush_cost=3,\n    doll_cost=2,\n    plush_profit=4,\n    doll_profit=2\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"ToyStoreProfitMaximization\")\n\n    # Decision variables\n    x = model.addVar(vtype=GRB.INTEGER, name=\"PlushToys\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"Dolls\")\n\n    # Set objective: maximize profit\n    model.setObjective(plush_profit * x + doll_profit * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Budget constraint\n    model.addConstr(plush_cost * x + doll_cost * y <= max_budget, \"BudgetLimit\")\n    # Plush toy sales bounds\n    model.addConstr(x >= min_plush, \"MinPlush\")\n    model.addConstr(x <= max_plush, \"MaxPlush\")\n    # Dolls sold constraint\n    model.addConstr(y <= 2 * x, \"DollsLimit\")\n    # Non-negativity is implicit in variable definition\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_toy_store()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A179",
  "description": "Forest Paper makes two types of products: graph paper and music paper. Each type of paper requires the use of two machines, a printing machine and a scanning machine. It takes 3 minutes on the printing machine and 5.5 minutes on the scanning machine to make a ream of graph paper. On the other hand, it takes 1.5 minutes on the printing machine and 3 minutes on the scanning machine to make a ream of music paper. Each machine is available for a maximum of 350 minutes per day. The company sells a package of graph paper at a profit of $4 and a package of music paper at a profit of $2.5. The company can sell all the paper it makes. How many reams of each type should the company produce in a day in order to maximize profit? What is that profit?",
  "ground_truth": 290.5,
  "formulation": null,
  "correct_program": "def optimize_paper_production(\n    profit_graph=4,\n    profit_music=2.5,\n    time_print_graph=3,\n    time_scan_graph=5.5,\n    time_print_music=1.5,\n    time_scan_music=3,\n    machine_time_limit=350\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Paper_Production_Maximize_Profit\")\n\n    # Decision variables: number of reams of each product\n    x = model.addVar(name=\"Graph_Paper\", lb=0, vtype=GRB.INTEGER)\n    y = model.addVar(name=\"Music_Paper\", lb=0, vtype=GRB.INTEGER)\n\n    # Set objective: maximize profit\n    model.setObjective(profit_graph * x + profit_music * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Printing machine constraint\n    model.addConstr(time_print_graph * x + time_print_music * y <= machine_time_limit, \"Printing_Time\")\n    # Scanning machine constraint\n    model.addConstr(time_scan_graph * x + time_scan_music * y <= machine_time_limit, \"Scanning_Time\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_paper_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A180",
  "description": "Calcium and Magnesium are found in two health supplements, health supplement A and health supplement B. One serving of health supplement A contains 30 grams of Calcium and 50 grams of Magnesium. One serving of health supplement B contains 60 grams of Calcium and 10 grams of Magnesium. The cost per health supplement for health supplement A is $14 and the cost per health supplement for health supplement B is $25. A patient must consume these two health supplements every day to get at least 400 grams of Calcium and 50 grams of Magnesium. Determine how much servings of each supplement the patient needs to minimize her daily cost.",
  "ground_truth": 166.66666666666669,
  "formulation": null,
  "correct_program": "def optimize_supplements():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"SupplementsOptimization\")\n\n    # Decision variables: servings of supplement A and B\n    x = m.addVar(name=\"A_servings\", lb=0)\n    y = m.addVar(name=\"B_servings\", lb=0)\n\n    # Set the objective: minimize total cost\n    m.setObjective(14 * x + 25 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Calcium constraint\n    m.addConstr(30 * x + 60 * y >= 400, name=\"CalciumRequirement\")\n    # Magnesium constraint\n    m.addConstr(50 * x + 10 * y >= 50, name=\"MagnesiumRequirement\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal cost\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_supplements()\n    if min_cost is not None:\n        print(f\"Minimum Cost: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A181",
  "description": "Lucy has a dog and she wants his food to be mixed.  In order to keep the dog healthy but also keep the food tasty, the mix needs to have a minimum of 15 units of calcium, 20 units of vitamin mix, and 20 units of protein. A regular brand costs $20 per bag and contains 4 units of calcium, 7 units of vitamin mix, and 10 units of protein. A premium brand costs $35 per bag and contains 12 units of calcium, 10 units of vitamin mix, and 16 units of protein. How many bags of each brand should Lucy mix in order to minimize cost while also meeting the taste and health requirements.",
  "ground_truth": 70.0,
  "formulation": null,
  "correct_program": "def optimize_dog_food(\n    cost_regular=20,\n    cost_premium=35,\n    calcium_regular=4,\n    calcium_premium=12,\n    vitamin_regular=7,\n    vitamin_premium=10,\n    protein_regular=10,\n    protein_premium=16,\n    calcium_req=15,\n    vitamin_req=20,\n    protein_req=20\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"DogFoodOptimization\")\n\n    # Decision variables: number of bags of each type\n    x = model.addVar(vtype=GRB.INTEGER, lb=0, name=\"Regular\")\n    y = model.addVar(vtype=GRB.INTEGER, lb=0, name=\"Premium\")\n\n    # Set objective: minimize total cost\n    model.setObjective(\n        cost_regular * x + cost_premium * y,\n        GRB.MINIMIZE\n    )\n\n    # Add constraints\n    # Calcium constraint\n    model.addConstr(\n        calcium_regular * x + calcium_premium * y >= calcium_req,\n        name=\"Calcium\"\n    )\n    # Vitamin constraint\n    model.addConstr(\n        vitamin_regular * x + vitamin_premium * y >= vitamin_req,\n        name=\"Vitamin\"\n    )\n    # Protein constraint\n    model.addConstr(\n        protein_regular * x + protein_premium * y >= protein_req,\n        name=\"Protein\"\n    )\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal cost\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_dog_food()\n    if min_cost is not None:\n        print(f\"Minimum Cost: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A182",
  "description": "Maple Oil processes three types of crude oil: light oil, non-sticky oil and heavy oil. Each tank of light oil produces a net revenue of $550, each tank of non-sticky oil produces a net revenue of $750, and each tank of heavy oil produces a net revenue of $950. To process a tank of light oil, 3 units of compound A and 3 units of compound B are required. To process a tank of non-sticky oil, 6 units of compound A and 2 units of compound B are required. To process a tank of heavy oil, 9 units of compound A and 3 units of compound B are required. Currently the company has 250 units of compound A and 150 units of compound B to process. How many full or partial tanks of each oil should the company process so that net revenue is maximized?",
  "ground_truth": 37083.333333333336,
  "formulation": null,
  "correct_program": "def optimize_crude_processing(\n    revenue_light=550,\n    revenue_non_sticky=750,\n    revenue_heavy=950,\n    compound_A_total=250,\n    compound_B_total=150\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"CrudeOilProcessing\")\n\n    # Decision variables: number of tanks processed for each oil type\n    x_L = model.addVar(name=\"LightOil\", lb=0)\n    x_N = model.addVar(name=\"NonStickyOil\", lb=0)\n    x_H = model.addVar(name=\"HeavyOil\", lb=0)\n\n    # Set the objective: maximize total revenue\n    model.setObjective(\n        revenue_light * x_L + revenue_non_sticky * x_N + revenue_heavy * x_H,\n        GRB.MAXIMIZE\n    )\n\n    # Add resource constraints\n    # Compound A constraint\n    model.addConstr(\n        3 * x_L + 6 * x_N + 9 * x_H <= compound_A_total,\n        name=\"CompoundA\"\n    )\n\n    # Compound B constraint\n    model.addConstr(\n        3 * x_L + 2 * x_N + 3 * x_H <= compound_B_total,\n        name=\"CompoundB\"\n    )\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        return model.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_revenue = optimize_crude_processing()\n    if max_revenue is not None:\n        print(f\"Maximum Revenue: ${max_revenue}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A183",
  "description": "A flooring company produces engineered laminate planks and carpets. The chief marketer reports an expected demand of at least 15,000 square feet of laminate planks and 5,000 square feet of carpets each week. The shipping contract requires a total of at least 50,000 square feet of products each week. However, due to a shortage of raw materials, no more than 40,000 square feet of laminate planks and 20,000 square feet of carpets can be produced weekly. If a square foot of laminate planks produces a $2.1 profit and a square foot of carpets yields a $3.3 profit, how many of each type of product should be made weekly to maximize the company's profit?",
  "ground_truth": 150000.0,
  "formulation": null,
  "correct_program": "def optimize_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"FlooringProduction\")\n\n    # Decision variables\n    # x: square feet of laminate planks\n    # y: square feet of carpets\n    x = m.addVar(name=\"x\", lb=15000, ub=40000, vtype=GRB.CONTINUOUS)\n    y = m.addVar(name=\"y\", lb=5000, ub=20000, vtype=GRB.CONTINUOUS)\n\n    # Set the objective: maximize profit\n    profit = 2.1 * x + 3.3 * y\n    m.setObjective(profit, GRB.MAXIMIZE)\n\n    # Add the shipping constraint\n    m.addConstr(x + y >= 50000, name=\"shipping_constraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A184",
  "description": "A man takes two supplements to get his daily iron and calcium requirements. A pill of supplement A has 5 units of iron and 10 units of calcium. A pill of supplement B contains 4 units of iron and 15 units of calcium.  The man needs a minimum of 40 units of iron and 50 units of calcium per day. If the cost per pill of supplement A is $2 and the cost per pill of supplement B is  $3, how many of each should he buy to minimize costs?",
  "ground_truth": 16.0,
  "formulation": null,
  "correct_program": "import gurobipy as gp\nfrom gurobipy import GRB\n\ndef optimize_supplements(\n    cost_A=2,        # Cost per pill of supplement A\n    cost_B=3,        # Cost per pill of supplement B\n    iron_A=5,        # Iron units in supplement A\n    calcium_A=10,     # Calcium units in supplement A\n    iron_B=4,        # Iron units in supplement B\n    calcium_B=15,     # Calcium units in supplement B\n    min_iron=40,     # Minimum iron requirement\n    min_calcium=50   # Minimum calcium requirement\n):\n    # Create a new model\n    model = gp.Model(\"SupplementsOptimization\")\n    \n    # Add decision variables (integer, non-negative)\n    x_A = model.addVar(vtype=GRB.INTEGER, lb=0, name=\"x_A\")\n    x_B = model.addVar(vtype=GRB.INTEGER, lb=0, name=\"x_B\")\n    \n    # Set the objective: minimize total cost\n    model.setObjective(cost_A * x_A + cost_B * x_B, GRB.MINIMIZE)\n    \n    # Add constraints\n    # Iron constraint\n    model.addConstr(iron_A * x_A + iron_B * x_B >= min_iron, \"IronRequirement\")\n    # Calcium constraint\n    model.addConstr(calcium_A * x_A + calcium_B * x_B >= min_calcium, \"CalciumRequirement\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal total cost\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_supplements()\n    if min_cost is not None:\n        print(f\"Minimum Cost: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A185",
  "description": "A fashion company sells regular handbags and premium handbags made of higher quality material. They can sell regular handbags at a profit of $30 each and premium handbags at a profit of $180 each. The total monthly cost of manufacturing is $200 per regular handbag and $447 per premium handbag. The company has a total budget of $250000 and can sell at most 475 handbags of either type per month. How many of each handbag should they sell to maximize its monthly profit?",
  "ground_truth": 85500.0,
  "formulation": null,
  "correct_program": "def optimize_handbags(\n    profit_regular=30,\n    profit_premium=180,\n    cost_regular=200,\n    cost_premium=447,\n    total_budget=250000,\n    max_total_handbags=475\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Handbag_Production_Optimization\")\n\n    # Decision variables: number of regular and premium handbags\n    x = model.addVar(vtype=GRB.INTEGER, name=\"Regular_Handbags\", lb=0)\n    y = model.addVar(vtype=GRB.INTEGER, name=\"Premium_Handbags\", lb=0)\n\n    # Set objective: maximize profit\n    model.setObjective(profit_regular * x + profit_premium * y, GRB.MAXIMIZE)\n\n    # Add budget constraint\n    model.addConstr(cost_regular * x + cost_premium * y <= total_budget, \"BudgetConstraint\")\n\n    # Add total handbags constraint\n    model.addConstr(x + y <= max_total_handbags, \"TotalHandbagsConstraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_handbags()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A186",
  "description": "A woman has $100000 to gamble on two sports bets: a basketball tournament, a horse race, and a soccer game. Based on simple analysis, the woman determines her chance of losing her money would be 50% for basketball tournament, 25% for horse race, and 10% for the soccer game. The payout for each dollar put on each bet will be $1.2 for basketball tournament, $0.5 for horse race, and $0.1 for the soccer game. Knowing herself, she limits her average chance of losing her money should be at most 30%. Could you help her determine how much to money to put on each sport bet to maximize her average payout?",
  "ground_truth": 42000.0,
  "formulation": null,
  "correct_program": "import gurobipy as gp\nfrom gurobipy import GRB\n\n\ndef optimize_bets(total_budget=100000, risk_limit=30000):\n    # Create a new model\n    m = gp.Model(\"BettingOptimization\")\n\n    # Decision variables\n    x_b = m.addVar(name=\"x_b\", lb=0)\n    x_h = m.addVar(name=\"x_h\", lb=0)\n    x_s = m.addVar(name=\"x_s\", lb=0)\n\n    # Set the objective: maximize expected payout\n    m.setObjective(0.6 * x_b + 0.375 * x_h + 0.09 * x_s, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Total investment equals total budget\n    m.addConstr(x_b + x_h + x_s == total_budget, name=\"TotalInvestment\")\n\n    # Risk constraint\n    m.addConstr(0.5 * x_b + 0.25 * x_h + 0.10 * x_s <= risk_limit,\n                name=\"RiskLimit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_payout = optimize_bets()\n    if max_payout is not None:\n        print(f\"Maximum Expected Payout: {max_payout}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A187",
  "description": "A repairman fixes washing machines and freezers. Each washing machine takes 30 minutes of inspection and 90 minutes of fixing time. Each freezer takes 20 minutes of inspection and 125 minutes of fixing time. The repairman has 5000 minutes available for inspection and 20000 minutes available in his schedule. If each washing machine repaired earns him $250 and each freezer repaired earns his $375, how many of each appliance should he fix to maximize his earnings?",
  "ground_truth": 60000.0,
  "formulation": null,
  "correct_program": "def optimize_repair_schedule(\n    max_inspection_time=5000,\n    max_fixing_time=20000,\n    profit_washing=250,\n    profit_freezer=375,\n    inspection_time_washing=30,\n    inspection_time_freezer=20,\n    fixing_time_washing=90,\n    fixing_time_freezer=125\n):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"ApplianceRepairOptimization\")\n    \n    # Decision variables: number of washing machines and freezers repaired\n    x = m.addVar(vtype=GRB.INTEGER, name=\"WashingMachines\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Freezers\", lb=0)\n    \n    # Set the objective: maximize profit\n    m.setObjective(profit_washing * x + profit_freezer * y, GRB.MAXIMIZE)\n    \n    # Add constraints\n    # Inspection time constraint\n    m.addConstr(inspection_time_washing * x + inspection_time_freezer * y <= max_inspection_time, \"InspectionTime\")\n    # Fixing time constraint\n    m.addConstr(fixing_time_washing * x + fixing_time_freezer * y <= max_fixing_time, \"FixingTime\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_repair_schedule()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A188",
  "description": "A small bakery has 20000 grams of batter and 14000 grams of milk to make their crepe cakes, sponge cakes, and birthday cakes. A crepe cake needs 400 grams of batter and 200 grams of milk. A sponge cake requires 500 grams of batter and 300 grams of milk. A birthday cake requires 450 grams of batter and 350 grams of milk. If the profit per crepe cake is $12, the profit per sponge cake is $10, and the profit per birthday cake is $15, how many of each should the bakery make to maximize their profit?",
  "ground_truth": 648.0,
  "formulation": null,
  "correct_program": "def optimize_cake_production(\n    batter_available=20000,\n    milk_available=14000,\n    profit_crepe=12,\n    profit_sponge=10,\n    profit_birthday=15,\n    batter_crepe=400,\n    milk_crepe=200,\n    batter_sponge=500,\n    milk_sponge=300,\n    batter_birthday=450,\n    milk_birthday=350\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Cake_Production_Maximize_Profit\")\n\n    # Decision variables: number of each cake type (integer, >= 0)\n    x1 = model.addVar(vtype=GRB.INTEGER, name=\"Crepe\", lb=0)\n    x2 = model.addVar(vtype=GRB.INTEGER, name=\"Sponge\", lb=0)\n    x3 = model.addVar(vtype=GRB.INTEGER, name=\"Birthday\", lb=0)\n\n    # Set objective: maximize total profit\n    model.setObjective(\n        profit_crepe * x1 + profit_sponge * x2 + profit_birthday * x3,\n        GRB.MAXIMIZE\n    )\n\n    # Add resource constraints\n    model.addConstr(\n        batter_crepe * x1 + batter_sponge * x2 + batter_birthday * x3 <= batter_available,\n        name=\"BatterConstraint\"\n    )\n    model.addConstr(\n        milk_crepe * x1 + milk_sponge * x2 + milk_birthday * x3 <= milk_available,\n        name=\"MilkConstraint\"\n    )\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal profit\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_cake_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A189",
  "description": "Super Shop sells cat paw snacks and gold shark snacks in bulk. It plans to sell them into two snack mix products. The first mix contains 20% cat paw snacks and 80% gold shark snacks. The second mix contains 35% cat paw snacks and 65% gold shark snacks. The store has on hand 20 kg of cat paw snacks and 50 kg of gold shark snacks. If the profit per kg of the first mix is $12 and the profit per kg of the second mix is $15, how many kg of each should be prepared to maximize profit?",
  "ground_truth": 960.0,
  "formulation": null,
  "correct_program": "def optimize_snacks():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"SnackMixOptimization\")\n\n    # Decision variables: amount of each mix to produce\n    x1 = m.addVar(name=\"x1\", lb=0)  # first mix\n    x2 = m.addVar(name=\"x2\", lb=0)  # second mix\n\n    # Set the objective: maximize profit\n    profit = 12 * x1 + 15 * x2\n    m.setObjective(profit, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Cat paw snack constraint\n    m.addConstr(0.20 * x1 + 0.35 * x2 <= 20, name=\"CatPawConstraint\")\n    # Gold shark snack constraint\n    m.addConstr(0.80 * x1 + 0.65 * x2 <= 50, name=\"GoldSharkConstraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_snacks()\n    if max_profit is not None:\n        print(f\"Maximum Profit: {max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A190",
  "description": "A taco stand sells regular tacos and deluxe tacos with extra meat. The stand makes x1 regular tacos at a profit of $2.50 each and x2 deluxe tacos at a profit of $3.55 each (x1 and x2 are unknown variables both greater than or equal to 0). There is a demand for at most 50 regular tacos and at most 40 deluxe tacos. The stand only has enough supplies to sell at most 70 tacos of either type. How many of each taco should the stand make to maximize profit?",
  "ground_truth": 217.0,
  "formulation": null,
  "correct_program": "def optimize_taco_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Taco_Stand_Profit_Maximization\")\n\n    # Decision variables\n    x1 = m.addVar(name=\"Regular_Tacos\", lb=0)\n    x2 = m.addVar(name=\"Deluxe_Tacos\", lb=0)\n\n    # Set objective: maximize profit\n    profit = 2.50 * x1 + 3.55 * x2\n    m.setObjective(profit, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(x1 <= 50, name=\"Demand_Regular\")\n    m.addConstr(x2 <= 40, name=\"Demand_Deluxe\")\n    m.addConstr(x1 + x2 <= 70, name=\"Total_Tacos\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_taco_production()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit:.2f}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A191",
  "description": "A printing company sells math workbooks and English workbooks. To meet demand, they must make at least 40 math workbooks and at least 60 English workbooks. However, they can make at most 140 math workbooks and at most 170 English workbooks. The company has a contract with a school to send at least 200 workbooks of either type. If the profit per math workbook is $15 and the profit per English workbook is $17, how many of each should the company make to maximize profit?",
  "ground_truth": 4990.0,
  "formulation": null,
  "correct_program": "def optimize_workbooks():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Workbook_Production\")\n\n    # Decision variables: number of math and English workbooks\n    # They are integers because you can't produce fractional workbooks\n    x = m.addVar(lb=40, ub=140, vtype=GRB.INTEGER, name=\"Math_Workbooks\")\n    y = m.addVar(lb=60, ub=170, vtype=GRB.INTEGER, name=\"English_Workbooks\")\n\n    # Set the objective: maximize profit\n    m.setObjective(15 * x + 17 * y, GRB.MAXIMIZE)\n\n    # Add demand constraint\n    m.addConstr(x + y >= 200, \"Demand_Constraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_workbooks()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A192",
  "description": "A music company produces two types of digital keyboards, one is full-weighted and another is semi-weighted. Both keyboards are sold for $2800 and $2400 respectively. There are about 3500 oscillator chips available every day from which the full-weighted version requires 20 chips while the semi-weighted version requires 15 chips. The company has a total of 6 working hours a day. Both of these keyboards require a production time of 1.2 hours. What should be the manufacturing quantity for each of the keyboards to maximize the total revenue?",
  "ground_truth": 14000.0,
  "formulation": null,
  "correct_program": "def optimize_keyboard_production(\n    price_full=2800,\n    price_semi=2400,\n    chips_available=3500,\n    hours_available=6,\n    production_time=1.2\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Keyboard_Production_Maximize_Revenue\")\n\n    # Decision variables: number of full-weighted and semi-weighted keyboards\n    x = model.addVar(vtype=GRB.INTEGER, name=\"Full_Weighted_Keyboard\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"Semi_Weighted_Keyboard\")\n\n    # Set objective: maximize total revenue\n    model.setObjective(price_full * x + price_semi * y, GRB.MAXIMIZE)\n\n    # Add chip constraint\n    model.addConstr(20 * x + 15 * y <= chips_available, \"Chip_Limit\")\n\n    # Add production time constraint\n    # Since each takes 1.2 hours, total hours for x and y\n    model.addConstr(production_time * (x + y) <= hours_available, \"Time_Limit\")\n\n    # Set non-negativity (implicit with variable type=GRB.INTEGER and default bounds)\n    # Solve the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal total revenue\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_revenue = optimize_keyboard_production()\n    if max_revenue is not None:\n        print(f\"Maximum Revenue: ${max_revenue}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A193",
  "description": "Platinum Database sells two types of subscription software packages: a personal license and a commercial license which will cost $550 and $2000 to generate respectively. The marketing department estimates that they can sell at most 300 licenses for both versions combined a month. The profit per personal license is $450 and the profit per commercial version is $1200. If the company does not want to spend more than $400000, how many of each software package should they produce to maximize the profits.",
  "ground_truth": 256500.0,
  "formulation": null,
  "correct_program": "def optimize_licenses(sales_limit=300, budget_limit=400000, cost_personal=550, cost_commercial=2000,\n                      profit_personal=450, profit_commercial=1200):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"License_Production_Optimization\")\n    \n    # Decision variables: number of personal and commercial licenses\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Personal_Licenses\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Commercial_Licenses\", lb=0)\n    \n    # Set the objective: maximize profit\n    m.setObjective(profit_personal * x + profit_commercial * y, GRB.MAXIMIZE)\n    \n    # Add constraints\n    m.addConstr(x + y <= sales_limit, \"SalesLimit\")\n    m.addConstr(cost_personal * x + cost_commercial * y <= budget_limit, \"BudgetLimit\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum profit\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_licenses()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A194",
  "description": "Zeta Bakery sells two types of cookies. They sell a strawberry cookie and a sugar cookie. Let's say they make x1 strawberry cookies, at a profit of $5.5 each, and x2 sugar cookies, at a profit of $12 each (x1 and x2 are unknowns both greater than or equal to 0). The daily demand for these cookies is at most 100 strawberry cookies and at most 80 sugar cookies. The bakery is short staffed and can make a maximum of 100 cookies of either type per day. How much of each cookie should the bakery make in order to maximize profit?",
  "ground_truth": 1070.0,
  "formulation": null,
  "correct_program": "def optimize_bakery_profit(\n    profit_strawberry=5.5,\n    profit_sugar=12,\n    max_demand_strawberry=100,\n    max_demand_sugar=80,\n    max_total_production=100\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Bakery_Optimization\")\n\n    # Decision variables\n    x1 = model.addVar(name=\"x1\", lb=0)  # Strawberry cookies\n    x2 = model.addVar(name=\"x2\", lb=0)  # Sugar cookies\n\n    # Set objective: maximize profit\n    model.setObjective(profit_strawberry * x1 + profit_sugar * x2, GRB.MAXIMIZE)\n\n    # Add constraints\n    model.addConstr(x1 <= max_demand_strawberry, name=\"Demand_Strawberry\")\n    model.addConstr(x2 <= max_demand_sugar, name=\"Demand_Sugar\")\n    model.addConstr(x1 + x2 <= max_total_production, name=\"Total_Production\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        return model.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_profit = optimize_bakery_profit()\n    if max_profit is not None:\n        print(f\"Maximum Profit: ${max_profit:.2f}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A195",
  "description": "A food company would like to run its commercials on three streaming platforms: Pi TV, Beta Video and Gamma Live. The cost for a commercial as well as the expected audience reach is given. On Pi TV, a commercial costs $1200 and attracts 2000 viewers. On Beta Video, a commercial costs $2000 and attracts 5000 viewers. On Gamma Live, a commercial costs $4000 and attracts 9000 viewers. Beta Video limits the number of commercials from a single company to 8. In order to attract a wide range of people, at most a third of all commercials should occur on Gamma Live and a minimum of 20% should occur on Pi TV. If the weekly budget is $20000, how many commercials should be run in each of the three possible choices in order to maximize audience?",
  "ground_truth": 46000.0,
  "formulation": null,
  "correct_program": "def optimize_commercials(\n    budget=20000,\n    cost_Pi=1200,\n    reach_Pi=2000,\n    cost_Beta=2000,\n    reach_Beta=5000,\n    cost_Gamma=4000,\n    reach_Gamma=9000,\n    beta_limit=8\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Maximize Audience Reach\")\n\n    # Decision variables: number of commercials on each platform\n    x_Pi = model.addVar(vtype=GRB.INTEGER, name=\"x_Pi\", lb=0)\n    x_Beta = model.addVar(vtype=GRB.INTEGER, name=\"x_Beta\", lb=0)\n    x_Gamma = model.addVar(vtype=GRB.INTEGER, name=\"x_Gamma\", lb=0)\n\n    # Set the objective: maximize total audience reach\n    model.setObjective(\n        reach_Pi * x_Pi + reach_Beta * x_Beta + reach_Gamma * x_Gamma,\n        GRB.MAXIMIZE\n    )\n\n    # Budget constraint\n    model.addConstr(\n        cost_Pi * x_Pi + cost_Beta * x_Beta + cost_Gamma * x_Gamma <= budget,\n        \"Budget\"\n    )\n\n    # Beta Video limit\n    model.addConstr(x_Beta <= beta_limit, \"BetaLimit\")\n\n    # Gamma proportion constraint: 2 * x_Gamma <= x_Pi + x_Beta\n    model.addConstr(2 * x_Gamma <= x_Pi + x_Beta, \"GammaProportion\")\n\n    # Pi TV minimum proportion: 4 * x_Pi >= x_Beta + x_Gamma\n    model.addConstr(4 * x_Pi >= x_Beta + x_Gamma, \"PiMinProportion\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum audience reach\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_reach = optimize_commercials()\n    if max_reach is not None:\n        print(f\"Maximum Audience Reach: {max_reach}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A196",
  "description": "A disease testing station is conducting a temperature check and/or a blood test on each patient. A temperature check takes 2 minutes while a blood test takes 10 minutes. The disease testing station must conduct at least 45 blood tests. Since the temperature check is recommended to be performed on most people, the testing station requires that the temperature check is performed at least 5 times as many as the blood test. If the disease testing station only has a total of 22000 staff minutes, how many of each test or check should be done to maximize the number of patients seen?",
  "ground_truth": 10820.0,
  "formulation": null,
  "correct_program": "def optimize_tests():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"DiseaseTestingOptimization\")\n    \n    # Decision variables\n    T = m.addVar(name=\"TemperatureChecks\", vtype=GRB.INTEGER, lb=0)\n    B = m.addVar(name=\"BloodTests\", vtype=GRB.INTEGER, lb=0)\n    \n    # Set the objective: maximize total tests\n    m.setObjective(T + B, GRB.MAXIMIZE)\n    \n    # Add constraints\n    m.addConstr(B >= 45, name=\"MinBloodTests\")\n    m.addConstr(T >= 5 * B, name=\"TempCheckRatio\")\n    m.addConstr(2 * T + 10 * B <= 22000, name=\"StaffMinutes\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum number of tests performed\n        return m.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_tests = optimize_tests()\n    if max_tests is not None:\n        print(f\"Maximum Tests Performed: {max_tests}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A197",
  "description": "The government is reworking the pipes to transport water to houses in the area. The water can be transported through wide pipes or narrow pipes. Wide pipes can transport 25 units of water per minute and narrow pipes can transport 15 units of water per minute. Due to logistics, the number of wide pipes can be at most a third the number of narrow pipes. If there needs to be at least 900 units of water transported every minute, and at least 5 wide pipes must be used, minimize the total number of pipes required.",
  "ground_truth": 52.0,
  "formulation": null,
  "correct_program": "def optimize_pipes():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"WaterPipeOptimization\")\n\n    # Decision variables\n    W = m.addVar(name=\"WidePipes\", vtype=GRB.INTEGER, lb=5)\n    N = m.addVar(name=\"NarrowPipes\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: minimize total number of pipes\n    m.setObjective(W + N, GRB.MINIMIZE)\n\n    # Add constraints\n    # Water capacity constraint\n    m.addConstr(25 * W + 15 * N >= 900, name=\"WaterCapacity\")\n    # Ratio constraint: W <= N/3\n    m.addConstr(3 * W <= N, name=\"PipeRatio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of pipes\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_pipes = optimize_pipes()\n    if min_pipes is not None:\n        print(f\"Minimum Total Pipes (Wide + Narrow): {min_pipes}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A198",
  "description": "A concert organizer has to transport equipment using carts or trolleys. Carts can transport 5 kg/min of equipment and requires 2 workers. Trolleys can transport 7 kg/min of equipment and requires 4 workers. There must be at least 12 trolleys to be used. Additionally, only a maximum of 40% of the transportation can be using trolleys. The organizer has to deliver at a rate of 100 kg/min of equipment. How many of each transportation method should be used to minimize the total number of workers?",
  "ground_truth": 100.0,
  "formulation": null,
  "correct_program": "def optimize_transportation():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"TransportationOptimization\")\n\n    # Decision variables\n    # x: number of carts\n    # y: number of trolleys\n    x = m.addVar(name=\"x\", vtype=GRB.INTEGER, lb=0)\n    y = m.addVar(name=\"y\", vtype=GRB.INTEGER, lb=12)\n\n    # Set objective: minimize total workers\n    m.setObjective(2 * x + 4 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Transportation capacity constraint\n    m.addConstr(5 * x + 7 * y >= 100, name=\"capacity\")\n    # Proportion constraint: 2x >= 4.2 y\n    m.addConstr(2 * x >= 4.2 * y, name=\"proportion\")\n    # y >= 12 is already enforced by lb=12\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of workers\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_workers = optimize_transportation()\n    if min_workers is not None:\n        print(f\"Minimum Total Workers: {min_workers}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A199",
  "description": "Both subsoil and topsoil need to be added to a garden bed. One bag of subsoil requires 10 units of water to hydrate while one bag of topsoil requires 6 units of water to hydrate every day. The truck used to transport the dirt has limited capacity and therefore, the farmer has available 150 bags of topsoil and subsoil combined. In addition, at least 10 bags of topsoil must be used. Since the topsoil is more expensive, at most 30% of all bags of soil can be topsoil. How many bags of each should be bought to minimize the total amount of water required to hydrate the garden bed?",
  "ground_truth": 300.0,
  "formulation": null,
  "correct_program": "def optimize_soil_bags(total_bags=150, min_topsoil=10, max_topsoil_ratio=0.3):\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Soil_Bag_Optimization\")\n    \n    # Decision variables: number of subsoil and topsoil bags\n    x = m.addVar(vtype=GRB.INTEGER, name=\"subsoil_bags\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"topsoil_bags\", lb=min_topsoil)\n    \n    # Set the objective: minimize total water\n    m.setObjective(10 * x + 6 * y, GRB.MINIMIZE)\n    \n    # Add constraints\n    # Total bags constraint\n    m.addConstr(x + y <= total_bags, \"total_bags_limit\")\n    # Topsoil proportion constraint\n    m.addConstr(y <= max_topsoil_ratio * (x + y), \"topsoil_ratio\")\n    # Since y >= 10 is already set as lb, no need to add separately\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total water consumption\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_water = optimize_soil_bags()\n    if min_water is not None:\n        print(f\"Minimum Total Water Consumption: {min_water}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A200",
  "description": "An extremely large ski resort is looking into purchasing two types of ski lifts, a densely-seated one and a loosely-seated one. The densely-seated ski lift is able to bring 45 guests up the slopes every minute whereas the loosely-seated ski lift can transport 20 guests every minute.  The densely-seated ski lift uses 30 units of electricity and the loosely-seated lift uses 22 units of electricity. There must be at least five loosely-seated ski lifts because they move slower and are friendlier for beginners. The ski resort needs at least 1000 guests every minute to make a profit and has available 940 units of electricity. How many of each type of ski lifts should they plan to install to minimize the total number of ski lifts needed?",
  "ground_truth": 25.0,
  "formulation": null,
  "correct_program": "def optimize_ski_lifts():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"SkiLiftsOptimization\")\n    \n    # Decision variables\n    # x: number of densely-seated lifts\n    # y: number of loosely-seated lifts\n    x = m.addVar(vtype=GRB.INTEGER, name=\"x\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"y\", lb=5)\n    \n    # Set the objective: minimize total number of lifts\n    m.setObjective(x + y, GRB.MINIMIZE)\n    \n    # Capacity constraint\n    m.addConstr(45 * x + 20 * y >= 1000, name=\"capacity\")\n    \n    # Electricity constraint\n    m.addConstr(30 * x + 22 * y <= 940, name=\"electricity\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of lifts\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_lifts = optimize_ski_lifts()\n    if min_lifts is not None:\n        print(f\"Minimum Total Lifts: {min_lifts}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A201",
  "description": "A student takes calcium pills and vitamin D pills one after the other. Each calcium pill takes 5 minutes to be effective while each vitamin D pill takes 6 minutes to be effective. Over a month, the student must take at least 130 pills of medication and at least 40 should be vitamin D pills because they enhance the absorption of calcium in the body. Since vitamin D is complimentary to calcium, the student must take more calcium pills than vitamin D pills. How many pills of each should the student take to minimize the total time it takes for the medication to be effective?",
  "ground_truth": 690.0,
  "formulation": null,
  "correct_program": "def optimize_pills():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"PillOptimization\")\n\n    # Decision variables: number of calcium and vitamin D pills\n    C = m.addVar(name=\"CalciumPills\", vtype=GRB.INTEGER, lb=0)\n    D = m.addVar(name=\"VitaminDPills\", vtype=GRB.INTEGER, lb=0)\n\n    # Set the objective: minimize total effective time\n    m.setObjective(5 * C + 6 * D, GRB.MINIMIZE)\n\n    # Add constraints\n    m.addConstr(C + D >= 130, name=\"TotalPills\")\n    m.addConstr(D >= 40, name=\"MinVitaminD\")\n    m.addConstr(C >= D + 1, name=\"CalciumMoreThanVitaminD\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total time\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_pills()\n    if min_time is not None:\n        print(f\"Minimum Total Effective Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A202",
  "description": "An amusement park has two types of games: throwing and climbing games. Throwing games attract 15 customers every hour and climbing games attract 8 customers every hour. Throwing games costs the amusement park $2 in prizes per hour whereas climbing games cost $3 in prizes per hour. Since throwing games yield the most profit, there must be at least twice as many throwing games as climbing games. However, at least 5 games must be climbing. If the amusement park can have at most $100 in prizes every hour, maximize the total number of customers attracted every hour.",
  "ground_truth": 670.0,
  "formulation": null,
  "correct_program": "def optimize_amusement_park():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"AmusementPark\")\n\n    # Decision variables\n    T = m.addVar(name=\"ThrowingGames\", vtype=GRB.INTEGER, lb=0)\n    C = m.addVar(name=\"ClimbingGames\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: maximize total customers\n    m.setObjective(15 * T + 8 * C, GRB.MAXIMIZE)\n\n    # Add constraints\n    m.addConstr(2 * T + 3 * C <= 100, name=\"PrizeLimit\")\n    m.addConstr(T >= 2 * C, name=\"ThrowingAtLeastTwiceClimbing\")\n    m.addConstr(C >= 5, name=\"MinimumClimbing\")\n    \n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum number of customers attracted\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_customers = optimize_amusement_park()\n    if max_customers is not None:\n        print(f\"Maximum Customers Attracted: {max_customers}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A203",
  "description": "In a science fair, there are two types of tables that can be used to display the children’s science experiments. At the circular tables, 4 poster boards and 5 participants can fit around the table to cater to 8 guests. At the rectangular tables, 4 poster boards and 4 participants can fit around the table to cater to 12 guests. However, each circular table takes up 15 units of space while each rectangular table takes up 20 units of space. The science fair has must be able to fit at least 500 participants and 300 poster boards. If the science fair has available 1900 units of space, how many of each type of table should be set up to maximize the number of catered guests?",
  "ground_truth": 1080.0,
  "formulation": null,
  "correct_program": "def optimize_science_fair(\n    min_participants=500,\n    min_posters=300,\n    max_space=1900\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Science_Fair_Tables\")\n\n    # Decision variables: number of circular and rectangular tables\n    x_c = model.addVar(vtype=GRB.INTEGER, name=\"Circular_Tables\", lb=0)\n    x_r = model.addVar(vtype=GRB.INTEGER, name=\"Rectangular_Tables\", lb=0)\n\n    # Set the objective: maximize total guests served\n    model.setObjective(8 * x_c + 12 * x_r, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Participants constraint\n    model.addConstr(5 * x_c + 4 * x_r >= min_participants, \"Participants\")\n    # Poster boards constraint\n    model.addConstr(4 * x_c + 4 * x_r >= min_posters, \"PosterBoards\")\n    # Space constraint\n    model.addConstr(15 * x_c + 20 * x_r <= max_space, \"Space\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        return model.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_guests = optimize_science_fair()\n    if max_guests is not None:\n        print(f\"Maximum Guests Served: {max_guests}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A204",
  "description": "An oil and gas company has two types of pipes, a high-volume and a low-volume one. Every day, the high-volume pipe allows 10000 US gallons and it is recommended that 12 technicians closely monitor the pipes to ensure that it is functioning properly. Each day, the low-volume pipe allows 5000 US gallons and 5 technicians should closely monitor for safety reasons. Every day, the oil and gas company needs to meet the demands of at least 150000 US gallons of gas and they have 160 technicians that are on their staff. Since the high-volume pipe has a higher risk of environmental damage, at most 35 percent of the pipes can be high-volume ones. Additionally, there must be a minimum of 8 low-volume pipes. How many of each pipe types should be used to reduce the total number of pipes required?",
  "ground_truth": 25.0,
  "formulation": null,
  "correct_program": "def optimize_pipes():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"PipeOptimization\")\n\n    # Decision variables: number of high-volume and low-volume pipes\n    x = m.addVar(vtype=GRB.INTEGER, name=\"HighVolumePipes\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"LowVolumePipes\")\n\n    # Set the objective: minimize total number of pipes\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add demand constraint\n    m.addConstr(10000 * x + 5000 * y >= 150000, name=\"DemandConstraint\")\n\n    # Add staffing constraint\n    m.addConstr(12 * x + 5 * y <= 160, name=\"StaffingConstraint\")\n\n    # Add high-volume pipe proportion constraint: y ≥ (13/7) * x\n    m.addConstr(y >= (13/7) * x, name=\"HighVolumeProportion\")\n\n    # Add minimum low-volume pipes constraint\n    m.addConstr(y >= 8, name=\"MinLowVolumePipes\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of pipes\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_pipes = optimize_pipes()\n    if min_pipes is not None:\n        print(f\"Minimum Total Pipes: {min_pipes}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A205",
  "description": "A dentist has 3000 units of resin to fill cavities in both molars and canines. Molars require 20 units of resin and 3 units of pain killer. Canines require 15 units of resin and 2.3 units of pain killer. Since this dentist sees more cavities in canines, at least 60% of cavities filled must be in canines. In addition, the dentist must reserve materials to fill at least 45 molars. How many of each type of teeth should the dentist schedule to fill to minimize the amount of pain killer needed?",
  "ground_truth": 291.4,
  "formulation": null,
  "correct_program": "def optimize_cavity_filling():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"dentist_cavity_filling\")\n    \n    # Decision variables: number of molars and canines to fill\n    x_m = m.addVar(vtype=GRB.INTEGER, name=\"molars\")\n    x_c = m.addVar(vtype=GRB.INTEGER, name=\"canines\")\n    \n    # Set the objective: minimize total pain killer\n    m.setObjective(3 * x_m + 2.3 * x_c, GRB.MINIMIZE)\n    \n    # Add constraints\n    # Resin constraint\n    m.addConstr(20 * x_m + 15 * x_c <= 3000, \"resin_limit\")\n    \n    # Canine proportion constraint: x_c >= 1.5 * x_m\n    m.addConstr(x_c >= 1.5 * x_m, \"canine_proportion\")\n    \n    # Minimum molars filled\n    m.addConstr(x_m >= 45, \"min_molars\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal pain killer usage\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_pain_killer = optimize_cavity_filling()\n    if min_pain_killer is not None:\n        print(f\"Minimum Total Pain Killer Usage: {min_pain_killer}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A206",
  "description": "A food delivery person can either have shifts on bikes or scooters. A shift on a bike can deliver 10 orders, takes 5 units of energy, and brings in $50 on tips because it is faster. A shift on a scooter can deliver 7 orders, takes 6 units of energy, and brings in $43 on tips.  The delivery person has available 40 shifts a month and has 230 units of energy and must bring at least 320 orders. He must have at least 5 shifts on a scooter because bikes are harder to get. How many shifts on each type of transportation should the delivery person schedule to maximize tips received?",
  "ground_truth": 1965.0,
  "formulation": null,
  "correct_program": "def optimize_shifts(total_shifts=40, energy_limit=230, min_orders=320, min_scooter_shifts=5):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Delivery_Shifts_Maximize_Tips\")\n\n    # Decision variables: number of bike and scooter shifts\n    x = model.addVar(vtype=GRB.INTEGER, name=\"bike_shifts\", lb=0)\n    y = model.addVar(vtype=GRB.INTEGER, name=\"scooter_shifts\", lb=0)\n\n    # Set objective: maximize total tips\n    model.setObjective(50 * x + 43 * y, GRB.MAXIMIZE)\n\n    # Add constraints\n    model.addConstr(x + y <= total_shifts, \"total_shifts\")\n    model.addConstr(5 * x + 6 * y <= energy_limit, \"energy\")\n    model.addConstr(10 * x + 7 * y >= min_orders, \"orders\")\n    model.addConstr(y >= min_scooter_shifts, \"min_scooter_shifts\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        return model.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_tips = optimize_shifts()\n    if max_tips is not None:\n        print(f\"Maximum Tips: ${max_tips}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A207",
  "description": "A singer has two types of concerts he can hold, pop and R&B. Each pop concert will bring in 100 audience members and take 2 days of practice. Every R&B concert brings in 240 audience members and takes 4 days of practice. The singer must bring in at least 10000 audience members and only has available 180 days for practice. If he can at most perform 40% of his concerts as R&B because he likes pop songs more, how many of each type of concert should be created to minimize the total number of concerts?",
  "ground_truth": 65.0,
  "formulation": null,
  "correct_program": "def optimize_concerts():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"ConcertOptimization\")\n\n    # Decision variables: number of pop and R&B concerts\n    x = m.addVar(vtype=GRB.INTEGER, name=\"PopConcerts\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"R&BConcerts\", lb=0)\n\n    # Set the objective: minimize total number of concerts\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Audience constraint\n    m.addConstr(100 * x + 240 * y >= 10000, \"AudienceRequirement\")\n\n    # Practice days constraint\n    m.addConstr(2 * x + 4 * y <= 180, \"PracticeDaysLimit\")\n\n    # R&B performance limit: y <= (2/3) * x\n    m.addConstr(y <= (2/3) * x, \"R&B_Performance_Limit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_concerts = m.objVal\n        return total_concerts\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_concerts = optimize_concerts()\n    if min_concerts is not None:\n        print(f\"Minimum Total Concerts: {min_concerts}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A208",
  "description": "A neighbourhood pizza restaurant has opened and sells pizzas in two sizes; large pizza and medium pizza. Large pizzas require 12 units of dough, and 5 units of toppings. Medium pizzas require 8 units of dough, and 4 units of toppings. While large pizzas take 12 minutes to bake, medium pizzas require 8 minutes to bake. The neighbourhood pizza restaurant must use at least 10000 units of dough and 4400 units of toppings. Medium pizzas are popular due to a promotion, therefore, at least 200 medium pizzas must be made. There are regulars that prefer large pizzas and at least two times as many large pizzas should be made than medium pizzas. How many of each size of pizzas should the neighbourhood pizza restaurant make to reduce time spent baking?",
  "ground_truth": 10060.0,
  "formulation": null,
  "correct_program": "def optimize_pizza_baking():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Pizza_Baking_Minimize_Time\")\n\n    # Decision variables\n    L = m.addVar(vtype=GRB.INTEGER, name=\"Large_Pizzas\", lb=0)\n    M = m.addVar(vtype=GRB.INTEGER, name=\"Medium_Pizzas\", lb=0)\n\n    # Set objective: minimize total baking time\n    m.setObjective(12 * L + 8 * M, GRB.MINIMIZE)\n\n    # Add constraints\n    m.addConstr(12 * L + 8 * M >= 10000, name=\"Dough_Constraint\")\n    m.addConstr(5 * L + 4 * M >= 4400, name=\"Toppings_Constraint\")\n    m.addConstr(M >= 200, name=\"Medium_Demand\")\n    m.addConstr(L >= 2 * M, name=\"Large_vs_Medium_Ratio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the total baking time of the optimal solution\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_baking_time = optimize_pizza_baking()\n    if min_baking_time is not None:\n        print(f\"Minimum Total Baking Time: {min_baking_time} minutes\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A209",
  "description": "A party organizer needs to transport party goers either by limousine or bus. Limousines can carry 12 people and buses can carry 18 people. They need to transport at least 400 people. Because limousines are more attractive, at least 70% of the vehicles must be limousines. How many of each type of vehicle should be used to minimize the total number of limousines and buses used?",
  "ground_truth": 30.0,
  "formulation": null,
  "correct_program": "def optimize_vehicle_allocation():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Vehicle_Optimization\")\n\n    # Decision variables: number of limousines and buses\n    L = m.addVar(vtype=GRB.INTEGER, name=\"Limousines\", lb=0)\n    B = m.addVar(vtype=GRB.INTEGER, name=\"Buses\", lb=0)\n\n    # Set the objective: minimize total number of vehicles\n    m.setObjective(L + B, GRB.MINIMIZE)\n\n    # Add capacity constraint\n    m.addConstr(12 * L + 18 * B >= 400, name=\"CapacityConstraint\")\n\n    # Add ratio constraint: 3L >= 7B\n    m.addConstr(3 * L >= 7 * B, name=\"RatioConstraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_vehicles = L.X + B.X\n        return total_vehicles\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_vehicles = optimize_vehicle_allocation()\n    if min_vehicles is not None:\n        print(f\"Minimum Total Vehicles: {min_vehicles}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A210",
  "description": "A hospital purchases two pills available for the patients to take one at a time. One pill is taken as a prevention and another is taken for treatment. The prevention pill takes 15 dollars to make while the treatment pill takes 25 dollars to make. Since the prevention pill is in higher demand, the hospital must purchase at least two times as many prevention pills as treatment pills. In addition, the hospital must purchase at least 50 treatment pills. If the clinic only has a budget of 10000 dollars, maximize the number of patients that can be treated.",
  "ground_truth": 181.0,
  "formulation": null,
  "correct_program": "def optimize_pills(budget=10000, cost_prevention=15, cost_treatment=25, min_treatment=50):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Hospital_Pills_Optimization\")\n    \n    # Decision variables\n    T = model.addVar(name=\"Treatment_Pills\", vtype=GRB.INTEGER, lb=min_treatment)\n    P = model.addVar(name=\"Prevention_Pills\", vtype=GRB.INTEGER, lb=0)\n    \n    # Set objective: maximize number of treatment pills (patients)\n    model.setObjective(T, GRB.MAXIMIZE)\n    \n    # Add constraints\n    # Budget constraint\n    model.addConstr(cost_prevention * P + cost_treatment * T <= budget, name=\"Budget\")\n    # Prevention pills at least twice treatment pills\n    model.addConstr(P >= 2 * T, name=\"Prevention_vs_Treatment\")\n    \n    # Optimize the model\n    model.optimize()\n    \n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum number of patients (treatment pills)\n        return int(T.X)\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_patients = optimize_pills()\n    if max_patients is not None:\n        print(f\"Maximum Patients Treated: {max_patients}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A211",
  "description": "A dim sum restaurant can deliver their food by cart or by hand. Servers can deliver by cart and have 70 customer interactions and will have to refill food five times an hour. They can also deliver more food by hand, due to the increased mobility, and have 85 customer interactions while refilling food twenty times an hour. However, the customers get more options when delivering by cart, therefore at least 70% of delivery shifts must be by cart. There must be at least 3 servers delivering by hand for their direct customer service. If the restaurant wants to have 4000 customer interactions per hour, how many of each form of delivery should the dim sum restaurant schedule to minimize the total number of refills per hour?",
  "ground_truth": 330.0,
  "formulation": null,
  "correct_program": "def optimize_delivery_schedule():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"DimSumDeliveryOptimization\")\n    \n    # Decision variables\n    # x: number of cart delivery shifts per hour\n    # y: number of hand delivery shifts per hour\n    x = m.addVar(vtype=GRB.INTEGER, name=\"x\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"y\", lb=3)  # at least 3 servers delivering by hand\n    \n    m.update()\n    \n    # Add constraints\n    # Customer interactions constraint\n    m.addConstr(70 * x + 85 * y >= 4000, name=\"Interactions\")\n    \n    # Delivery proportion constraint: x >= (7/3) y\n    m.addConstr(x >= (7/3) * y, name=\"DeliveryProportion\")\n    \n    # Objective: minimize total refills\n    # Refills = 5x + 20y\n    m.setObjective(5 * x + 20 * y, GRB.MINIMIZE)\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total refills\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_refills = optimize_delivery_schedule()\n    if min_refills is not None:\n        print(f\"Minimum Total Refills: {min_refills}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A212",
  "description": "A macro-counting fitness guru only eats salmon and eggs. Each bowl of salmon contains 300 calories, 15 grams of protein, and 80 mg of sodium. Each bowl of eggs contains 200 calories, 8 grams of protein, and 20 mg of sodium. Since the fitness guru has a limit to how many eggs he would like to eat, at most 40% of his meals can be eggs. The fitness guru needs to eat at least 2000 calories and 90 grams of protein. How many of each type of meal should he eat to minimize his sodium intake?",
  "ground_truth": 460.0,
  "formulation": null,
  "correct_program": "def optimize_meals():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Salmon_Egg_Optimization\")\n\n    # Decision variables: number of salmon and eggs bowls\n    x_s = m.addVar(name=\"Salmon\", lb=0, vtype=GRB.INTEGER)\n    x_e = m.addVar(name=\"Eggs\", lb=0, vtype=GRB.INTEGER)\n\n    # Set the objective: minimize total sodium intake\n    sodium = 80 * x_s + 20 * x_e\n    m.setObjective(sodium, GRB.MINIMIZE)\n\n    # Add calorie constraint\n    m.addConstr(300 * x_s + 200 * x_e >= 2000, name=\"Calories\")\n\n    # Add protein constraint\n    m.addConstr(15 * x_s + 8 * x_e >= 90, name=\"Protein\")\n\n    # Add egg proportion constraint: x_e <= (2/3) * x_s\n    m.addConstr(x_e <= (2/3) * x_s, name=\"EggProportion\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal sodium intake\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nprint(optimize_meals())\n",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A213",
  "description": "A restaurant has two combos available to their customers, an original and an experimental meal. The original meal typically generates 20 units of food waste and 45 units of wrapping waste and takes 10 minutes to cook. In comparison, the experimental meal generates 25 units of food waste and 35 units of wrapping waste and takes 15 minutes to cook. The restaurant can have at most 900 units of wrapping waste and can have at most 800 units of food waste as regulated by the government. How many of each combo should be pushed for by the waiting staff to minimize the cooking time?",
  "ground_truth": 0.0,
  "formulation": null,
  "correct_program": "def optimize_meals(\n    max_food_waste=800,\n    max_wrapping_waste=900,\n    time_original=10,\n    time_experimental=15,\n    food_waste_original=20,\n    food_waste_experimental=25,\n    wrapping_waste_original=45,\n    wrapping_waste_experimental=35\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"RestaurantMealOptimization\")\n\n    # Decision variables: number of original and experimental meals\n    x = model.addVar(vtype=GRB.INTEGER, name=\"Original\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"Experimental\")\n\n    # Set objective: minimize total cooking time\n    model.setObjective(\n        time_original * x + time_experimental * y,\n        GRB.MINIMIZE\n    )\n\n    # Add waste constraints\n    model.addConstr(\n        food_waste_original * x + food_waste_experimental * y <= max_food_waste,\n        name=\"FoodWasteLimit\"\n    )\n    model.addConstr(\n        wrapping_waste_original * x + wrapping_waste_experimental * y <= max_wrapping_waste,\n        name=\"WrappingWasteLimit\"\n    )\n\n    # Set non-negativity constraints (implicit in variable definition)\n    # Solve the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal total cooking time\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_meals()\n    if min_time is not None:\n        print(f\"Minimum Total Cooking Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A214",
  "description": "A metal-working shop has access to two types of metal-working equipment, a chop saw and a steel cutter. A chop saw can work 25 pounds of steel and generates 25 units of waste every day. A steel cutter can only cut 5 pounds of steel and generates 3 units of waste every day.  The metal-working shop is expecting an increase in demand and must cut 520 pounds of metal every day. However, there is a waste limitation due to the fines that may be in place if too much heavy metal is discarded and they may at most produce 400 units of waste every day. How should the metal-working shop purchase their metal-working equipment to decrease the total number of metal-working equipment needed?",
  "ground_truth": 72.0,
  "formulation": null,
  "correct_program": "def optimize_equipment_purchase():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Equipment_Purchase\")\n\n    # Decision variables: number of chop saws (x) and steel cutters (y)\n    x = m.addVar(vtype=GRB.INTEGER, name=\"chop_saws\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"steel_cutters\", lb=0)\n\n    # Set the objective: minimize total equipment\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add demand constraint\n    m.addConstr(25 * x + 5 * y >= 520, name=\"demand_constraint\")\n\n    # Add waste constraint\n    m.addConstr(25 * x + 3 * y <= 400, name=\"waste_constraint\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of equipment\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_equipment = optimize_equipment_purchase()\n    if min_equipment is not None:\n        print(f\"Minimum Total Equipment (Chop Saws + Steel Cutters): {min_equipment}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A215",
  "description": "A cruise company can either have two types of trips, a large cruise ship or a small cruise ship. A large cruise ship trip can carry 2000 customers and produces 20 units of pollution. A small cruise ship trip can carry 800 customers and produces 15 units of pollution. There can be at most 7 large cruise ship trips and at least 40% of the total trips must be made by small cruise ships. If the cruise company aims to transport at least 20000 customers, how many of each size of cruise ships should the company use to minimize the total amount of pollution produced?",
  "ground_truth": 260.0,
  "formulation": null,
  "correct_program": "def optimize_cruise_trips():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"CruiseOptimization\")\n\n    # Decision variables\n    L = m.addVar(vtype=GRB.INTEGER, name=\"LargeTrips\", lb=0)\n    S = m.addVar(vtype=GRB.INTEGER, name=\"SmallTrips\", lb=0)\n\n    # Set objective: minimize total pollution\n    m.setObjective(20 * L + 15 * S, GRB.MINIMIZE)\n\n    # Add constraints\n    m.addConstr(L <= 7, \"MaxLargeTrips\")\n    m.addConstr(2000 * L + 800 * S >= 20000, \"CustomerCapacity\")\n    m.addConstr(S >= (2/3) * L, \"SmallShipProportion\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the total pollution (objective value)\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_pollution = optimize_cruise_trips()\n    if min_pollution is not None:\n        print(f\"Minimum Total Pollution: {min_pollution} units\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A216",
  "description": "A lighting company has access to two types of lights to provide their customers, an LED fixture, and a fluorescence lamp. The LED light uses 5 units of electricity per hour and needs to be changed 3 times a decade. Conversely, the fluorescence lamp uses 8 units of electricity per hour and needs to be changed 4 times a decade. Due to previous installations, at least 30% implemented lights must be fluorescence lamps. If the customer requires at least 300 light fixtures and can use at most 2000 units of electricity, how many of each light should be installed to reduce the total number of light changes?",
  "ground_truth": 990.0,
  "formulation": null,
  "correct_program": "import gurobipy as gp\nfrom gurobipy import GRB\n\n\ndef optimize_lighting(min_total_fixtures=300,\n                      max_electricity=2000,\n                      led_electricity=5,\n                      fluorescence_electricity=8,\n                      led_changes=3,\n                      fluorescence_changes=4,\n                      fluorescence_ratio=0.3):\n    # Create a new model\n    m = gp.Model(\"LightingOptimization\")\n\n    # Decision variables: number of fixtures\n    x_LED = m.addVar(vtype=GRB.INTEGER, lb=0, name=\"x_LED\")\n    x_F = m.addVar(vtype=GRB.INTEGER, lb=0, name=\"x_F\")\n\n    # Set objective: minimize total changes\n    total_changes = led_changes * x_LED + fluorescence_changes * x_F\n    m.setObjective(total_changes, GRB.MINIMIZE)\n\n    # Add constraints\n    # 1. Minimum total fixtures\n    m.addConstr(x_LED + x_F >= min_total_fixtures, \"MinFixtures\")\n\n    # 2. Electricity consumption limit\n    m.addConstr(\n        led_electricity * x_LED + fluorescence_electricity * x_F\n        <= max_electricity, \"ElectricityLimit\")\n\n    # 3. Fluorescence proportion constraint\n    # x_F >= 0.3 * (x_LED + x_F)\n    # Rearranged: 0.7 * x_F >= 0.3 * x_LED\n    m.addConstr(0.7 * x_F >= 0.3 * x_LED, \"FluorescenceRatio\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        return m.objVal\n    else:\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    result = optimize_lighting()\n    print(f\"Optimal total changes: {result}\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A217",
  "description": "A clothing company can sell their product in two types of stores, a retail store and a factory outlet. A retail store brings in 200 customers every day and requires 6 employees to operate. A factory outlet brings in 80 customers every day and due to the lower traffic and being in more remote areas, requires 4 employees to run. Company executives decided that there must be at least 1200 customers every day, and can make available 50 employees. How should the company distribute their product to the two types of store to reduce the number of stores that must be open?",
  "ground_truth": 6.0,
  "formulation": null,
  "correct_program": "def optimize_stores():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Minimize_Stores\")\n\n    # Decision variables: number of retail and outlet stores\n    R = m.addVar(vtype=GRB.INTEGER, name=\"RetailStores\", lb=0)\n    F = m.addVar(vtype=GRB.INTEGER, name=\"OutletStores\", lb=0)\n\n    # Set the objective: minimize total number of stores\n    m.setObjective(R + F, GRB.MINIMIZE)\n\n    # Add customer constraint\n    m.addConstr(200 * R + 80 * F >= 1200, name=\"CustomerCoverage\")\n\n    # Add staffing constraint\n    m.addConstr(6 * R + 4 * F <= 50, name=\"StaffingLimit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of stores\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_stores = optimize_stores()\n    if min_stores is not None:\n        print(f\"Minimum Total Stores (Retail + Outlet): {min_stores}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A218",
  "description": "A candle-making company can move their inventory of candles using freight and air. Freight can transport 5 tons per trip while using air can transport 3 tons per trip. Since freight take longer, the cost for each freight trip is $300 while the cost over air for each trip is $550. The company needs to transport at least 200 tons of candles and they have a budget of $20000. Additionally, due to some urgent orders, at least 30% of tons of candles must be transported through air. There must also be at least 5 trips through freight. How many of trip by each should be scheduled to minimize the total number of trips?",
  "ground_truth": 48.0,
  "formulation": null,
  "correct_program": "def optimize_candle_transport():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Candle_Transport\")\n\n    # Decision variables\n    # Number of freight trips (F), at least 5\n    F = m.addVar(vtype=GRB.INTEGER, name=\"F\", lb=5)\n    # Number of air trips (A), at least 0\n    A = m.addVar(vtype=GRB.INTEGER, name=\"A\", lb=0)\n\n    # Set objective: minimize total trips\n    m.setObjective(F + A, GRB.MINIMIZE)\n\n    # Add constraints\n    # Total tons transported\n    m.addConstr(5 * F + 3 * A >= 200, name=\"TotalTons\")\n    # Budget constraint\n    m.addConstr(300 * F + 550 * A <= 20000, name=\"Budget\")\n    # Air transportation proportion constraint\n    # A >= (1.5/2.1)*F\n    m.addConstr(A >= (1.5 / 2.1) * F, name=\"AirProportion\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_trips = m.objVal\n        return total_trips\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_trips = optimize_candle_transport()\n    if min_trips is not None:\n        print(f\"Minimum Total Trips (Freight + Air): {min_trips}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A219",
  "description": "A production company needs to transport their equipment and staff for a movie they are shooting using large mobile production units or small mobile production units. Large mobile production units can hold 6 people and takes up 2 parking spots whereas small mobile production units can hold only 2 people and takes up 1 parking spot. Movie stars prefer to have their small mobile production unit to share with a close staff, therefore at least 5 units must be small mobile units. However, due to logistic limitations, large mobile production units are more space efficient per spot, they must make up at least 75% of all vehicles. If the movie needs to transport 80 people, minimize the total number of parking spots required by this production.",
  "ground_truth": 35.0,
  "formulation": null,
  "correct_program": "def optimize_production_units():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"ProductionUnits\")\n\n    # Decision variables\n    L = m.addVar(vtype=GRB.INTEGER, name=\"LargeUnits\")\n    S = m.addVar(vtype=GRB.INTEGER, name=\"SmallUnits\")\n\n    # Set objective: minimize total parking spots\n    m.setObjective(2 * L + S, GRB.MINIMIZE)\n\n    # Add constraints\n    # Capacity constraint\n    m.addConstr(6 * L + 2 * S >= 80, name=\"PeopleCapacity\")\n    # Minimum small units\n    m.addConstr(S >= 5, name=\"MinSmallUnits\")\n    # Large units at least 75% of total units\n    m.addConstr(L >= 3 * S, name=\"LargeAtLeast75Percent\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the minimal total parking spots\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_parking_spots = optimize_production_units()\n    if min_parking_spots is not None:\n        print(f\"Minimum Total Parking Spots: {min_parking_spots}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A220",
  "description": "A mask making company ships masks to their retail stores using small boxes and large boxes. A small box holds 25 masks whereas a large box holds 45 masks. Since small boxes are easier to stack and will be used first to stock stores, there must be at least three times as many small boxes as large boxes. Additionally, at least 5 large boxes must be used. If at least 750 masks are required to be distributed, how many of each size of box should be used to minimize the total number of boxes needed?",
  "ground_truth": 26.0,
  "formulation": null,
  "correct_program": "def optimize_mask_boxes():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"mask_box_optimization\")\n\n    # Decision variables\n    # Number of small boxes\n    x = m.addVar(vtype=GRB.INTEGER, name=\"small_boxes\")\n    # Number of large boxes\n    y = m.addVar(vtype=GRB.INTEGER, name=\"large_boxes\")\n\n    # Set objective: minimize total number of boxes\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Mask capacity constraint\n    m.addConstr(25 * x + 45 * y >= 750, name=\"mask_capacity\")\n    # Ratio constraint: small boxes at least three times large boxes\n    m.addConstr(x >= 3 * y, name=\"ratio_constraint\")\n    # Minimum large boxes\n    m.addConstr(y >= 5, name=\"min_large_boxes\")\n    # Non-negativity is implicit in variable type (integer >= 0)\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_boxes = m.objVal\n        small_boxes = x.X\n        large_boxes = y.X\n        return total_boxes\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_boxes = optimize_mask_boxes()\n    if min_boxes is not None:\n        print(f\"Minimum Total Boxes: {min_boxes}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A221",
  "description": "An autobody shop needs to purchase two types of car jacks, an automatic electric one, or a gas-powered one. The automatic electric one can process 5 cars every hour and uses 6 units of electricity whereas the gas-powered one can process 4 cars each hour using 7 units of gas. Since there is a limit to how many automatic electric ones there can be due to the limited number of power outlets, the shop must use less than 15 automatic electric ones. The shop can use at most 50 units of electricity and 80 units of gas. How many of each type of jack should the shop purchase to maximize the amount of cars processed every hour?",
  "ground_truth": 84.0,
  "formulation": null,
  "correct_program": "def optimize_car_jacks():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"CarJacksOptimization\")\n    \n    # Decision variables\n    # x: number of automatic electric jacks\n    # y: number of gas-powered jacks\n    x = m.addVar(vtype=GRB.INTEGER, name=\"electric_jacks\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"gas_jacks\")\n    \n    # Set the objective: maximize total cars processed\n    m.setObjective(5 * x + 4 * y, GRB.MAXIMIZE)\n    \n    # Add constraints\n    m.addConstr(x <= 14, \"max_electric_jacks\")\n    m.addConstr(6 * x <= 50, \"electricity_limit\")\n    m.addConstr(7 * y <= 80, \"gas_limit\")\n    m.addConstr(x >= 0, \"non_neg_electric\")\n    m.addConstr(y >= 0, \"non_neg_gas\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum number of cars processed\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_cars = optimize_car_jacks()\n    if max_cars is not None:\n        print(f\"Maximum Cars Processed: {max_cars}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A222",
  "description": "A railway company is planning the infrastructure for the city and is considering two types of transportation, trains and trams. Each train can transport 120 people per hour comfortably and each tram can transport 30 people per hour comfortably. Since trains take longer to build, the number of trams must be at least twice the number of trains. If the railway company wants to transport at least 600 people per hour, minimize the total number of transportation units required.",
  "ground_truth": 11.0,
  "formulation": null,
  "correct_program": "def optimize_transportation():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"TransportationOptimization\")\n\n    # Decision variables: number of trains and trams\n    T = m.addVar(name=\"Trains\", vtype=GRB.INTEGER, lb=0)\n    M = m.addVar(name=\"Trams\", vtype=GRB.INTEGER, lb=0)\n\n    # Set the objective: minimize total units\n    m.setObjective(T + M, GRB.MINIMIZE)\n\n    # Capacity constraint\n    m.addConstr(120 * T + 30 * M >= 600, name=\"CapacityConstraint\")\n\n    # Relationship constraint\n    m.addConstr(M >= 2 * T, name=\"TramTrainRelation\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of units\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_units = optimize_transportation()\n    if min_units is not None:\n        print(f\"Minimum Total Units (Trains + Trams): {min_units}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A223",
  "description": "Platinum in combination with palladium has been used as a catalyst in cars and it changes carbon monoxide, which is toxic, into carbon dioxide. An automotive company is comparing two different catalysts, a palladium-heavy catalyst and a platinum-heavy catalyst. The process with a palladium-heavy catalyst requires 15 units of platinum and 25 units of palladium and can perform the conversion to carbon dioxide at a rate of 5 units per second. A platinum-heavy catalyst requires 20 units of platinum and 14 units of palladium and converts to carbon dioxide at a rate of 4 units per second. There are 450 units of platinum and 390 units of palladium available. How many of each catalyst should be used to maximize the amount converted into carbon dioxide?",
  "ground_truth": 100.34482758620688,
  "formulation": null,
  "correct_program": "def optimize_catalysts(platinum_available=450, palladium_available=390):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Catalyst_Optimization\")\n\n    # Decision variables: number of each catalyst\n    x = model.addVar(name=\"palladium_heavy\", lb=0)\n    y = model.addVar(name=\"platinum_heavy\", lb=0)\n\n    # Set the objective: maximize total CO2 conversion\n    model.setObjective(5 * x + 4 * y, GRB.MAXIMIZE)\n\n    # Add resource constraints\n    model.addConstr(15 * x + 20 * y <= platinum_available, name=\"Platinum_Constraint\")\n    model.addConstr(25 * x + 14 * y <= palladium_available, name=\"Palladium_Constraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        return model.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_conversion = optimize_catalysts()\n    if max_conversion is not None:\n        print(f\"Maximum CO2 Conversion: {max_conversion}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A224",
  "description": "There are two ways to extract a metal from mined ores. The first way is to use process J and the second is process P. Process J can extract 5 units of metal using 8 units of water and produces 3 units of pollution. Process P can extract 9 units of metal using 6 units of water and produces 5 units of pollution. There can be at most 1500 units of water 1350 units of pollution. How many of each type of processes should be performed to maximize the amount of metal extracted?",
  "ground_truth": 2250.0,
  "formulation": null,
  "correct_program": "def optimize_metal_extraction(water_limit=1500, pollution_limit=1350):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"MetalExtraction\")\n\n    # Decision variables: number of times to perform each process\n    x_J = model.addVar(name=\"Process_J\", vtype=GRB.INTEGER, lb=0)\n    x_P = model.addVar(name=\"Process_P\", vtype=GRB.INTEGER, lb=0)\n\n    # Set the objective: maximize total metal extracted\n    model.setObjective(5 * x_J + 9 * x_P, GRB.MAXIMIZE)\n\n    # Add water constraint\n    model.addConstr(8 * x_J + 6 * x_P <= water_limit, name=\"WaterLimit\")\n\n    # Add pollution constraint\n    model.addConstr(3 * x_J + 5 * x_P <= pollution_limit, name=\"PollutionLimit\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum amount of metal extracted\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage \nif __name__ == \"__main__\":\n    max_metal = optimize_metal_extraction()\n    if max_metal is not None:\n        print(f\"Maximum Metal Extracted: {max_metal}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A225",
  "description": "An airport can either install escalators or elevators. Escalators can transport 20 people every minute whereas elevators can transport 8 people every minute. Escalators take up 5 units of space while elevators take 2 units of space. The airport needs to have enough capacity to transport at least 400 people every minute. Additionally, there must be at least three times more escalators than elevators and at least 2 elevators must be used. How many of each type should the airport install to minimize the total units of space taken?",
  "ground_truth": 100.0,
  "formulation": null,
  "correct_program": "def optimize_transport_infrastructure():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"AirportTransport\")\n\n    # Decision variables\n    # Number of escalators\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Escalators\", lb=0)\n    # Number of elevators\n    y = m.addVar(vtype=GRB.INTEGER, name=\"Elevators\", lb=0)\n\n    # Set objective: minimize total space\n    m.setObjective(5 * x + 2 * y, GRB.MINIMIZE)\n\n    # Capacity constraint\n    m.addConstr(20 * x + 8 * y >= 400, name=\"Capacity\")\n\n    # Ratio constraint: at least three times more escalators than elevators\n    m.addConstr(x >= 3 * y, name=\"Ratio\")\n\n    # Minimum number of elevators\n    m.addConstr(y >= 2, name=\"MinElevators\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total space\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_space = optimize_transport_infrastructure()\n    if min_space is not None:\n        print(f\"Minimum Total Space: {min_space}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A226",
  "description": "A research group is making fabric and plastic using two methods, method A and method B. Method A produces 25 units of fabric and 14 units of plastic per hour. Method B produces 45 units of fabric and 25 units of plastic per hour. Method A requires 60 units of a special element while method B requires 65 units of the same special element. The research group has available 3500 units of the special element and must make at least 1400 units of fabric and 1000 units of plastic. How many of each method should be executed to minimize the total time needed?",
  "ground_truth": 40.0,
  "formulation": null,
  "correct_program": "def optimize_production():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"fabric_plastic_production\")\n\n    # Decision variables: hours for Method A and Method B\n    x = m.addVar(name=\"MethodA_hours\", lb=0)\n    y = m.addVar(name=\"MethodB_hours\", lb=0)\n\n    # Set the objective: minimize total hours\n    m.setObjective(x + y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Fabric constraint\n    m.addConstr(25 * x + 45 * y >= 1400, name=\"Fabric\")\n    # Plastic constraint\n    m.addConstr(14 * x + 25 * y >= 1000, name=\"Plastic\")\n    # Special element constraint\n    m.addConstr(60 * x + 65 * y <= 3500, name=\"SpecialElement\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total time\n        return m.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_production()\n    if min_time is not None:\n        print(f\"Minimum Total Production Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A227",
  "description": "Due to an accident, at least 550 locals must be moved across a lake. They can either be transported over the lake by a kayak or a motorboat. Kayaks can transport 4 people every trip and motorboats can transport 5 people every trip. Kayaks take 5 minutes per trip whereas motorboats take 3 minutes per trip. Due to the limited number of motorboats available to the locals, there can be at most 25 motorboat trips and at least 75% of the trips should be by kayak. How many of each transportation method should be used to minimize the total amount of time needed to transport all the locals?",
  "ground_truth": 610.0,
  "formulation": null,
  "correct_program": "def optimize_transportation(min_people=550, max_motor_trips=25, kayak_time=5, motor_time=3, min_kayak_ratio=0.75):\n    from gurobipy import Model, GRB\n    \n    # Create a new model\n    m = Model(\"LakeTransport\")\n    \n    # Decision variables\n    # k: number of kayak trips\n    # m_trips: number of motorboat trips\n    k = m.addVar(vtype=GRB.INTEGER, name=\"kayak_trips\", lb=0)\n    m_trips = m.addVar(vtype=GRB.INTEGER, name=\"motorboat_trips\", lb=0)\n    \n    # Set objective: minimize total time\n    m.setObjective(kayak_time * k + motor_time * m_trips, GRB.MINIMIZE)\n    \n    # Add constraints\n    # Capacity constraint: at least min_people transported\n    m.addConstr(4 * k + 5 * m_trips >= min_people, \"capacity\")\n    \n    # Motorboat trip limit\n    m.addConstr(m_trips <= max_motor_trips, \"max_motor_trips\")\n    \n    # Trip ratio constraint: at least 75% trips are by kayak\n    m.addConstr(k >= 3 * m_trips, \"trip_ratio\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        total_time = m.objVal\n        return total_time\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_time = optimize_transportation()\n    if min_time is not None:\n        print(f\"Minimum Total Time: {min_time}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A228",
  "description": "A drop-in clinic is performing a test either through the ear or blood. A blood test takes 30 minutes to perform while an ear test takes 5 minutes to perform. Since the blood test is more accurate, at least three times as many blood tests should be performed as ear tests. However, at least 12 ear tests must be administered. If the drop-in clinic operates for 7525 minutes, maximize the number of tests that can be performed.",
  "ground_truth": 316.0,
  "formulation": null,
  "correct_program": "def maximize_tests(time_available=7525, min_ear_tests=12, ratio_blood_to_ear=3):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"TestOptimization\")\n\n    # Decision variables\n    x = model.addVar(name=\"ear_tests\", vtype=GRB.INTEGER, lb=0)\n    y = model.addVar(name=\"blood_tests\", vtype=GRB.INTEGER, lb=0)\n\n    # Set objective: maximize total number of tests\n    model.setObjective(x + y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Time constraint\n    model.addConstr(5 * x + 30 * y <= time_available, name=\"TimeLimit\")\n    # Blood to ear ratio constraint\n    model.addConstr(y >= ratio_blood_to_ear * x, name=\"BloodEarRatio\")\n    # Minimum ear tests\n    model.addConstr(x >= min_ear_tests, name=\"MinEarTests\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum total tests\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_tests = maximize_tests()\n    if max_tests is not None:\n        print(f\"Maximum Tests Performed: {max_tests}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A229",
  "description": "A researcher is outsourcing annotations and has two options: a specialized third-party or a common third-party annotation company. The specialized company can annotate at a rate of 60 images per hour whereas the common company can annotate at a rate of 40 images per hour. However, the specialized company charges $100 per hour and the common company charges $72 per hour. The researcher has deadlines to meet and must complete a dataset of at least 10,000 images. They also have some special images that only the specialized company can annotate. Therefore, at least a third of work must be allocated to the specialized company. How should the researcher distribute the annotations to the two companies to minimize the cost of annotating the whole dataset?",
  "ground_truth": 16666.666666666668,
  "formulation": null,
  "correct_program": "def optimize_annotation_distribution(\n    total_images=10000,\n    specialized_rate=60,\n    common_rate=40,\n    specialized_cost=100,\n    common_cost=72\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"AnnotationCostMinimization\")\n\n    # Decision variables: number of images assigned to each company\n    x = model.addVar(name=\"specialized_images\", lb=0)\n    y = model.addVar(name=\"common_images\", lb=0)\n\n    # Set the objective: minimize total cost\n    # Cost per image for specialized company\n    cost_per_image_specialized = specialized_cost / specialized_rate\n    # Cost per image for common company\n    cost_per_image_common = common_cost / common_rate\n\n    model.setObjective(\n        cost_per_image_specialized * x + cost_per_image_common * y,\n        GRB.MINIMIZE\n    )\n\n    # Add constraints\n    # Total images constraint\n    model.addConstr(x + y >= total_images, name=\"total_images\")\n    # Minimum work for specialized company (at least one-third)\n    model.addConstr(2 * x >= y, name=\"specialized_min_work\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal total cost\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_cost = optimize_annotation_distribution()\n    if min_cost is not None:\n        print(f\"Minimum Total Annotation Cost: {min_cost}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A230",
  "description": "A golf course is hosting an event and can transport guests using either golf carts or pull carts. A golf cart can take 4 guests while a pull cart can take 1 guest. Since golf carts take up a lot of space, at most 60% of carts can be golf carts. If the golf course needs to transport at least 80 guests, how many of each cart should be used to minimize the total number of carts needed?",
  "ground_truth": 29.0,
  "formulation": null,
  "correct_program": "def optimize_carts():\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Golf_Carts_Optimization\")\n\n    # Decision variables: number of golf carts (G) and pull carts (P)\n    G = model.addVar(vtype=GRB.INTEGER, name=\"GolfCarts\", lb=0)\n    P = model.addVar(vtype=GRB.INTEGER, name=\"PullCarts\", lb=0)\n\n    # Set the objective: minimize total carts\n    model.setObjective(G + P, GRB.MINIMIZE)\n\n    # Add constraints\n    # Guest transportation constraint\n    model.addConstr(4 * G + P >= 80, name=\"GuestTransport\")\n    # Cart composition ratio constraint\n    model.addConstr(2 * G <= 3 * P, name=\"CartRatio\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal total number of carts\n        return model.objVal\n    else:\n        # No feasible solution found\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_carts = optimize_carts()\n    if min_carts is not None:\n        print(f\"Minimum Total Carts (Golf + Pull): {min_carts}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A231",
  "description": "A smoothie shop has a promotion for their two smoothies; an acai berry smoothie and a banana chocolate smoothie. It takes 7 units of acai berries and 3 units of water to make the acai berry smoothie. It takes 6 units of banana chocolate and 4 units of water to make the banana chocolate smoothie. Banana chocolate smoothies are more popular and thus the number of banana chocolate smoothies made must be more than the number of acai berry smoothies made. However, the acai berry smoothies have a loyal customer base, and at least 35% of the smoothies made must be acai berry smoothies. If the smoothie shop has 3500 units of acai berries and 3200 units of banana chocolate, to reduce the total amount of water, how many of each smoothie type should be made?",
  "ground_truth": 0.0001216666666666,
  "formulation": null,
  "correct_program": "def optimize_smoothies(\n    acai_berries=3500,\n    banana_chocolate=3200,\n    water_limit=None  # Not explicitly given, so we omit this constraint\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Smoothie_Production_MinWater\")\n\n    # Decision variables\n    x = model.addVar(name=\"acai_smoothies\", lb=0)\n    y = model.addVar(name=\"banana_smoothies\", lb=0)\n\n    # Set the objective: minimize total water used\n    model.setObjective(3 * x + 4 * y, GRB.MINIMIZE)\n\n    # Add resource constraints\n    model.addConstr(7 * x <= acai_berries, name=\"Acai_Berries_Limit\")\n    model.addConstr(6 * y <= banana_chocolate, name=\"Banana_Choco_Limit\")\n\n    # Add popularity constraint: y > x\n    # Since Gurobi does not handle strict inequalities directly,\n    # we can approximate y >= x + epsilon, with epsilon > 0\n    epsilon = 1e-5\n    model.addConstr(y >= x + epsilon, name=\"Popularity_Constraint\")\n\n    # Add loyalty constraint: (13/7) * x >= y\n    model.addConstr((13/7) * x >= y, name=\"Loyalty_Constraint\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        total_water = model.objVal\n        return total_water\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_water = optimize_smoothies()\n    if min_water is not None:\n        print(f\"Minimum Total Water Used: {min_water}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A232",
  "description": "A handmade sports equipment manufacturing company makes basketballs and footballs. Basketballs require 5 units of materials and 1 hour to make whereas footballs require 3 units of materials and 2 hours to make. The manufacturing company has available 1500 units of materials and their workers working at max capacity can work for at most 750 hours. Since basketballs sell better, there must be at least three times as many basketballs as footballs but the manufacturing company would like at least 50 footballs. How many of each should the manufacturing company make to maximize the total number of sports equipment produced?",
  "ground_truth": 333.0,
  "formulation": null,
  "correct_program": "def optimize_sports_equipment(material_limit=1500, hours_limit=750, min_football=50):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Sports_Equipment_Production\")\n\n    # Decision variables: number of basketballs and footballs\n    x = model.addVar(name=\"Basketballs\", vtype=GRB.INTEGER, lb=0)\n    y = model.addVar(name=\"Footballs\", vtype=GRB.INTEGER, lb=0)\n\n    # Set the objective: maximize total equipment\n    model.setObjective(x + y, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Material constraint\n    model.addConstr(5 * x + 3 * y <= material_limit, name=\"MaterialLimit\")\n    # Labor hours constraint\n    model.addConstr(x + 2 * y <= hours_limit, name=\"HoursLimit\")\n    # Production ratio constraint\n    model.addConstr(x >= 3 * y, name=\"BasketballToFootballRatio\")\n    # Minimum footballs\n    model.addConstr(y >= min_football, name=\"MinFootballs\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        total_produced = x.X + y.X\n        return total_produced\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    total_equipment = optimize_sports_equipment()\n    if total_equipment is not None:\n        print(f\"Maximum Total Sports Equipment Produced: {total_equipment}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A233",
  "description": "A researcher must perform two types of experiments, in-vivo and ex-vivo. In-vivo experiments requires 30 minutes to prepare and 60 minutes to execute. Ex-vivo experiments require 45 minutes to prepare and 30 minutes to execute. In addition, in-vivo experiments gives the researcher 2 units of radiation while ex-vivo experiments give the researcher 3 unites of radiation. At most 400 minutes can be used for preparation and 500 minutes for execution of the experiment. How many of each experiment should be scheduled by the researcher to minimize the total radiation received by the researcher?",
  "ground_truth": 0.0,
  "formulation": null,
  "correct_program": "def minimize_radiation(prep_time_limit=400, exec_time_limit=500):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Minimize_Radiation\")\n\n    # Decision variables: number of experiments\n    x = model.addVar(vtype=GRB.INTEGER, name=\"InVivo\")\n    y = model.addVar(vtype=GRB.INTEGER, name=\"ExVivo\")\n\n    # Set objective: minimize total radiation\n    model.setObjective(2 * x + 3 * y, GRB.MINIMIZE)\n\n    # Add preparation time constraint\n    model.addConstr(30 * x + 45 * y <= prep_time_limit, \"PrepTimeLimit\")\n\n    # Add execution time constraint\n    model.addConstr(60 * x + 30 * y <= exec_time_limit, \"ExecTimeLimit\")\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        return model.objVal\n    else:\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_radiation = minimize_radiation()\n    if min_radiation is not None:\n        print(f\"Minimum Total Radiation: {min_radiation}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A234",
  "description": "A village delivers mail to nearby villages either by runners or canoers. Runners can carry three bags of mail each time and takes 4 hours. Canoers can carry ten bags of mail each time and takes 2 hours. At most 33% of deliveries can be by canoe. Additionally, the village can spare at most 200 total hours and at least 4 runners must be used. How many of each way to deliver must be used to maximize the total amount of mail that can be delivered?",
  "ground_truth": 201.0,
  "formulation": null,
  "correct_program": "def optimize_mail_delivery():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"MailDeliveryOptimization\")\n\n    # Decision variables: number of trips by runners and canoers\n    R = m.addVar(name=\"R\", lb=4, vtype=GRB.INTEGER)  # at least 4 runners\n    C = m.addVar(name=\"C\", lb=0, vtype=GRB.INTEGER)\n\n    # Set the objective: maximize total mail delivered\n    m.setObjective(3 * R + 10 * C, GRB.MAXIMIZE)\n\n    # Add constraints\n    # Time constraint\n    m.addConstr(4 * R + 2 * C <= 200, name=\"TimeLimit\")\n    # Canoe usage limit (33%)\n    m.addConstr(6.7 * C <= 0.99 * R, name=\"CanoeLimit\")\n\n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum total mail delivered\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_mail = optimize_mail_delivery()\n    if max_mail is not None:\n        print(f\"Maximum Mail Delivered: {max_mail} units\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A235",
  "description": "A woman on a diet needs to eat two types of meal preps, a smoothie and a protein bar. Each smoothie contains 2 units of protein and 300 calories. Each protein bar contains 7 units of protein and 250 calories. The woman must eat 2 times more protein bars than smoothies. If the woman can consume at most 2000 calories, how many of each should she eat or drink to maximize her protein intake?",
  "ground_truth": 56.0,
  "formulation": null,
  "correct_program": "def optimize_meal_preps(max_calories=2000, protein_smoothie=2, protein_bar=7,\n                          calories_smoothie=300, calories_bar=250):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"MealPrepsMaxProtein\")\n\n    # Decision variables: number of smoothies (x) and protein bars (y)\n    # Since quantities are discrete, define as integer variables\n    x = model.addVar(name=\"smoothies\", vtype=GRB.INTEGER, lb=0)\n    y = model.addVar(name=\"bars\", vtype=GRB.INTEGER, lb=0)\n\n    # Add the relationship constraint: y = 2x\n    model.addConstr(y >= 2 * x, name=\"relation\")\n\n    # Add caloric constraint\n    model.addConstr(\n        calories_smoothie * x + calories_bar * y <= max_calories,\n        name=\"calorie_limit\"\n    )\n\n    # Set the objective: maximize total protein\n    total_protein = protein_smoothie * x + protein_bar * y\n    model.setObjective(total_protein, GRB.MAXIMIZE)\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the maximum total protein\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_protein = optimize_meal_preps()\n    if max_protein is not None:\n        print(f\"Maximum protein intake: {max_protein:.2f} grams\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A236",
  "description": "A clinical firm has two factories, a northern factory and a western factory, where they make expensive anti-itch injections and topical cream. Every hour, the northern factory makes 800 g of anti-itch injections and 700 g of topical cream. Every hour, the western factory makes 650 g of anti-itch injections and 750 g of topical cream. The northern factory requires 40 units of plastic per hour while the western factory requires 35 units of plastic to manufacture the packaging. The clinical firm has available 60,000 units of plastic. Further, they must make at least 800,000 g of anti-itch injections and 700,000 g of topical cream. How many hours should each factory be run to minimize the total time needed?",
  "ground_truth": 551.7241379310345,
  "formulation": null,
  "correct_program": "def optimize_factory_hours(\n    injection_target=800000,\n    cream_target=700000,\n    plastic_limit=60000,\n    rate_injection_north=800,\n    rate_cream_north=700,\n    rate_injection_west=650,\n    rate_cream_west=750,\n    plastic_north=40,\n    plastic_west=35\n):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Factory_Production_MinHours\")\n\n    # Decision variables: hours of operation for each factory\n    x_N = model.addVar(name=\"x_N\", lb=0)\n    x_W = model.addVar(name=\"x_W\", lb=0)\n    max_hour = model.addVar(name=\"max_hour\", lb=0)\n\n    # Set the objective: minimize total hours\n    model.setObjective(max_hour, GRB.MINIMIZE)\n\n    # Add constraints\n    # Anti-itch injections production constraint\n    model.addConstr(\n        rate_injection_north * x_N + rate_injection_west * x_W >= injection_target,\n        name=\"InjectionRequirement\"\n    )\n\n    # Topical cream production constraint\n    model.addConstr(\n        rate_cream_north * x_N + rate_cream_west * x_W >= cream_target,\n        name=\"CreamRequirement\"\n    )\n\n    # Plastic usage constraint\n    model.addConstr(\n        plastic_north * x_N + plastic_west * x_W <= plastic_limit,\n        name=\"PlasticLimit\"\n    )\n    \n    # Maximum hours constraint\n    model.addConstr(max_hour >= x_N, name=\"MaxHour_N\")\n    model.addConstr(max_hour >= x_W, name=\"MaxHour_W\")\n    \n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        total_hours = model.objVal\n        return total_hours\n    else:\n        return None\n    \n# Example usage\nprint(optimize_factory_hours())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A237",
  "description": "A hospital prepares batches of medication patches and anti-biotic creams. Each medication patch requires 3 minutes to prepare and 5 units of materials. Each anti-biotic cream requires 5 minutes to prepare and 6 units of materials. Since anti-biotic creams are used more often, there must be at least twice as many anti-biotic creams as medication patches. Due to storage reasons, the hospital can make at most 100 batches of medication patches and anti-biotic creams in total. The hospital has available 400 minutes of staff to spare and 530 units of materials. If each batch of medication patches can treat 3 people and each batch of anti-biotic cream can treat 2 people, how many batches of each should be made to maximize the number of people that can be treated?",
  "ground_truth": 214.0,
  "formulation": null,
  "correct_program": "def optimize_medication_batches():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"Hospital_Medication_Production\")\n    \n    # Decision variables: number of batches of medication patches and anti-biotic creams\n    x = m.addVar(vtype=GRB.INTEGER, name=\"Medication_Patches\")\n    y = m.addVar(vtype=GRB.INTEGER, name=\"AntiBiotic_Creams\")\n    \n    # Set the objective: maximize total number of people treated\n    m.setObjective(3 * x + 2 * y, GRB.MAXIMIZE)\n    \n    # Add constraints\n    m.addConstr(3 * x + 5 * y <= 400, \"Time_Constraint\")\n    m.addConstr(5 * x + 6 * y <= 530, \"Material_Constraint\")\n    m.addConstr(x + y <= 100, \"Batch_Limit\")\n    m.addConstr(y >= 2 * x, \"Creams_at_least_twice_patches\")\n    m.addConstr(x >= 0, \"NonNeg_x\")\n    m.addConstr(y >= 0, \"NonNeg_y\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the maximum number of people treated\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    max_people_treated = optimize_medication_batches()\n    if max_people_treated is not None:\n        print(f\"Maximum People Treated: {max_people_treated}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A238",
  "description": "A company in the desert can transport goods to rural cities either by camel caravans or desert trucks. A camel caravan can deliver 50 units of goods per trip and takes 12 hours. A desert truck can deliver 150 units of goods per trip and takes 5 hours. However, due to the cost of fuel, the company prefers to have more camel caravans than desert trucks.  If the company needs to deliver 1500 units of goods, how many of each method of transportation should the company organize to minimize the total number of hours required?",
  "ground_truth": 108.0,
  "formulation": null,
  "correct_program": "def optimize_transportation():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"desert_transportation\")\n\n    # Decision variables: number of trips\n    x = m.addVar(vtype=GRB.INTEGER, name=\"camel_trips\", lb=0)\n    y = m.addVar(vtype=GRB.INTEGER, name=\"truck_trips\", lb=0)\n    max_hour = m.addVar(vtype=GRB.INTEGER, name=\"max_hours\", lb=0)\n\n    # Set objective: minimize total hours\n    m.setObjective(max_hour, GRB.MINIMIZE)\n    # m.setObjective(12 * x + 5 * y, GRB.MINIMIZE)\n\n    # Add constraints\n    # Delivery constraint\n    m.addConstr(50 * x + 150 * y >= 1500, name=\"delivery_requirement\")\n    # Preference constraint\n    m.addConstr(x >= y + 1, name=\"more_camel_trips\")\n    # Maximum hours constraint\n    m.addConstr(12 * x <= max_hour, name=\"max_hours_camel\")\n    m.addConstr(5 * y <= max_hour, name=\"max_hours_truck\")\n    \n    # Optimize the model\n    m.optimize()\n\n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total hours\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nprint(optimize_transportation())",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A239",
  "description": "A biotechnology company has 35,000 units of antibiotics available which is important to the process of making a first-dose and second-dose of vaccines. The first-dose vaccine requires 30 units of antibiotics and 20 mg of gelatine whereas the second-dose vaccine requires 65 units of antibiotics and 60 mg of gelatine. Since the first-dose vaccine is required before the second-dose vaccine, there must be more first-dose than second-dose vaccines manufactured. However, at least 40 second-dose vaccines must be made. How many of each vaccine should be made to minimize the amount of gelatine used?",
  "ground_truth": 3220.0,
  "formulation": null,
  "correct_program": "def optimize_vaccine_production(antibiotic_available=35000, gelatine_first=20, gelatine_second=60,\n                                antibiotic_first=30, antibiotic_second=65, min_second=40):\n    import gurobipy as gp\n    from gurobipy import GRB\n\n    # Create a new model\n    model = gp.Model(\"Vaccine_Production_Min_Gelatine\")\n\n    # Decision variables: number of first and second dose vaccines\n    x1 = model.addVar(vtype=GRB.INTEGER, name=\"First_Dose\")\n    x2 = model.addVar(vtype=GRB.INTEGER, name=\"Second_Dose\")\n\n    # Set objective: minimize total gelatine used\n    model.setObjective(gelatine_first * x1 + gelatine_second * x2, GRB.MINIMIZE)\n\n    # Add constraints\n    # Antibiotic availability constraint\n    model.addConstr(antibiotic_first * x1 + antibiotic_second * x2 <= antibiotic_available, \"Antibiotic_Limit\")\n    # Production order constraint: first-dose > second-dose\n    model.addConstr(x1 >= x2 + 1, \"Order_Constraint\")\n    # Minimum second-dose vaccines\n    model.addConstr(x2 >= min_second, \"Min_Second_Dose\")\n    # Non-negativity is implicit in variable definition\n\n    # Optimize the model\n    model.optimize()\n\n    # Check if a feasible solution was found\n    if model.status == GRB.OPTIMAL:\n        # Return the optimal total gelatine used\n        return model.objVal\n    else:\n        # No feasible solution\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    result = optimize_vaccine_production()\n    print(f\"Optimal total gelatine used: {result}\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A240",
  "description": "Both chemical A and chemical B need to be added to a mixer for making bread. One unit of chemical A takes 30 seconds to be effective while one unit of chemical B takes 45 seconds to be effective. Because chemical A can be dangerous, there has to be at most a third as much chemical A as chemical B in the mixer. If there has to be at least 300 units of chemical A in the mixer and at least 1500 units of total chemicals in the mixer, how many units of each should be added to minimize the total time it takes for the mixed bread to be ready?",
  "ground_truth": 61875.0,
  "formulation": null,
  "correct_program": "from gurobipy import Model, GRB\n\n\ndef minimize_chemical_time():\n    # Create a new model\n    model = Model(\"chemical_time_optimization\")\n\n    # Variables\n    x = model.addVar(name=\"x\", lb=300)\n    y = model.addVar(name=\"y\", lb=0)\n\n    # Objective function: minimize 30x + 45y\n    model.setObjective(30 * x + 45 * y, GRB.MINIMIZE)\n\n    # Constraints\n    model.addConstr(x <= (1 / 3) * y, \"A_B_ratio\")\n    model.addConstr(x + y >= 1500, \"total_chemicals\")\n\n    # Optimize\n    model.optimize()\n\n    # Check if solution exists\n    if model.status == GRB.OPTIMAL:\n        return model.objVal\n    else:\n        return None\n\n\n# Example usage\nif __name__ == \"__main__\":\n    result = minimize_chemical_time()\n    print(f\"Minimum total time for bread to be ready: {result}\")\n",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
},
{
  "task_id": "A241",
  "description": "A tourism company can buy sedans or buses to add to their fleet of vehicles to increase their capacity for more tourists. A sedan can seat 50 tourists per day but results in 10 units of pollution. A bus can seat 250 tourists per day but results in 40 units of pollution. The city has limited this tourism company to producing at most 800 units of pollutants per day. To make a profit, this tourism company must take care of at least 4600 customers per day. Planning to make a profit, how many sedans and how many buses should this tourism company purchase to decrease the total number of vehicles needed?",
  "ground_truth": 19.0,
  "formulation": null,
  "correct_program": "def optimize_vehicle_fleet():\n    from gurobipy import Model, GRB\n\n    # Create a new model\n    m = Model(\"TourismFleetOptimization\")\n    \n    # Decision variables: number of sedans and buses\n    x = m.addVar(name=\"sedans\", vtype=GRB.INTEGER, lb=0)\n    y = m.addVar(name=\"buses\", vtype=GRB.INTEGER, lb=0)\n    \n    # Set the objective: minimize total number of vehicles\n    m.setObjective(x + y, GRB.MINIMIZE)\n    \n    # Capacity constraint: at least 4600 tourists\n    m.addConstr(50 * x + 250 * y >= 4600, name=\"capacity\")\n    \n    # Pollution constraint: at most 800 units\n    m.addConstr(10 * x + 40 * y <= 800, name=\"pollution\")\n    \n    # Optimize the model\n    m.optimize()\n    \n    # Check if a feasible solution was found\n    if m.status == GRB.OPTIMAL:\n        # Return the optimal total number of vehicles\n        return m.objVal\n    else:\n        # No feasible solution\n        return None\n# Example usage\nif __name__ == \"__main__\":\n    min_vehicles = optimize_vehicle_fleet()\n    if min_vehicles is not None:\n        print(f\"Minimum Total Vehicles (Sedans + Buses): {min_vehicles}\")\n    else:\n        print(\"No feasible solution found.\")",
  "output_status": [],
  "success_count": 0,
  "success_confidence": 0,
  "fail_to_diagnose": 0
,
  "retrieved_insights": []
}
]
